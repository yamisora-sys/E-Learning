{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      }\n\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n      }\n\n      return nativeStereoPannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,qCAAqC,GAA4C,CAC1FC,iBAD0F,EAE1FC,4BAF0F,EAG1FC,kBAH0F,EAI1FC,gBAJ0F,EAK1FC,uBAL0F,KAM1F;EACA,OAAO,MAAmE;IACtE,MAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;IAEA,MAAMC,sBAAsB,GAAG,OAAOC,KAAP,EAAoCC,yBAApC,KAA6F;MACxH,IAAIC,sBAAsB,GAAGR,kBAAkB,CAA6BM,KAA7B,CAA/C;MAEA;;;;;MAIA,MAAMG,sCAAsC,GAAGb,gBAAgB,CAACY,sBAAD,EAAyBD,yBAAzB,CAA/D;;MAEA,IAAI,CAACE,sCAAL,EAA6C;QACzC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,sBAAsB,CAACG,YADzB;UAEZC,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;UAGZC,qBAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;UAIZC,GAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;QAJpB,CAAhB;QAOAP,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAD,EAA4BG,OAA5B,CAArD;MACH;;MAEDP,+BAA+B,CAACa,GAAhC,CAAoCT,yBAApC,EAA+DC,sBAA/D;;MAEA,IAAI,CAACC,sCAAL,EAA6C;QACzC,MAAMR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAAtB;MACH,CAFD,MAEO;QACH,MAAMhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAAvB;MACH;;MAED,IAAInB,sBAAsB,CAACa,sBAAD,CAA1B,EAAoD;QAChD,MAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,CAA7B;MACH,CAFD,MAEO;QACH,MAAMf,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAnC,CAA7B;MACH;;MAED,OAAOA,sBAAP;IACH,CAnCD;;IAqCA,OAAO;MACHU,MAAM,CAACZ,KAAD,EAA8BC,yBAA9B,EAAmF;QACrF,MAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAhC,CAAoCb,yBAApC,CAAvC;;QAEA,IAAIY,8BAA8B,KAAKE,SAAvC,EAAkD;UAC9C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;QACH;;QAED,OAAOd,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,CAA7B;MACH;;IATE,CAAP;EAWH,CAnDD;AAoDH,CA3DM","names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\stereo-panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IStereoPannerNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeStereoPannerNode, TStereoPannerNodeRendererFactoryFactory } from '../types';\n\nexport const createStereoPannerNodeRendererFactory: TStereoPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeStereoPannerNodes = new WeakMap<TNativeOfflineAudioContext, TNativeStereoPannerNode>();\n\n        const createStereoPannerNode = async (proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode<T, TNativeStereoPannerNode>(proxy);\n\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n\n            return nativeStereoPannerNode;\n        };\n\n        return {\n            render(proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeStereoPannerNode> {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}