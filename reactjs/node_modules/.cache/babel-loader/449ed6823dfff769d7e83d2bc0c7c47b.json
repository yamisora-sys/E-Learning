{"ast":null,"code":"import { observable } from \"./symbols\";\nexport function patch(arg) {\n  if (!Symbol.observable) {\n    if (typeof arg === \"function\" && arg.prototype && arg.prototype[Symbol.observable]) {\n      arg.prototype[observable] = arg.prototype[Symbol.observable];\n      delete arg.prototype[Symbol.observable];\n    } else {\n      arg[observable] = arg[Symbol.observable];\n      delete arg[Symbol.observable];\n    }\n  }\n\n  return arg;\n}","map":{"version":3,"mappings":"AAKA,SAASA,UAAT,QAA2B,WAA3B;AAOA,OAAM,SAAUC,KAAV,CACJC,GADI,EAC0E;EAE9E,IAAI,CAACC,MAAM,CAACH,UAAZ,EAAwB;IACtB,IACE,OAAOE,GAAP,KAAe,UAAf,IACAA,GAAG,CAACE,SADJ,IAEAF,GAAG,CAACE,SAAJ,CAAcD,MAAM,CAACH,UAArB,CAHF,EAIE;MACCE,GAAG,CAACE,SAAJ,CAAsBJ,UAAtB,IAAoCE,GAAG,CAACE,SAAJ,CAAcD,MAAM,CAACH,UAArB,CAApC;MACD,OAAOE,GAAG,CAACE,SAAJ,CAAcD,MAAM,CAACH,UAArB,CAAP;IACD,CAPD,MAOO;MACJE,GAAW,CAACF,UAAD,CAAX,GAA0BE,GAAG,CAACC,MAAM,CAACH,UAAR,CAA7B;MACD,OAAOE,GAAG,CAACC,MAAM,CAACH,UAAR,CAAV;IACD;EACF;;EACD,OAAOE,GAAP;AACD","names":["observable","patch","arg","Symbol","prototype"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\rxjs-interop\\source\\patch.ts"],"sourcesContent":["/**\n * @license Use of this source code is governed by an MIT-style license that\n * can be found in the LICENSE file at https://github.com/cartant/rxjs-interop\n */\n\nimport { observable } from \"./symbols\";\nimport { InteropObservable } from \"./types\";\n\nexport function patch<T extends InteropObservable<any>>(instance: T): T;\nexport function patch<T extends new (...args: any[]) => InteropObservable<any>>(\n  constructor: T\n): T;\nexport function patch(\n  arg: InteropObservable<any> | (new (...args: any[]) => InteropObservable<any>)\n): InteropObservable<any> | (new (...args: any[]) => InteropObservable<any>) {\n  if (!Symbol.observable) {\n    if (\n      typeof arg === \"function\" &&\n      arg.prototype &&\n      arg.prototype[Symbol.observable]\n    ) {\n      (arg.prototype as any)[observable] = arg.prototype[Symbol.observable];\n      delete arg.prototype[Symbol.observable];\n    } else {\n      (arg as any)[observable] = arg[Symbol.observable];\n      delete arg[Symbol.observable];\n    }\n  }\n  return arg;\n}\n"]},"metadata":{},"sourceType":"module"}