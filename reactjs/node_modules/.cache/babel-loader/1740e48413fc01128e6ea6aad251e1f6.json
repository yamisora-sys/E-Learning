{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DelayNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      super(context, false, nativeDelayNode, delayNodeRenderer);\n      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n      setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n    }\n\n    get delayTime() {\n      return this._delayTime;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,SAAS,EAAE,CAJS;EAKpBC,YAAY,EAAE;AALM,CAAxB;AAQA,OAAO,MAAMC,0BAA0B,GAAiC,CACpEC,oBADoE,EAEpEC,gBAFoE,EAGpEC,uBAHoE,EAIpEC,qBAJoE,EAKpEC,gBALoE,EAMpEC,2BANoE,EAOpEC,oBAPoE,KAQpE;EACA,OAAO,MAAMC,SAAN,SAA4CP,oBAA5C,CAAmE;IAGtEQ,YAAYC,OAAZ,EAAwBC,OAAxB,EAAwD;MACpD,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGnB,eAAL;QAAsB,GAAGiB;MAAzB,CAAtB;MACA,MAAMG,eAAe,GAAGV,qBAAqB,CAACQ,aAAD,EAAgBC,aAAhB,CAA7C;MACA,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAMI,iBAAiB,GAAiCD,SAAS,GAAGZ,uBAAuB,CAACU,aAAa,CAACd,YAAf,CAA1B,GAAyD,IAA1H;MAEA,MAAMW,OAAN,EAAe,KAAf,EAAsBI,eAAtB,EAAuCE,iBAAvC;MAEA,KAAKC,UAAL,GAAkBf,gBAAgB,CAAC,IAAD,EAAOa,SAAP,EAAkBD,eAAe,CAAChB,SAAlC,CAAlC;MAEAS,oBAAoB,CAAC,IAAD,EAAOM,aAAa,CAACd,YAArB,CAApB;IACH;;IAEY,IAATD,SAAS;MACT,OAAO,KAAKmB,UAAZ;IACH;;EAnBqE,CAA1E;AAqBH,CA9BM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","delayTime","maxDelayTime","createDelayNodeConstructor","audioNodeConstructor","createAudioParam","createDelayNodeRenderer","createNativeDelayNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","DelayNode","constructor","context","options","nativeContext","mergedOptions","nativeDelayNode","isOffline","delayNodeRenderer","_delayTime"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IDelayNode, IDelayOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TDelayNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n} as const;\n\nexport const createDelayNodeConstructor: TDelayNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DelayNode<T extends TContext> extends audioNodeConstructor<T> implements IDelayNode<T> {\n        private _delayTime: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDelayOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n\n        get delayTime(): IAudioParam {\n            return this._delayTime;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}