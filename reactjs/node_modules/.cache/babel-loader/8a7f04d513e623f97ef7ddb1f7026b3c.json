{"ast":null,"code":"import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n  return (audioNode, count) => {\n    const cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    const nativeContext = getNativeContext(audioNode.context);\n    const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        const {\n          outputs\n        } = getAudioNodeConnections(audioNode);\n\n        for (const output of outputs) {\n          if (isAudioNodeOutputConnection(output)) {\n            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n          } else {\n            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,MAAMC,2BAA2B,GAAkC,CACtEC,uCADsE,EAEtEC,aAFsE,EAGtEC,uBAHsE,EAItEC,kBAJsE,EAKtEC,mBALsE,EAMtEC,gBANsE,EAOtEC,iBAPsE,EAQtEC,2BARsE,KAStE;EACA,OAAO,CAACC,SAAD,EAAYC,KAAZ,KAAqB;IACxB,MAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;IAEA,IAAIE,YAAY,KAAKE,SAArB,EAAgC;MAC5B,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;IACH;;IAED,MAAMC,aAAa,GAAGT,gBAAgB,CAACG,SAAS,CAACO,OAAX,CAAtC;IACA,MAAMC,SAAS,GAAGT,2BAA2B,CAACO,aAAD,CAA7C;;IAEA,IAAIJ,YAAY,KAAKD,KAArB,EAA4B;MACxBR,aAAa,CAACgB,MAAd,CAAqBT,SAArB;;MAEA,IAAI,CAACQ,SAAD,IAAcV,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;QAC5C,MAAMU,qBAAqB,GAAGf,kBAAkB,CAACK,SAAD,CAAhD;QACA,MAAM;UAAEW;QAAF,IAAcjB,uBAAuB,CAACM,SAAD,CAA3C;;QAEA,KAAK,MAAMY,MAAX,IAAqBD,OAArB,EAA8B;UAC1B,IAAIrB,2BAA2B,CAACsB,MAAD,CAA/B,EAAyC;YACrC,MAAMC,0BAA0B,GAAGlB,kBAAkB,CAACiB,MAAM,CAAC,CAAD,CAAP,CAArD;YAEApB,uCAAuC,CAACkB,qBAAD,EAAwBG,0BAAxB,EAAoDD,MAAM,CAAC,CAAD,CAA1D,EAA+DA,MAAM,CAAC,CAAD,CAArE,CAAvC;UACH,CAJD,MAIO;YACH,MAAME,2BAA2B,GAAGlB,mBAAmB,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAvD;YAEAF,qBAAqB,CAACK,OAAtB,CAA8BD,2BAA9B,EAA2DF,MAAM,CAAC,CAAD,CAAjE;UACH;QACJ;MACJ;IACJ,CAnBD,MAmBO;MACHnB,aAAa,CAACuB,GAAd,CAAkBhB,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;IACH;EACJ,CAhCD;AAiCH,CA3CM","names":["isAudioNodeOutputConnection","createDecrementCycleCounter","connectNativeAudioNodeToNativeAudioNode","cycleCounters","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","getNativeContext","isActiveAudioNode","isNativeOfflineAudioContext","audioNode","count","cycleCounter","get","undefined","Error","nativeContext","context","isOffline","delete","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","connect","set"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\decrement-cycle-counter.ts"],"sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TDecrementCycleCounterFactory } from '../types';\n\nexport const createDecrementCycleCounter: TDecrementCycleCounterFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    cycleCounters,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    getNativeContext,\n    isActiveAudioNode,\n    isNativeOfflineAudioContext\n) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    } else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        } else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}