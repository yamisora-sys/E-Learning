{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context); // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n      super(context, false, nativeMediaStreamAudioDestinationNode, null);\n      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n    }\n\n    get stream() {\n      return this._nativeMediaStreamAudioDestinationNode.stream;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,UAFE;EAGpBC,qBAAqB,EAAE;AAHH,CAAxB;AAMA,OAAO,MAAMC,gDAAgD,GAAuD,CAChHC,oBADgH,EAEhHC,2CAFgH,EAGhHC,gBAHgH,EAIhHC,2BAJgH,KAKhH;EACA,OAAO,MAAMC,+BAAN,SAA8FJ,oBAA9F,CAAqH;IAIxHK,YAAYC,OAAZ,EAAwBC,OAAxB,EAA4D;MACxD,MAAMC,aAAa,GAAGN,gBAAgB,CAACI,OAAD,CAAtC,CADwD,CAGxD;;MACA,IAAIH,2BAA2B,CAACK,aAAD,CAA/B,EAAgD;QAC5C,MAAM,IAAIC,SAAJ,EAAN;MACH;;MAED,MAAMC,aAAa,GAAG,EAAE,GAAGf,eAAL;QAAsB,GAAGY;MAAzB,CAAtB;MACA,MAAMI,qCAAqC,GAAGV,2CAA2C,CAACO,aAAD,EAAgBE,aAAhB,CAAzF;MAEA,MAAMJ,OAAN,EAAe,KAAf,EAAsBK,qCAAtB,EAAoF,IAApF;MAEA,KAAKC,sCAAL,GAA8CD,qCAA9C;IACH;;IAES,IAANE,MAAM;MACN,OAAO,KAAKD,sCAAL,CAA4CC,MAAnD;IACH;;EAtBuH,CAA5H;AAwBH,CA9BM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createMediaStreamAudioDestinationNodeConstructor","audioNodeConstructor","createNativeMediaStreamAudioDestinationNode","getNativeContext","isNativeOfflineAudioContext","MediaStreamAudioDestinationNode","constructor","context","options","nativeContext","TypeError","mergedOptions","nativeMediaStreamAudioDestinationNode","_nativeMediaStreamAudioDestinationNode","stream"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\media-stream-audio-destination-node-constructor.ts"],"sourcesContent":["import { IAudioContext, IAudioNodeOptions, IMediaStreamAudioDestinationNode, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaStreamAudioDestinationNodeConstructorFactory, TNativeMediaStreamAudioDestinationNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers'\n} as const;\n\nexport const createMediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaStreamAudioDestinationNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaStreamAudioDestinationNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaStreamAudioDestinationNode<T> {\n        private _nativeMediaStreamAudioDestinationNode: TNativeMediaStreamAudioDestinationNode;\n\n        constructor(context: T, options?: Partial<IAudioNodeOptions>) {\n            const nativeContext = getNativeContext(context);\n\n            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n\n            super(context, false, nativeMediaStreamAudioDestinationNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n        }\n\n        get stream(): MediaStream {\n            return this._nativeMediaStreamAudioDestinationNode.stream;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}