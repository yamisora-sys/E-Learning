{"ast":null,"code":"export const createUnhandledRejection = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n  return coolingOffPeriod => wrapSubscribeFunction(observer => {\n    if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n      return emitNotSupportedError(observer);\n    }\n\n    const possiblyUnhandledRejections = new Map();\n    let intervalId = null;\n\n    const deletePossiblyUnhandledRejection = _ref => {\n      let {\n        promise\n      } = _ref;\n      return possiblyUnhandledRejections.delete(promise);\n    };\n\n    const emitUnhandledRejection = () => {\n      const latestTimestampToEmit = Date.now() - coolingOffPeriod;\n      possiblyUnhandledRejections.forEach((_ref2, promise) => {\n        let {\n          reason,\n          timestamp\n        } = _ref2;\n\n        if (timestamp > latestTimestampToEmit) {\n          return;\n        }\n\n        possiblyUnhandledRejections.delete(promise);\n        observer.next(reason);\n      });\n\n      if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n        window.clearInterval(intervalId);\n        intervalId = null;\n      }\n    };\n\n    const registerPossiblyUnhandledRejection = event => {\n      event.preventDefault();\n      possiblyUnhandledRejections.set(event.promise, {\n        reason: event.reason,\n        timestamp: Date.now()\n      });\n\n      if (intervalId === null) {\n        intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n      }\n    };\n\n    window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n    window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n    return () => {\n      if (intervalId !== null) {\n        window.clearInterval(intervalId);\n      }\n\n      window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n      window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n    };\n  });\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAA+B,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,KAAyD;EACzH,OAAQC,gBAAD,IACHD,qBAAqB,CAAEE,QAAD,IAAa;IAC/B,IAAIH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACI,aAAP,KAAyBC,SAA5C,IAAyDL,MAAM,CAACM,WAAP,KAAuBD,SAApF,EAA+F;MAC3F,OAAON,qBAAqB,CAACI,QAAD,CAA5B;IACH;;IAED,MAAMI,2BAA2B,GAAG,IAAIC,GAAJ,EAApC;IAEA,IAAIC,UAAU,GAAkB,IAAhC;;IAEA,MAAMC,gCAAgC,GAAG;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAwCJ,2BAA2B,CAACK,MAA5B,CAAmCD,OAAnC,CAAxC;IAAA,CAAzC;;IACA,MAAME,sBAAsB,GAAG,MAAK;MAChC,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,KAAad,gBAA3C;MAEAK,2BAA2B,CAACU,OAA5B,CAAoC,QAAwBN,OAAxB,KAAmC;QAAA,IAAlC;UAAEO,MAAF;UAAUC;QAAV,CAAkC;;QACnE,IAAIA,SAAS,GAAGL,qBAAhB,EAAuC;UACnC;QACH;;QAEDP,2BAA2B,CAACK,MAA5B,CAAmCD,OAAnC;QACAR,QAAQ,CAACiB,IAAT,CAAcF,MAAd;MACH,CAPD;;MASA,IAAIT,UAAU,KAAK,IAAf,IAAuBF,2BAA2B,CAACc,IAA5B,KAAqC,CAAhE,EAAmE;QAC/DrB,MAAM,CAACI,aAAP,CAAqBK,UAArB;QACAA,UAAU,GAAG,IAAb;MACH;IACJ,CAhBD;;IAiBA,MAAMa,kCAAkC,GAAIC,KAAD,IAAiC;MACxEA,KAAK,CAACC,cAAN;MAEAjB,2BAA2B,CAACkB,GAA5B,CAAgCF,KAAK,CAACZ,OAAtC,EAA+C;QAC3CO,MAAM,EAAEK,KAAK,CAACL,MAD6B;QAE3CC,SAAS,EAAEJ,IAAI,CAACC,GAAL;MAFgC,CAA/C;;MAKA,IAAIP,UAAU,KAAK,IAAnB,EAAyB;QACrBA,UAAU,GAAGT,MAAM,CAACM,WAAP,CAAmBO,sBAAnB,EAA2CX,gBAAgB,GAAG,CAA9D,CAAb;MACH;IACJ,CAXD;;IAaAF,MAAM,CAAC0B,gBAAP,CAAwB,kBAAxB,EAA4ChB,gCAA5C;IACAV,MAAM,CAAC0B,gBAAP,CAAwB,oBAAxB,EAA8CJ,kCAA9C;IAEA,OAAO,MAAK;MACR,IAAIb,UAAU,KAAK,IAAnB,EAAyB;QACrBT,MAAM,CAACI,aAAP,CAAqBK,UAArB;MACH;;MAEDT,MAAM,CAAC2B,mBAAP,CAA2B,kBAA3B,EAA+CjB,gCAA/C;MACAV,MAAM,CAAC2B,mBAAP,CAA2B,oBAA3B,EAAiDL,kCAAjD;IACH,CAPD;EAQH,CAnDoB,CADzB;AAqDH,CAtDM","names":["createUnhandledRejection","emitNotSupportedError","window","wrapSubscribeFunction","coolingOffPeriod","observer","clearInterval","undefined","setInterval","possiblyUnhandledRejections","Map","intervalId","deletePossiblyUnhandledRejection","promise","delete","emitUnhandledRejection","latestTimestampToEmit","Date","now","forEach","reason","timestamp","next","size","registerPossiblyUnhandledRejection","event","preventDefault","set","addEventListener","removeEventListener"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\subscribable-things\\src\\factories\\unhandled-rejection.ts"],"sourcesContent":["import { TUnhandledRejectionFactory } from '../types';\n\nexport const createUnhandledRejection: TUnhandledRejectionFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (coolingOffPeriod) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const possiblyUnhandledRejections = new Map<Promise<any>, { reason: any; timestamp: number }>();\n\n            let intervalId: null | number = null;\n\n            const deletePossiblyUnhandledRejection = ({ promise }: PromiseRejectionEvent) => possiblyUnhandledRejections.delete(promise);\n            const emitUnhandledRejection = () => {\n                const latestTimestampToEmit = Date.now() - coolingOffPeriod;\n\n                possiblyUnhandledRejections.forEach(({ reason, timestamp }, promise) => {\n                    if (timestamp > latestTimestampToEmit) {\n                        return;\n                    }\n\n                    possiblyUnhandledRejections.delete(promise);\n                    observer.next(reason);\n                });\n\n                if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n                    window.clearInterval(intervalId);\n                    intervalId = null;\n                }\n            };\n            const registerPossiblyUnhandledRejection = (event: PromiseRejectionEvent) => {\n                event.preventDefault();\n\n                possiblyUnhandledRejections.set(event.promise, {\n                    reason: event.reason,\n                    timestamp: Date.now()\n                });\n\n                if (intervalId === null) {\n                    intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n                }\n            };\n\n            window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n            window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n\n            return () => {\n                if (intervalId !== null) {\n                    window.clearInterval(intervalId);\n                }\n\n                window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n                window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n            };\n        });\n};\n"]},"metadata":{},"sourceType":"module"}