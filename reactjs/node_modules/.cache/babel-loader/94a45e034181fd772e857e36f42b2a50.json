{"ast":null,"code":"import { renderMethodNotFoundError, renderMissingResponseError, renderUnexpectedResultError } from './error-renderers';\nexport const createMessageHandler = (receiver, workerImplementation) => {\n  return async _ref => {\n    let {\n      data: {\n        id,\n        method,\n        params\n      }\n    } = _ref;\n    const messageHandler = workerImplementation[method];\n\n    try {\n      if (messageHandler === undefined) {\n        throw renderMethodNotFoundError({\n          method\n        });\n      }\n\n      const response = params === undefined ? messageHandler() : messageHandler(params);\n\n      if (response === undefined) {\n        throw renderMissingResponseError({\n          method\n        });\n      }\n\n      const synchronousResponse = response instanceof Promise ? await response : response;\n\n      if (id === null) {\n        if (synchronousResponse.result !== undefined) {\n          throw renderUnexpectedResultError({\n            method\n          });\n        }\n      } else {\n        if (synchronousResponse.result === undefined) {\n          throw renderUnexpectedResultError({\n            method\n          });\n        }\n\n        const {\n          result,\n          transferables = []\n        } = synchronousResponse;\n        receiver.postMessage({\n          id,\n          result\n        }, transferables);\n      }\n    } catch (err) {\n      const {\n        message,\n        status = -32603\n      } = err;\n      receiver.postMessage({\n        error: {\n          code: status,\n          message\n        },\n        id\n      });\n    }\n  };\n};","map":{"version":3,"mappings":"AAGA,SAASA,yBAAT,EAAoCC,0BAApC,EAAgEC,2BAAhE,QAAmG,mBAAnG;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAA8BC,QAA9B,EAAmDC,oBAAnD,KAAqG;EACrI,OAAO,cAA4D;IAAA,IAArD;MAAEC,IAAI,EAAE;QAAEC,EAAF;QAAMC,MAAN;QAAcC;MAAd;IAAR,CAAqD;IAC/D,MAAMC,cAAc,GAAGL,oBAAoB,CAACG,MAAD,CAA3C;;IAEA,IAAI;MACA,IAAIE,cAAc,KAAKC,SAAvB,EAAkC;QAC9B,MAAMX,yBAAyB,CAAC;UAAEQ;QAAF,CAAD,CAA/B;MACH;;MAED,MAAMI,QAAQ,GACVH,MAAM,KAAKE,SAAX,GACOD,cAA8E,EADrF,GAEOA,cAAuG,CAACD,MAAD,CAHlH;;MAKA,IAAIG,QAAQ,KAAKD,SAAjB,EAA4B;QACxB,MAAMV,0BAA0B,CAAC;UAAEO;QAAF,CAAD,CAAhC;MACH;;MAED,MAAMK,mBAAmB,GAAGD,QAAQ,YAAYE,OAApB,GAA8B,MAAMF,QAApC,GAA+CA,QAA3E;;MAEA,IAAIL,EAAE,KAAK,IAAX,EAAiB;QACb,IAAIM,mBAAmB,CAACE,MAApB,KAA+BJ,SAAnC,EAA8C;UAC1C,MAAMT,2BAA2B,CAAC;YAAEM;UAAF,CAAD,CAAjC;QACH;MACJ,CAJD,MAIO;QACH,IAAIK,mBAAmB,CAACE,MAApB,KAA+BJ,SAAnC,EAA8C;UAC1C,MAAMT,2BAA2B,CAAC;YAAEM;UAAF,CAAD,CAAjC;QACH;;QAED,MAAM;UAAEO,MAAF;UAAUC,aAAa,GAAG;QAA1B,IAAuDH,mBAA7D;QAEAT,QAAQ,CAACa,WAAT,CAAqB;UAAEV,EAAF;UAAMQ;QAAN,CAArB,EAAqCC,aAArC;MACH;IACJ,CA7BD,CA6BE,OAAOE,GAAP,EAAY;MACV,MAAM;QAAEC,OAAF;QAAWC,MAAM,GAAG,CAAC;MAArB,IAAgDF,GAAtD;MAEAd,QAAQ,CAACa,WAAT,CAA0D;QAAEI,KAAK,EAAE;UAAEC,IAAI,EAAEF,MAAR;UAAgBD;QAAhB,CAAT;QAAoCZ;MAApC,CAA1D;IACH;EACJ,CArCD;AAsCH,CAvCM","names":["renderMethodNotFoundError","renderMissingResponseError","renderUnexpectedResultError","createMessageHandler","receiver","workerImplementation","data","id","method","params","messageHandler","undefined","response","synchronousResponse","Promise","result","transferables","postMessage","err","message","status","error","code"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\worker-factory\\src\\helpers\\create-message-handler.ts"],"sourcesContent":["import { IAugmentedError } from 'compilerr';\nimport { IBrokerEvent, IErrorNotification, IErrorResponse, IReceiver, IRequest, IWorkerDefinition } from '../interfaces';\nimport { TMessageReceiverWithParams, TMessageReceiverWithoutParams, TWorkerImplementation } from '../types';\nimport { renderMethodNotFoundError, renderMissingResponseError, renderUnexpectedResultError } from './error-renderers';\n\nexport const createMessageHandler = <T extends IWorkerDefinition>(receiver: IReceiver, workerImplementation: TWorkerImplementation<T>) => {\n    return async ({ data: { id, method, params } }: IBrokerEvent<T>) => {\n        const messageHandler = workerImplementation[method];\n\n        try {\n            if (messageHandler === undefined) {\n                throw renderMethodNotFoundError({ method });\n            }\n\n            const response =\n                params === undefined\n                    ? (messageHandler as TMessageReceiverWithoutParams<T[typeof method]['response']>)()\n                    : (messageHandler as TMessageReceiverWithParams<T[typeof method]['params'], T[typeof method]['response']>)(params);\n\n            if (response === undefined) {\n                throw renderMissingResponseError({ method });\n            }\n\n            const synchronousResponse = response instanceof Promise ? await response : response;\n\n            if (id === null) {\n                if (synchronousResponse.result !== undefined) {\n                    throw renderUnexpectedResultError({ method });\n                }\n            } else {\n                if (synchronousResponse.result === undefined) {\n                    throw renderUnexpectedResultError({ method });\n                }\n\n                const { result, transferables = [] } = <IRequest['response']>synchronousResponse;\n\n                receiver.postMessage({ id, result }, transferables);\n            }\n        } catch (err) {\n            const { message, status = -32603 } = <IAugmentedError>err;\n\n            receiver.postMessage(<IErrorNotification | IErrorResponse>{ error: { code: status, message }, id });\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}