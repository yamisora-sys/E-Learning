{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n      return nativeBiquadFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\biquad-filter-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IBiquadFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TBiquadFilterNodeRendererFactoryFactory, TNativeBiquadFilterNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createBiquadFilterNodeRendererFactory: TBiquadFilterNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeBiquadFilterNodes = new WeakMap<TNativeOfflineAudioContext, TNativeBiquadFilterNode>();\n\n        const createBiquadFilterNode = async (proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode<T, TNativeBiquadFilterNode>(proxy);\n\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            return nativeBiquadFilterNode;\n        };\n\n        return {\n            render(proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeBiquadFilterNode> {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}