{"ast":null,"code":"import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {\n  return function (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam) {\n    let maxValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let minValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    const audioParam = {\n      get defaultValue() {\n        return nativeAudioParam.defaultValue;\n      },\n\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n\n      get value() {\n        return nativeAudioParam.value;\n      },\n\n      set value(value) {\n        nativeAudioParam.value = value; // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n\n      cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          const previousLastEvent = Array.from(automationEventList).pop();\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          const currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n\n        return audioParam;\n      },\n\n      cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n\n      exponentialRampToValueAtTime(value, endTime) {\n        // Bug #45: Safari does not throw an error yet.\n        if (value === 0) {\n          throw new RangeError();\n        } // Bug #187: Safari does not throw an error yet.\n\n\n        if (!Number.isFinite(endTime) || endTime < 0) {\n          throw new RangeError();\n        }\n\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      linearRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n\n      setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n\n      setValueCurveAtTime(values, startTime, duration) {\n        // Bug 183: Safari only accepts a Float32Array.\n        const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          const endTime = startTime + duration;\n          const sampleRate = audioNode.context.sampleRate;\n          const firstSample = Math.ceil(startTime * sampleRate);\n          const lastSample = Math.floor(endTime * sampleRate);\n          const numberOfInterpolatedValues = lastSample - firstSample;\n          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n            const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n          }\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          const timeOfLastSample = lastSample / sampleRate;\n\n          if (timeOfLastSample < endTime) {\n            setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n\n          setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n        }\n\n        return audioParam;\n      }\n\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};","map":{"version":3,"mappings":"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","names":["AutomationEventList","createAudioParamFactory","addAudioParamConnections","audioParamAudioNodeStore","audioParamStore","createAudioParamRenderer","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","nativeAudioContextConstructor","setValueAtTimeUntilPossible","audioNode","isAudioParamOfOfflineAudioContext","nativeAudioParam","maxValue","minValue","automationEventList","defaultValue","audioParamRenderer","audioParam","value","setValueAtTime","context","currentTime","cancelAndHoldAtTime","cancelTime","flush","add","previousLastEvent","Array","from","pop","currentLastEvent","cancelScheduledValues","undefined","type","exponentialRampToValueAtTime","endTime","linearRampToValueAtTime","startTime","setValueCurveAtTime","values","duration","RangeError","Number","isFinite","setTargetAtTime","target","timeConstant","convertedValues","Float32Array","name","sampleRate","firstSample","Math","ceil","lastSample","floor","numberOfInterpolatedValues","interpolatedValues","i","theoreticIndex","length","lowerIndex","upperIndex","timeOfLastSample","set"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\audio-param-factory.ts"],"sourcesContent":["import { AutomationEventList } from 'automation-events';\nimport { IAudioNode, IAudioParam, IAudioParamRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioParamFactoryFactory, TContext, TNativeAudioParam } from '../types';\n\nexport const createAudioParamFactory: TAudioParamFactoryFactory = (\n    addAudioParamConnections,\n    audioParamAudioNodeStore,\n    audioParamStore,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n) => {\n    return <T extends TContext>(\n        audioNode: IAudioNode<T>,\n        isAudioParamOfOfflineAudioContext: boolean,\n        nativeAudioParam: TNativeAudioParam,\n        maxValue: null | number = null,\n        minValue: null | number = null\n    ): IAudioParam => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue(): number {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue(): number {\n                return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue(): number {\n                return minValue === null ? nativeAudioParam.minValue : minValue;\n            },\n            get value(): number {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n\n                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime: number): IAudioParam {\n                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                } else {\n                    const previousLastEvent = Array.from(automationEventList).pop();\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n\n                    const currentLastEvent = Array.from(automationEventList).pop();\n\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        } else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(\n                                currentLastEvent.values,\n                                currentLastEvent.startTime,\n                                currentLastEvent.duration\n                            );\n                        }\n                    }\n                }\n\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                // Bug #45: Safari does not throw an error yet.\n                if (value === 0) {\n                    throw new RangeError();\n                }\n\n                // Bug #187: Safari does not throw an error yet.\n                if (!Number.isFinite(endTime) || endTime < 0) {\n                    throw new RangeError();\n                }\n\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            linearRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            setTargetAtTime(target: number, startTime: number, timeConstant: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n\n                return audioParam;\n            },\n            setValueAtTime(value: number, startTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n\n                return audioParam;\n            },\n            setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): IAudioParam {\n                // Bug 183: Safari only accepts a Float32Array.\n                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor(endTime * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((convertedValues.length - 1) / duration) * ((firstSample + i) / sampleRate - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n\n                        interpolatedValues[i] =\n                            lowerIndex === upperIndex\n                                ? convertedValues[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] +\n                                  (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n                    }\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n\n                    const timeOfLastSample = lastSample / sampleRate;\n\n                    if (timeOfLastSample < endTime) {\n                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n\n                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n                } else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n                }\n\n                return audioParam;\n            }\n        };\n\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n\n        addAudioParamConnections(\n            audioParam,\n            <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioParamRenderer : null>audioParamRenderer\n        );\n\n        return audioParam;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}