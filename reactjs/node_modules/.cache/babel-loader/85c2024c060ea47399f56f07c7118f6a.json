{"ast":null,"code":"/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source, url) => {\n  const importStatements = [];\n  let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n  while (result !== null) {\n    const unresolvedUrl = result[1].slice(1, -1);\n    const importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;AAYA,MAAMA,sBAAsB,GAAG,sPAA/B,C,CAAuR;;AAEvR,OAAO,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAAiBC,GAAjB,KAAkD;EACnF,MAAMC,gBAAgB,GAAG,EAAzB;EAEA,IAAIC,6BAA6B,GAAGH,MAAM,CAACI,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAApC;EACA,IAAIC,MAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAb;;EAEA,OAAOO,MAAM,KAAK,IAAlB,EAAwB;IACpB,MAAME,aAAa,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAtB;IAEA,MAAMC,8BAA8B,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAClCD,OADkC,CAC1B,aAD0B,EACX,EADW,EAElCA,OAFkC,CAE1BG,aAF0B,EAEX,IAAIG,GAAJ,CAAQH,aAAR,EAAuBN,GAAvB,EAA4BU,QAA5B,EAFW,CAAvC;IAGAT,gBAAgB,CAACU,IAAjB,CAAsBH,8BAAtB;IAEAN,6BAA6B,GAAGA,6BAA6B,CAACK,KAA9B,CAAoCH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAA9C,EAAsDT,OAAtD,CAA8D,QAA9D,EAAwE,EAAxE,CAAhC;IACAC,MAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAT;EACH;;EAED,OAAO,CAACI,gBAAgB,CAACY,IAAjB,CAAsB,GAAtB,CAAD,EAA6BX,6BAA7B,CAAP;AACH,CAnBM","names":["IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","slice","importStatementWithResolvedUrl","URL","toString","push","length","join"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\split-import-statements.ts"],"sourcesContent":["/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source: string, url: string): [string, string] => {\n    const importStatements = [];\n\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n\n        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n"]},"metadata":{},"sourceType":"module"}