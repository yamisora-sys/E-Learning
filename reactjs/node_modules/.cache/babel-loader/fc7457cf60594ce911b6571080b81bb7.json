{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = mergedOptions.buffer !== null;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null; // Bug #73: Safari does not export the correct values for maxValue and minValue.\n\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n\n    set buffer(value) {\n      this._nativeAudioBufferSourceNode.buffer = value; // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n\n        this._isBufferSet = true;\n      }\n    }\n\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get playbackRate() {\n      return this._playbackRate;\n    }\n\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      }\n\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this._nativeAudioBufferSourceNode.stop(when);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AAWA,MAAMC,eAAe,GAAG;EACpBC,MAAM,EAAE,IADY;EAEpBC,YAAY,EAAE,CAFM;EAGpBC,gBAAgB,EAAE,KAHE;EAIpBC,qBAAqB,EAAE,UAJH;EAKpB;EACAC,IAAI,EAAE,KANc;EAOpBC,OAAO,EAAE,CAPW;EAQpBC,SAAS,EAAE,CARS;EASpBC,YAAY,EAAE;AATM,CAAxB;AAYA,OAAO,MAAMC,sCAAsC,GAA6C,CAC5FC,oBAD4F,EAE5FC,mCAF4F,EAG5FC,gBAH4F,EAI5FC,uBAJ4F,EAK5FC,iCAL4F,EAM5FC,gBAN4F,EAO5FC,2BAP4F,EAQ5FC,iBAR4F,KAS5F;EACA,OAAO,MAAMC,qBAAN,SACKR,oBADL,CAC+D;IAelES,YAAYC,OAAZ,EAAwBC,OAAxB,EAAoE;MAChE,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGvB,eAAL;QAAsB,GAAGqB;MAAzB,CAAtB;MACA,MAAMG,2BAA2B,GAAGV,iCAAiC,CAACQ,aAAD,EAAgBC,aAAhB,CAArE;MACA,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAMI,6BAA6B,GAC9BD,SAAS,GAAGd,mCAAmC,EAAtC,GAA2C,IADzD;MAIA,MAAMS,OAAN,EAAe,KAAf,EAAsBI,2BAAtB,EAAmDE,6BAAnD;MAEA,KAAKC,8BAAL,GAAsCD,6BAAtC;MACA,KAAKE,kBAAL,GAA0B,KAA1B;MACA,KAAKC,YAAL,GAAoBN,aAAa,CAACtB,MAAd,KAAyB,IAA7C;MACA,KAAK6B,4BAAL,GAAoCN,2BAApC;MACA,KAAKO,QAAL,GAAgB,IAAhB,CAfgE,CAgBhE;;MACA,KAAKC,aAAL,GAAqBpB,gBAAgB,CACjC,IADiC,EAEjCa,SAFiC,EAGjCD,2BAA2B,CAAChB,YAHK,EAIjCZ,0BAJiC,EAKjCD,0BALiC,CAArC;IAOH;;IAES,IAANM,MAAM;MACN,IAAI,KAAK2B,kBAAT,EAA6B;QACzB,OAAO,IAAP;MACH;;MAED,OAAO,KAAKE,4BAAL,CAAkC7B,MAAzC;IACH;;IAES,IAANA,MAAM,CAACgC,KAAD,EAAM;MACZ,KAAKH,4BAAL,CAAkC7B,MAAlC,GAA2CgC,KAA3C,CADY,CAGZ;;MACA,IAAIA,KAAK,KAAK,IAAd,EAAoB;QAChB,IAAI,KAAKJ,YAAT,EAAuB;UACnB,MAAMhB,uBAAuB,EAA7B;QACH;;QAED,KAAKgB,YAAL,GAAoB,IAApB;MACH;IACJ;;IAEO,IAAJxB,IAAI;MACJ,OAAO,KAAKyB,4BAAL,CAAkCzB,IAAzC;IACH;;IAEO,IAAJA,IAAI,CAAC4B,KAAD,EAAM;MACV,KAAKH,4BAAL,CAAkCzB,IAAlC,GAAyC4B,KAAzC;IACH;;IAEU,IAAP3B,OAAO;MACP,OAAO,KAAKwB,4BAAL,CAAkCxB,OAAzC;IACH;;IAEU,IAAPA,OAAO,CAAC2B,KAAD,EAAM;MACb,KAAKH,4BAAL,CAAkCxB,OAAlC,GAA4C2B,KAA5C;IACH;;IAEY,IAAT1B,SAAS;MACT,OAAO,KAAKuB,4BAAL,CAAkCvB,SAAzC;IACH;;IAEY,IAATA,SAAS,CAAC0B,KAAD,EAAM;MACf,KAAKH,4BAAL,CAAkCvB,SAAlC,GAA8C0B,KAA9C;IACH;;IAEU,IAAPC,OAAO;MACP,OAAO,KAAKH,QAAZ;IACH;;IAEU,IAAPG,OAAO,CAACD,KAAD,EAAM;MACb,MAAME,eAAe,GAAG,OAAOF,KAAP,KAAiB,UAAjB,GAA8BhB,iBAAiB,CAAC,IAAD,EAAOgB,KAAP,CAA/C,GAA+D,IAAvF;MAEA,KAAKH,4BAAL,CAAkCI,OAAlC,GAA4CC,eAA5C;MAEA,MAAMC,aAAa,GAAG,KAAKN,4BAAL,CAAkCI,OAAxD;MAEA,KAAKH,QAAL,GAAgBK,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAKD,eAA5C,GAA8DF,KAA9D,GAAsEG,aAAtF;IACH;;IAEe,IAAZ5B,YAAY;MACZ,OAAO,KAAKwB,aAAZ;IACH;;IAEMK,KAAK,GAAwC;MAAA,IAAvCC,IAAuC,uEAAhC,CAAgC;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;MAAA,IAAjBC,QAAiB;;MAChD,KAAKV,4BAAL,CAAkCO,KAAlC,CAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,QAAtD;;MAEA,IAAI,KAAKb,8BAAL,KAAwC,IAA5C,EAAkD;QAC9C,KAAKA,8BAAL,CAAoCU,KAApC,GAA4CG,QAAQ,KAAKC,SAAb,GAAyB,CAACH,IAAD,EAAOC,MAAP,CAAzB,GAA0C,CAACD,IAAD,EAAOC,MAAP,EAAeC,QAAf,CAAtF;MACH;;MAED,IAAI,KAAKpB,OAAL,CAAasB,KAAb,KAAuB,QAA3B,EAAqC;QACjC5C,wBAAwB,CAAC,IAAD,CAAxB;;QAEA,MAAM6C,2BAA2B,GAAG,MAAK;UACrC,KAAKb,4BAAL,CAAkCc,mBAAlC,CAAsD,OAAtD,EAA+DD,2BAA/D;;UAEA,IAAI9C,iBAAiB,CAAC,IAAD,CAArB,EAA6B;YACzBE,yBAAyB,CAAC,IAAD,CAAzB;UACH;QACJ,CAND;;QAQA,KAAK+B,4BAAL,CAAkCe,gBAAlC,CAAmD,OAAnD,EAA4DF,2BAA5D;MACH;IACJ;;IAEMG,IAAI,GAAS;MAAA,IAARR,IAAQ,uEAAD,CAAC;;MAChB,KAAKR,4BAAL,CAAkCgB,IAAlC,CAAuCR,IAAvC;;MAEA,IAAI,KAAKX,8BAAL,KAAwC,IAA5C,EAAkD;QAC9C,KAAKA,8BAAL,CAAoCmB,IAApC,GAA2CR,IAA3C;MACH;IACJ;;EApIiE,CADtE;AAuIH,CAjJM","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","createNativeAudioBufferSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","AudioBufferSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","value","onended","wrappedListener","nativeOnEnded","start","when","offset","duration","undefined","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\audio-buffer-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioBufferSourceNode, IAudioBufferSourceOptions, IAudioParam, IAudioScheduledSourceNodeEventMap } from '../interfaces';\nimport {\n    TAnyAudioBuffer,\n    TAudioBufferSourceNodeConstructorFactory,\n    TAudioBufferSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeAudioBufferSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n} as const;\n\nexport const createAudioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class AudioBufferSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IAudioBufferSourceNode<T>\n    {\n        private _audioBufferSourceNodeRenderer: TAudioBufferSourceNodeRenderer<T>;\n\n        private _isBufferNullified: boolean;\n\n        private _isBufferSet: boolean;\n\n        private _nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _playbackRate: IAudioParam;\n\n        constructor(context: T, options?: Partial<IAudioBufferSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = <TAudioBufferSourceNodeRenderer<T>>(\n                (isOffline ? createAudioBufferSourceNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = mergedOptions.buffer !== null;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Safari does not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(\n                this,\n                isOffline,\n                nativeAudioBufferSourceNode.playbackRate,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n        }\n\n        get buffer(): null | TAnyAudioBuffer {\n            if (this._isBufferNullified) {\n                return null;\n            }\n\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n\n        set buffer(value) {\n            this._nativeAudioBufferSourceNode.buffer = value;\n\n            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n\n                this._isBufferSet = true;\n            }\n        }\n\n        get loop(): boolean {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n\n        get loopEnd(): number {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n\n        get loopStart(): number {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get playbackRate(): IAudioParam {\n            return this._playbackRate;\n        }\n\n        public start(when = 0, offset = 0, duration?: number): void {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeAudioBufferSourceNode.stop(when);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}