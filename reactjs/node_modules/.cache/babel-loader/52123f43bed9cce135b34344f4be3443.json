{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n  return (nativeContext, _ref) => {\n    let {\n      coneInnerAngle,\n      coneOuterAngle,\n      coneOuterGain,\n      distanceModel,\n      maxDistance,\n      orientationX,\n      orientationY,\n      orientationZ,\n      panningModel,\n      positionX,\n      positionY,\n      positionZ,\n      refDistance,\n      rolloffFactor,\n      ...audioNodeOptions\n    } = _ref;\n    const pannerNode = nativeContext.createPanner(); // Bug #125: Safari does not throw an error yet.\n\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #126: Safari does not throw an error yet.\n\n\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n    const buffer = new Float32Array(1); // tslint:disable-next-line:deprecation\n\n    scriptProcessorNode.onaudioprocess = _ref2 => {\n      let {\n        inputBuffer\n      } = _ref2;\n      const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2)];\n\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n        lastOrientation = orientation;\n      }\n\n      const positon = [getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n        lastPosition = positon;\n      }\n    };\n\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n\n      set coneOuterGain(value) {\n        // Bug #127: Safari does not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n\n        pannerNode.coneOuterGain = value;\n      },\n\n      get context() {\n        return pannerNode.context;\n      },\n\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n\n      set maxDistance(value) {\n        // Bug #128: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.maxDistance = value;\n      },\n\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n\n      set panningModel(value) {\n        pannerNode.panningModel = value;\n      },\n\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n\n      set refDistance(value) {\n        // Bug #129: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.refDistance = value;\n      },\n\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n\n      set rolloffFactor(value) {\n        // Bug #130: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.rolloffFactor = value;\n      },\n\n      addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n\n      dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n\n      removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n\n    };\n\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["assignNativeAudioNodeOptions","interceptConnections","createNativePannerNodeFakerFactory","connectNativeAudioNodeToNativeAudioNode","createInvalidStateError","createNativeChannelMergerNode","createNativeGainNode","createNativeScriptProcessorNode","createNativeWaveShaperNode","createNotSupportedError","disconnectNativeAudioNodeFromNativeAudioNode","getFirstSample","monitorConnections","nativeContext","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","audioNodeOptions","pannerNode","createPanner","channelCount","channelCountMode","SINGLE_CHANNEL_OPTIONS","channelInterpretation","channelMergerNode","numberOfInputs","inputGainNode","gain","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","scriptProcessorNode","waveShaperNode","curve","Float32Array","oversample","lastOrientation","lastPosition","buffer","onaudioprocess","inputBuffer","orientation","some","value","index","setOrientation","positon","setPosition","Object","defineProperty","get","nativePannerNodeFaker","bufferSize","undefined","context","inputs","RangeError","numberOfOutputs","addEventListener","dispatchEvent","removeEventListener","whenConnected","connect","destination","whenDisconnected","disconnect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\native-panner-node-faker-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativePannerNode, TNativePannerNodeFakerFactoryFactory } from '../types';\n\nexport const createNativePannerNodeFakerFactory: TNativePannerNodeFakerFactoryFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n) => {\n    return (\n        nativeContext,\n        {\n            coneInnerAngle,\n            coneOuterAngle,\n            coneOuterGain,\n            distanceModel,\n            maxDistance,\n            orientationX,\n            orientationY,\n            orientationZ,\n            panningModel,\n            positionX,\n            positionY,\n            positionZ,\n            refDistance,\n            rolloffFactor,\n            ...audioNodeOptions\n        }\n    ) => {\n        const pannerNode = nativeContext.createPanner();\n\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        } as const;\n\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            curve: new Float32Array([1, 1]),\n            oversample: 'none'\n        });\n\n        let lastOrientation: [number, number, number] = [orientationX, orientationY, orientationZ];\n        let lastPosition: [number, number, number] = [positionX, positionY, positionZ];\n\n        const buffer = new Float32Array(1);\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 0),\n                getFirstSample(inputBuffer, buffer, 1),\n                getFirstSample(inputBuffer, buffer, 2)\n            ];\n\n            if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                lastOrientation = orientation;\n            }\n\n            const positon: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 3),\n                getFirstSample(inputBuffer, buffer, 4),\n                getFirstSample(inputBuffer, buffer, 5)\n            ];\n\n            if (positon.some((value, index) => value !== lastPosition[index])) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n                lastPosition = positon;\n            }\n        };\n\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n\n        const nativePannerNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode(): TNativePannerNode['channelCountMode'] {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativePannerNode['channelInterpretation'] {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle(): TNativePannerNode['coneInnerAngle'] {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle(): TNativePannerNode['coneOuterAngle'] {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain(): TNativePannerNode['coneOuterGain'] {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Safari does not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n\n                pannerNode.coneOuterGain = value;\n            },\n            get context(): TNativePannerNode['context'] {\n                return pannerNode.context;\n            },\n            get distanceModel(): TNativePannerNode['distanceModel'] {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get maxDistance(): TNativePannerNode['maxDistance'] {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs(): number {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX(): TNativePannerNode['orientationX'] {\n                return orientationXGainNode.gain;\n            },\n            get orientationY(): TNativePannerNode['orientationY'] {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ(): TNativePannerNode['orientationZ'] {\n                return orientationZGainNode.gain;\n            },\n            get panningModel(): TNativePannerNode['panningModel'] {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n            },\n            get positionX(): TNativePannerNode['positionX'] {\n                return positionXGainNode.gain;\n            },\n            get positionY(): TNativePannerNode['positionY'] {\n                return positionYGainNode.gain;\n            },\n            get positionZ(): TNativePannerNode['positionZ'] {\n                return positionZGainNode.gain;\n            },\n            get refDistance(): TNativePannerNode['refDistance'] {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor(): TNativePannerNode['rolloffFactor'] {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n\n            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}