{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeOscillatorNode = nativeContext.createOscillator();\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    } // Bug #44: Only Chrome & Edge throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,oCAAT,QAAqD,uDAArD;AACA,SAASC,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,SAASC,yDAAT,QAA0E,8EAA1E;AACA,SAASC,wDAAT,QAAyE,6EAAzE;AAGA,OAAO,MAAMC,iCAAiC,GAAwC,CAClFC,mBADkF,EAElFC,eAFkF,EAGlFC,gEAHkF,EAIlFC,6DAJkF,EAKlFC,+DALkF,EAMlFC,sDANkF,KAOlF;EACA,OAAO,CAACC,aAAD,EAAgBC,OAAhB,KAA2B;IAC9B,MAAMC,oBAAoB,GAAGF,aAAa,CAACG,gBAAd,EAA7B;IAEAb,4BAA4B,CAACY,oBAAD,EAAuBD,OAAvB,CAA5B;IAEAb,oCAAoC,CAACc,oBAAD,EAAuBD,OAAvB,EAAgC,QAAhC,CAApC;IACAb,oCAAoC,CAACc,oBAAD,EAAuBD,OAAvB,EAAgC,WAAhC,CAApC;;IAEA,IAAIA,OAAO,CAACG,YAAR,KAAyBC,SAA7B,EAAwC;MACpCH,oBAAoB,CAACI,eAArB,CAAqCL,OAAO,CAACG,YAA7C;IACH,CAFD,MAEO;MACHf,2BAA2B,CAACa,oBAAD,EAAuBD,OAAvB,EAAgC,MAAhC,CAA3B;IACH,CAZ6B,CAc9B;;;IACA,IACI,CAACN,eAAe,CAACC,gEAAD,EAAmE,MAC/EA,gEAAgE,CAACI,aAAD,CADpD,CADpB,EAIE;MACET,yDAAyD,CAACW,oBAAD,CAAzD;IACH,CArB6B,CAuB9B;;;IACA,IACI,CAACP,eAAe,CAACE,6DAAD,EAAgE,MAC5EA,6DAA6D,CAACG,aAAD,CADjD,CADpB,EAIE;MACED,sDAAsD,CAACG,oBAAD,EAAuBF,aAAvB,CAAtD;IACH,CA9B6B,CAgC9B;;;IACA,IACI,CAACL,eAAe,CAACG,+DAAD,EAAkE,MAC9EA,+DAA+D,CAACE,aAAD,CADnD,CADpB,EAIE;MACER,wDAAwD,CAACU,oBAAD,CAAxD;IACH,CAvC6B,CAyC9B;;;IACAR,mBAAmB,CAACM,aAAD,EAAgBE,oBAAhB,CAAnB;IAEA,OAAOA,oBAAP;EACH,CA7CD;AA8CH,CAtDM","names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeOscillatorNodeFactory","addSilentConnection","cacheTestResult","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeOscillatorNode","createOscillator","periodicWave","undefined","setPeriodicWave"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\native-oscillator-node-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nimport { TNativeOscillatorNodeFactoryFactory } from '../types';\n\nexport const createNativeOscillatorNodeFactory: TNativeOscillatorNodeFactoryFactory = (\n    addSilentConnection,\n    cacheTestResult,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = nativeContext.createOscillator();\n\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        } else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n\n        // Bug #44: Only Chrome & Edge throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () =>\n                testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n\n        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n        addSilentConnection(nativeContext, nativeOscillatorNode);\n\n        return nativeOscillatorNode;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}