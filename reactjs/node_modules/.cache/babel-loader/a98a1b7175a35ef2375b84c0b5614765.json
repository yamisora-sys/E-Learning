{"ast":null,"code":"import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,iCAAnC;AAIA,OAAO,MAAMC,qCAAqC,GAA4C,CAC1FC,eAD0F,EAE1FC,oBAF0F,EAG1FC,+BAH0F,EAI1FC,yCAJ0F,KAK1F;EACA,OAAQC,yBAAD,IAA8B;IACjC;IACA,IAAIJ,eAAe,CAACF,kBAAD,EAAqB,MAAMA,kBAAkB,CAACM,yBAAD,CAA7C,CAAnB,EAA8F;MAC1F;MACA,OAAOC,OAAO,CAACC,OAAR,CACHN,eAAe,CAACG,yCAAD,EAA4CA,yCAA5C,CADZ,EAELI,IAFK,CAECC,yCAAD,IAA8C;QACjD,IAAI,CAACA,yCAAL,EAAgD;UAC5C,MAAMC,mBAAmB,GAAGP,+BAA+B,CAACE,yBAAD,EAA4B,GAA5B,EAAiC,CAAjC,EAAoC,CAApC,CAA3D;;UAEAA,yBAAyB,CAACM,UAA1B,GAAuC,MAAK;YACxCD,mBAAmB,CAACE,cAApB,GAAqC,IAArC,CADwC,CACG;;YAC3CF,mBAAmB,CAACG,UAApB;UACH,CAHD;;UAIAH,mBAAmB,CAACE,cAApB,GAAqC,MAAMP,yBAAyB,CAACS,WAArE,CAP4C,CAOsC;;;UAElFJ,mBAAmB,CAACK,OAApB,CAA4BV,yBAAyB,CAACW,WAAtD;QACH;;QAED,OAAOX,yBAAyB,CAACY,cAA1B,EAAP;MACH,CAhBM,CAAP;IAiBH;;IAED,OAAO,IAAIX,OAAJ,CAAiCC,OAAD,IAAY;MAC/C;MACA,MAAMW,QAAQ,GAAGhB,oBAAoB,CAACG,yBAAD,EAA4B;QAC7Dc,YAAY,EAAE,CAD+C;QAE7DC,gBAAgB,EAAE,UAF2C;QAG7DC,qBAAqB,EAAE,UAHsC;QAI7DC,IAAI,EAAE;MAJuD,CAA5B,CAArC;;MAOAjB,yBAAyB,CAACM,UAA1B,GAAwCY,KAAD,IAAwC;QAC3EL,QAAQ,CAACL,UAAT;QAEAN,OAAO,CAACgB,KAAK,CAACC,cAAP,CAAP;MACH,CAJD;;MAMAN,QAAQ,CAACH,OAAT,CAAiBV,yBAAyB,CAACW,WAA3C;MAEAX,yBAAyB,CAACY,cAA1B;IACH,CAlBM,CAAP;EAmBH,CA1CD;AA2CH,CAjDM","names":["testPromiseSupport","createRenderNativeOfflineAudioContext","cacheTestResult","createNativeGainNode","createNativeScriptProcessorNode","testOfflineAudioContextCurrentTimeSupport","nativeOfflineAudioContext","Promise","resolve","then","isOfflineAudioContextCurrentTimeSupported","scriptProcessorNode","oncomplete","onaudioprocess","disconnect","currentTime","connect","destination","startRendering","gainNode","channelCount","channelCountMode","channelInterpretation","gain","event","renderedBuffer"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\render-native-offline-audio-context.ts"],"sourcesContent":["import { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IOfflineAudioCompletionEvent } from '../interfaces';\nimport { TNativeAudioBuffer, TRenderNativeOfflineAudioContextFactory } from '../types';\n\nexport const createRenderNativeOfflineAudioContext: TRenderNativeOfflineAudioContextFactory = (\n    cacheTestResult,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    testOfflineAudioContextCurrentTimeSupport\n) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n            return Promise.resolve(\n                cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)\n            ).then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n\n        return new Promise<TNativeAudioBuffer>((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n\n            nativeOfflineAudioContext.oncomplete = (event: IOfflineAudioCompletionEvent) => {\n                gainNode.disconnect();\n\n                resolve(event.renderedBuffer);\n            };\n\n            gainNode.connect(nativeOfflineAudioContext.destination);\n\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}