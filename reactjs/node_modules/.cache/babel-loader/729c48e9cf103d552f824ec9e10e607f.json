{"ast":null,"code":"export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return function (destination, channelNumberAsNumber) {\n        let bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return function (source, channelNumberAsNumber) {\n        let bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,kDAAkD,GAC3DC,2BADoH,IAEpH;EACA,OAAQC,WAAD,IAA0C;IAC7CA,WAAW,CAACC,eAAZ,GAA8B,CAAEA,eAAD,IAAoB;MAC/C,OAAO,UAACC,WAAD,EAA4BC,qBAA5B,EAAuF;QAAA,IAA5BC,oBAA4B,uEAAL,CAAK;QAC1F,MAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAD,CAAhD;QACA,MAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAD,CAAjD;;QAEA,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAA/B,EAAuC;UACnC,OAAON,eAAe,CAACO,IAAhB,CAAqBR,WAArB,EAAkCE,WAAlC,EAA+CI,aAA/C,EAA8DD,YAA9D,CAAP;QACH;MACJ,CAPD;IAQH,CAT6B,EAS3BL,WAAW,CAACC,eATe,CAA9B;;IAWAD,WAAW,CAACS,aAAZ,GAA4B,CAAEA,aAAD,IAAkB;MAC3C,OAAO,UAACC,MAAD,EAAuBP,qBAAvB,EAAkF;QAAA,IAA5BC,oBAA4B,uEAAL,CAAK;QACrF,MAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAD,CAAhD;QACA,MAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAD,CAAjD;;QAEA,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAA/B,EAAuC;UACnC,OAAOE,aAAa,CAACD,IAAd,CAAmBR,WAAnB,EAAgCU,MAAhC,EAAwCJ,aAAxC,EAAuDD,YAAvD,CAAP;QACH;MACJ,CAPD;IAQH,CAT2B,EASzBL,WAAW,CAACS,aATa,CAA5B;EAUH,CAtBD;AAuBH,CA1BM","names":["createWrapAudioBufferCopyChannelMethodsOutOfBounds","convertNumberToUnsignedLong","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","length","call","copyToChannel","source"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\wrap-audio-buffer-copy-channel-methods-out-of-bounds.ts"],"sourcesContent":["import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = (\n    convertNumberToUnsignedLong\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}