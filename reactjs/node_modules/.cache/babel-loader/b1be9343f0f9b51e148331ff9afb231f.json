{"ast":null,"code":"export const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, _ref) => {\n  let {\n    mediaStream\n  } = _ref;\n  const audioStreamTracks = mediaStream.getAudioTracks();\n  /*\n   * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n   * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n   */\n\n  audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);\n  const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n  const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n  /*\n   * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n   * to be overwritten as it would otherwise expose the reconstructed version.\n   */\n\n  Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n    value: mediaStream\n  });\n  return nativeMediaStreamAudioSourceNode;\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,sCAAsC,GAA6C,CAACC,kBAAD,WAAwC;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACpI,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,cAAZ,EAA1B;EACA;;;;;EAIAD,iBAAiB,CAACE,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAT,GAAc,CAAC,CAAf,GAAmBF,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAT,GAAc,CAAd,GAAkB,CAAvE;EAEA,MAAMC,yBAAyB,GAAGN,iBAAiB,CAACO,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAlC;EAEA,MAAMC,gCAAgC,GAAGV,kBAAkB,CAACW,uBAAnB,CAA2C,IAAIC,WAAJ,CAAgBJ,yBAAhB,CAA3C,CAAzC;EAEA;;;;;EAIAK,MAAM,CAACC,cAAP,CAAsBJ,gCAAtB,EAAwD,aAAxD,EAAuE;IAAEK,KAAK,EAAEd;EAAT,CAAvE;EAEA,OAAOS,gCAAP;AACH,CAnBM","names":["createNativeMediaStreamAudioSourceNode","nativeAudioContext","mediaStream","audioStreamTracks","getAudioTracks","sort","a","b","id","filteredAudioStreamTracks","slice","nativeMediaStreamAudioSourceNode","createMediaStreamSource","MediaStream","Object","defineProperty","value"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\native-media-stream-audio-source-node.ts"],"sourcesContent":["import { TNativeMediaStreamAudioSourceNodeFactory } from '../types';\n\nexport const createNativeMediaStreamAudioSourceNode: TNativeMediaStreamAudioSourceNodeFactory = (nativeAudioContext, { mediaStream }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    /*\n     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n     */\n    audioStreamTracks.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));\n\n    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n\n    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n\n    /*\n     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n     * to be overwritten as it would otherwise expose the reconstructed version.\n     */\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n\n    return nativeMediaStreamAudioSourceNode;\n};\n"]},"metadata":{},"sourceType":"module"}