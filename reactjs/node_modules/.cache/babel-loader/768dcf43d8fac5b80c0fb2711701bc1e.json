{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IOscillatorNode, IPeriodicWave } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeOscillatorNode, TOscillatorNodeRendererFactoryFactory } from '../types';\n\nexport const createOscillatorNodeRendererFactory: TOscillatorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeOscillatorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeOscillatorNode>();\n\n        let periodicWave: null | IPeriodicWave = null;\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createOscillatorNode = async (proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode<T, TNativeOscillatorNode>(proxy);\n\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n            return nativeOscillatorNode;\n        };\n\n        return {\n            set periodicWave(value: null | IPeriodicWave) {\n                periodicWave = value;\n            },\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeOscillatorNode> {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}