{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class GainNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      super(context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AAIA,MAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,IAAI,EAAE;AAJc,CAAxB;AAOA,OAAO,MAAMC,yBAAyB,GAAgC,CAClEC,oBADkE,EAElEC,gBAFkE,EAGlEC,sBAHkE,EAIlEC,oBAJkE,EAKlEC,gBALkE,EAMlEC,2BANkE,KAOlE;EACA,OAAO,MAAMC,QAAN,SAA2CN,oBAA3C,CAAkE;IAGrEO,YAAYC,OAAZ,EAAwBC,OAAxB,EAAuD;MACnD,MAAMC,aAAa,GAAGN,gBAAgB,CAACI,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGjB,eAAL;QAAsB,GAAGe;MAAzB,CAAtB;MACA,MAAMG,cAAc,GAAGT,oBAAoB,CAACO,aAAD,EAAgBC,aAAhB,CAA3C;MACA,MAAME,SAAS,GAAGR,2BAA2B,CAACK,aAAD,CAA7C;MACA,MAAMI,gBAAgB,GAAiCD,SAAS,GAAGX,sBAAsB,EAAzB,GAA8B,IAA9F;MAEA,MAAMM,OAAN,EAAe,KAAf,EAAsBI,cAAtB,EAAsCE,gBAAtC,EAPmD,CASnD;;MACA,KAAKC,KAAL,GAAad,gBAAgB,CAAC,IAAD,EAAOY,SAAP,EAAkBD,cAAc,CAACd,IAAjC,EAAuCL,0BAAvC,EAAmED,0BAAnE,CAA7B;IACH;;IAEO,IAAJM,IAAI;MACJ,OAAO,KAAKiB,KAAZ;IACH;;EAlBoE,CAAzE;AAoBH,CA5BM","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","gain","createGainNodeConstructor","audioNodeConstructor","createAudioParam","createGainNodeRenderer","createNativeGainNode","getNativeContext","isNativeOfflineAudioContext","GainNode","constructor","context","options","nativeContext","mergedOptions","nativeGainNode","isOffline","gainNodeRenderer","_gain"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IGainNode, IGainOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TGainNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n} as const;\n\nexport const createGainNodeConstructor: TGainNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class GainNode<T extends TContext> extends audioNodeConstructor<T> implements IGainNode<T> {\n        private _gain: IAudioParam;\n\n        constructor(context: T, options?: Partial<IGainOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createGainNodeRenderer() : null);\n\n            super(context, false, nativeGainNode, gainNodeRenderer);\n\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}