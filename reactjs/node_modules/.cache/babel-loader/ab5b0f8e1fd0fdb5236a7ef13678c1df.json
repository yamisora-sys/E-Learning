{"ast":null,"code":"export const createGetAudioParamRenderer = getAudioParamConnections => {\n  return audioParam => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n\n    if (audioParamConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n\n    return audioParamConnections.renderer;\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,2BAA2B,GAAmCC,wBAAD,IAA6B;EACnG,OAAQC,UAAD,IAAe;IAClB,MAAMC,qBAAqB,GAAGF,wBAAwB,CAA8BC,UAA9B,CAAtD;;IAEA,IAAIC,qBAAqB,CAACC,QAAtB,KAAmC,IAAvC,EAA6C;MACzC,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;IACH;;IAED,OAAOF,qBAAqB,CAACC,QAA7B;EACH,CARD;AASH,CAVM","names":["createGetAudioParamRenderer","getAudioParamConnections","audioParam","audioParamConnections","renderer","Error"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\get-audio-param-renderer.ts"],"sourcesContent":["import { IMinimalOfflineAudioContext } from '../interfaces';\nimport { TGetAudioParamRendererFactory } from '../types';\n\nexport const createGetAudioParamRenderer: TGetAudioParamRendererFactory = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections<IMinimalOfflineAudioContext>(audioParam);\n\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n\n        return audioParamConnections.renderer;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}