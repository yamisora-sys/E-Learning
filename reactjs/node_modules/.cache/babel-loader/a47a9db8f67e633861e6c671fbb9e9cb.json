{"ast":null,"code":"export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {\n  try {\n    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n  } catch {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,mDAAmD,GAAIC,iBAAD,IAAmD;EAClH,IAAI;IACAA,iBAAiB,CAACC,aAAlB,CAAgC,IAAIC,YAAJ,CAAiB,CAAjB,CAAhC,EAAqD,CAArD,EAAwD,CAAC,CAAzD;EACH,CAFD,CAEE,MAAM;IACJ,OAAO,KAAP;EACH;;EAED,OAAO,IAAP;AACH,CARM","names":["testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","copyToChannel","Float32Array"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\test-audio-buffer-copy-channel-methods-out-of-bounds-support.ts"],"sourcesContent":["import { TNativeAudioBuffer } from '../types';\n\nexport const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer: TNativeAudioBuffer): boolean => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}