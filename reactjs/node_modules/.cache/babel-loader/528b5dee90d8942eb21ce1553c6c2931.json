{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Safari does not export the correct values for maxValue and minValue.\n\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)); // Bug #77: Firefox & Safari do not export the correct value for minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n    get Q() {\n      return this._Q;\n    }\n\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      // Bug #189: Safari does throw an InvalidStateError.\n      try {\n        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      } catch (err) {\n        if (err.code === 11) {\n          throw createInvalidAccessError();\n        }\n\n        throw err;\n      } // Bug #68: Safari does not throw an error if the parameters differ in their length.\n\n\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","BiquadFilterNode","constructor","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","err","code","length"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\biquad-filter-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IBiquadFilterNode, IBiquadFilterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TBiquadFilterNodeConstructorFactory, TBiquadFilterType, TContext, TNativeBiquadFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n} as const;\n\nexport const createBiquadFilterNodeConstructor: TBiquadFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class BiquadFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IBiquadFilterNode<T> {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _gain: IAudioParam;\n\n        private _nativeBiquadFilterNode: TNativeBiquadFilterNode;\n\n        private _Q: IAudioParam;\n\n        constructor(context: T, options?: Partial<IBiquadFilterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createBiquadFilterNodeRenderer() : null);\n\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.detune,\n                1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT),\n                -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)\n            );\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.gain,\n                40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT),\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n\n        get Q(): IAudioParam {\n            return this._Q;\n        }\n\n        get type(): TBiquadFilterType {\n            return this._nativeBiquadFilterNode.type;\n        }\n\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            } catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n\n                throw err;\n            }\n\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}