{"ast":null,"code":"import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  const feedbackLength = convertedFeedback.length;\n  const feedforwardLength = convertedFeedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (convertedFeedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      convertedFeedback[i] /= convertedFeedback[0];\n    }\n  }\n\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioBufferSourceNode = null;\n      let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n      if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n          buffer: null,\n          channelCount: 2,\n          channelCountMode: 'max',\n          channelInterpretation: 'speakers',\n          loop: false,\n          loopEnd: 0,\n          loopStart: 0,\n          playbackRate: 1\n        });\n      } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n        nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n      if (nativeAudioBufferSourceNode !== null) {\n        if (filteredBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n\n          filteredBufferPromise = (async () => {\n            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n          })();\n        }\n\n        const filteredBuffer = await filteredBufferPromise;\n        nativeAudioBufferSourceNode.buffer = filteredBuffer;\n        nativeAudioBufferSourceNode.start(0);\n        return nativeAudioBufferSourceNode;\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n      return nativeIIRFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","nativeAudioBufferSourceNode","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","set","Error","partialOfflineAudioContext","context","destination","start","render","renderedNativeAudioNode","get","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\iir-filter-node-renderer-factory.ts"],"sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IIIRFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TIIRFilterNodeRendererFactoryFactory,\n    TNativeAudioBuffer,\n    TNativeAudioBufferSourceNode,\n    TNativeIIRFilterNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst filterFullBuffer = (\n    renderedBuffer: TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    feedback: Iterable<number>,\n    feedforward: Iterable<number>\n) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(\n        renderedBuffer.numberOfChannels,\n        renderedBuffer.length,\n        renderedBuffer.sampleRate\n    );\n\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n\n        filterBuffer(\n            convertedFeedback,\n            feedbackLength,\n            convertedFeedforward,\n            feedforwardLength,\n            minLength,\n            xBuffer,\n            yBuffer,\n            0,\n            bufferLength,\n            input,\n            output\n        );\n    }\n\n    return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory: TIIRFilterNodeRendererFactoryFactory = (\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(feedback: Iterable<number>, feedforward: Iterable<number>) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode | TNativeIIRFilterNode>();\n\n        let filteredBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IIIRFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode: null | TNativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode<T, TNativeIIRFilterNode>(proxy);\n\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(<number[]>feedforward, <number[]>feedback);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode\n            );\n\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                        proxy.context.destination.channelCount,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n\n                const filteredBuffer = await filteredBufferPromise;\n\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n\n                return nativeAudioBufferSourceNode;\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n\n            return nativeIIRFilterNode;\n        };\n\n        return {\n            render(\n                proxy: IIIRFilterNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode | TNativeIIRFilterNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}