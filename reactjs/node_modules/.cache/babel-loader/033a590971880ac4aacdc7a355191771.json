{"ast":null,"code":"/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      await new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      isCallingProcess = await new Promise(resolve => {\n        messageChannel.port1.onmessage = _ref => {\n          let {\n            data\n          } = _ref;\n          return resolve(data === 1);\n        };\n\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {// Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","map":{"version":3,"mappings":"AAEA;;;;AAIA,OAAO,MAAMA,+CAA+C,GAAsD,CAC9GC,iCAD8G,EAE9GC,oCAF8G,KAG9G;EACA,OAAO,YAAW;IACd;IACA,IAAID,iCAAiC,KAAK,IAA1C,EAAgD;MAC5C,OAAO,IAAP;IACH;;IAED,IAAIC,oCAAoC,KAAK,IAA7C,EAAmD;MAC/C,OAAO,KAAP;IACH;;IAED,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CACT,CACI,uNADJ,CADS,EAIT;MACIC,IAAI,EAAE;IADV,CAJS,CAAb;IAQA,MAAMC,cAAc,GAAG,IAAIC,cAAJ,EAAvB,CAlBc,CAmBd;;IACA,MAAMC,mBAAmB,GAAG,IAAIN,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CAA5B;IACA,MAAMO,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBR,IAApB,CAAZ;IAEA,IAAIS,gBAAgB,GAAG,KAAvB;;IAEA,IAAI;MACA,MAAMJ,mBAAmB,CAACK,YAApB,CAAiCC,SAAjC,CAA2CL,GAA3C,CAAN;MAEA,MAAMM,gBAAgB,GAAG,IAAId,iCAAJ,CAAsCO,mBAAtC,EAA2D,GAA3D,EAAgE;QAAEQ,eAAe,EAAE;MAAnB,CAAhE,CAAzB;MACA,MAAMC,UAAU,GAAGT,mBAAmB,CAACU,gBAApB,EAAnB;MAEA,MAAM,IAAIC,OAAJ,CAAmBC,OAAD,IAAY;QAChCL,gBAAgB,CAACM,IAAjB,CAAsBC,SAAtB,GAAkC,MAAMF,OAAO,EAA/C;;QACAL,gBAAgB,CAACM,IAAjB,CAAsBE,WAAtB,CAAkCjB,cAAc,CAACkB,KAAjD,EAAwD,CAAClB,cAAc,CAACkB,KAAhB,CAAxD;MACH,CAHK,CAAN;;MAKAT,gBAAgB,CAACM,IAAjB,CAAsBC,SAAtB,GAAkC,MAAOV,gBAAgB,GAAG,IAA5D;;MAEAK,UAAU,CAACQ,OAAX,CAAmBV,gBAAnB;MACAE,UAAU,CAACS,KAAX,CAAiB,CAAjB;MAEA,MAAMlB,mBAAmB,CAACmB,cAApB,EAAN;MAEAf,gBAAgB,GAAG,MAAM,IAAIO,OAAJ,CAAaC,OAAD,IAAY;QAC7Cd,cAAc,CAACsB,KAAf,CAAqBN,SAArB,GAAiC;UAAA,IAAC;YAAEO;UAAF,CAAD;UAAA,OAAcT,OAAO,CAACS,IAAI,KAAK,CAAV,CAArB;QAAA,CAAjC;;QACAvB,cAAc,CAACsB,KAAf,CAAqBL,WAArB,CAAiC,CAAjC;MACH,CAHwB,CAAzB;IAIH,CAtBD,CAsBE,MAAM,CACJ;IACH,CAxBD,SAwBU;MACNjB,cAAc,CAACsB,KAAf,CAAqBE,KAArB;MACApB,GAAG,CAACqB,eAAJ,CAAoBtB,GAApB;IACH;;IAED,OAAOG,gBAAP;EACH,CAvDD;AAwDH,CA5DM","names":["createTestAudioWorkletProcessorNoOutputsSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","messageChannel","MessageChannel","offlineAudioContext","url","URL","createObjectURL","isCallingProcess","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","Promise","resolve","port","onmessage","postMessage","port2","connect","start","startRendering","port1","data","close","revokeObjectURL"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\test-audio-worklet-processor-no-outputs-support.ts"],"sourcesContent":["import { TTestAudioWorkletProcessorNoOutputsSupportFactory } from '../types';\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport: TTestAudioWorkletProcessorNoOutputsSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            [\n                'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n            ],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isCallingProcess = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            await new Promise<void>((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        } catch {\n            // Ignore errors.\n        } finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n\n        return isCallingProcess;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}