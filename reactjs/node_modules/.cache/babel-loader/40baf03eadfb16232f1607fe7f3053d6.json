{"ast":null,"code":"export const createFetchSource = createAbortError => {\n  return async url => {\n    try {\n      const response = await fetch(url);\n\n      if (response.ok) {\n        return [await response.text(), response.url];\n      }\n    } catch {// Ignore errors.\n    } // tslint:disable-line:no-empty\n\n\n    throw createAbortError();\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAyBC,gBAAD,IAAqB;EACvE,OAAO,MAAOC,GAAP,IAAc;IACjB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;;MAEA,IAAIC,QAAQ,CAACE,EAAb,EAAiB;QACb,OAAO,CAAC,MAAMF,QAAQ,CAACG,IAAT,EAAP,EAAwBH,QAAQ,CAACD,GAAjC,CAAP;MACH;IACJ,CAND,CAME,MAAM,CACJ;IACH,CATgB,CASf;;;IAEF,MAAMD,gBAAgB,EAAtB;EACH,CAZD;AAaH,CAdM","names":["createFetchSource","createAbortError","url","response","fetch","ok","text"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\fetch-source.ts"],"sourcesContent":["import { TFetchSourceFactory } from '../types';\n\nexport const createFetchSource: TFetchSourceFactory = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n\n            if (response.ok) {\n                return [await response.text(), response.url];\n            }\n        } catch {\n            // Ignore errors.\n        } // tslint:disable-line:no-empty\n\n        throw createAbortError();\n    };\n};\n"]},"metadata":{},"sourceType":"module"}