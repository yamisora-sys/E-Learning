{"ast":null,"code":"import { register as rgstr } from 'media-encoder-host';\nimport { createBlobEventFactory } from './factories/blob-event-factory';\nimport { createDecodeWebMChunk } from './factories/decode-web-m-chunk';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createEventTargetFactory } from './factories/event-target-factory';\nimport { createInvalidModificationError } from './factories/invalid-modification-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaRecorderConstructor } from './factories/media-recorder-constructor';\nimport { createNativeBlobEventConstructor } from './factories/native-blob-event-constructor';\nimport { createNativeMediaRecorderFactory } from './factories/native-media-recorder';\nimport { createNativeMediaRecorderConstructor } from './factories/native-media-recorder-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createReadElementContent } from './factories/read-element-content';\nimport { createReadElementType } from './factories/read-element-type';\nimport { createReadVariableSizeInteger } from './factories/read-variable-size-integer';\nimport { createWebAudioMediaRecorderFactory } from './factories/web-audio-media-recorder';\nimport { createWebmPcmMediaRecorderFactory } from './factories/webm-pcm-media-recorder';\nimport { createWindow } from './factories/window';\nimport { readVariableSizeIntegerLength } from './functions/read-variable-size-integer-length';\nimport { wrapEventListener } from './functions/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderRegexes = [];\nconst window = createWindow();\nconst nativeBlobEventConstructor = createNativeBlobEventConstructor(window);\nconst createBlobEvent = createBlobEventFactory(nativeBlobEventConstructor);\nconst createWebAudioMediaRecorder = createWebAudioMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createInvalidStateError, createNotSupportedError);\nconst readVariableSizeInteger = createReadVariableSizeInteger(readVariableSizeIntegerLength);\nconst readElementContent = createReadElementContent(readVariableSizeInteger);\nconst readElementType = createReadElementType(readVariableSizeInteger);\nconst decodeWebMChunk = createDecodeWebMChunk(readElementContent, readElementType);\nconst createWebmPcmMediaRecorder = createWebmPcmMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createNotSupportedError, decodeWebMChunk, readVariableSizeInteger);\nconst createEventTarget = createEventTargetFactory(window);\nconst nativeMediaRecorderConstructor = createNativeMediaRecorderConstructor(window);\nconst createNativeMediaRecorder = createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError);\nconst mediaRecorderConstructor = createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, createEventTargetConstructor(createEventTarget, wrapEventListener), nativeMediaRecorderConstructor);\nexport { mediaRecorderConstructor as MediaRecorder };\nexport const isSupported = () => createIsSupportedPromise(window);\nexport const register = async port => {\n  encoderRegexes.push(await rgstr(port));\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,IAAIC,KAArB,QAAkC,oBAAlC;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,4BAAT,QAA6C,sCAA7C;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,8BAAT,QAA+C,wCAA/C;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,8BAAT,QAA+C,wCAA/C;AACA,SAASC,gCAAT,QAAiD,2CAAjD;AACA,SAASC,gCAAT,QAAiD,mCAAjD;AACA,SAASC,oCAAT,QAAqD,+CAArD;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,6BAAT,QAA8C,wCAA9C;AACA,SAASC,kCAAT,QAAmD,sCAAnD;AACA,SAASC,iCAAT,QAAkD,qCAAlD;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,6BAAT,QAA8C,+CAA9C;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AAGA;;;;;AAIA,cAAc,oBAAd;AACA,cAAc,eAAd;AAEA,MAAMC,cAAc,GAAa,EAAjC;AAEA,MAAMC,MAAM,GAAGJ,YAAY,EAA3B;AACA,MAAMK,0BAA0B,GAAGd,gCAAgC,CAACa,MAAD,CAAnE;AACA,MAAME,eAAe,GAAGvB,sBAAsB,CAACsB,0BAAD,CAA9C;AACA,MAAME,2BAA2B,GAAGT,kCAAkC,CAClEQ,eADkE,EAElEnB,8BAFkE,EAGlEC,uBAHkE,EAIlEM,uBAJkE,CAAtE;AAMA,MAAMc,uBAAuB,GAAGX,6BAA6B,CAACI,6BAAD,CAA7D;AACA,MAAMQ,kBAAkB,GAAGd,wBAAwB,CAACa,uBAAD,CAAnD;AACA,MAAME,eAAe,GAAGd,qBAAqB,CAACY,uBAAD,CAA7C;AACA,MAAMG,eAAe,GAAG3B,qBAAqB,CAACyB,kBAAD,EAAqBC,eAArB,CAA7C;AACA,MAAME,0BAA0B,GAAGb,iCAAiC,CAChEO,eADgE,EAEhEnB,8BAFgE,EAGhEO,uBAHgE,EAIhEiB,eAJgE,EAKhEH,uBALgE,CAApE;AAOA,MAAMK,iBAAiB,GAAG3B,wBAAwB,CAACkB,MAAD,CAAlD;AACA,MAAMU,8BAA8B,GAAGrB,oCAAoC,CAACW,MAAD,CAA3E;AAEA,MAAMW,yBAAyB,GAAGvB,gCAAgC,CAACL,8BAAD,EAAiCO,uBAAjC,CAAlE;AACA,MAAMsB,wBAAwB,GAA8B1B,8BAA8B,CACtFyB,yBADsF,EAEtFrB,uBAFsF,EAGtFa,2BAHsF,EAItFK,0BAJsF,EAKtFT,cALsF,EAMtFlB,4BAA4B,CAAC4B,iBAAD,EAAoBX,iBAApB,CAN0D,EAOtFY,8BAPsF,CAA1F;AAUA,SAASE,wBAAwB,IAAIC,aAArC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM7B,wBAAwB,CAACe,MAAD,CAAlD;AAEP,OAAO,MAAMvB,QAAQ,GAAG,MAAOsC,IAAP,IAA2C;EAC/DhB,cAAc,CAACiB,IAAf,CAAoB,MAAMtC,KAAK,CAACqC,IAAD,CAA/B;AACH,CAFM","names":["register","rgstr","createBlobEventFactory","createDecodeWebMChunk","createEventTargetConstructor","createEventTargetFactory","createInvalidModificationError","createInvalidStateError","createIsSupportedPromise","createMediaRecorderConstructor","createNativeBlobEventConstructor","createNativeMediaRecorderFactory","createNativeMediaRecorderConstructor","createNotSupportedError","createReadElementContent","createReadElementType","createReadVariableSizeInteger","createWebAudioMediaRecorderFactory","createWebmPcmMediaRecorderFactory","createWindow","readVariableSizeIntegerLength","wrapEventListener","encoderRegexes","window","nativeBlobEventConstructor","createBlobEvent","createWebAudioMediaRecorder","readVariableSizeInteger","readElementContent","readElementType","decodeWebMChunk","createWebmPcmMediaRecorder","createEventTarget","nativeMediaRecorderConstructor","createNativeMediaRecorder","mediaRecorderConstructor","MediaRecorder","isSupported","port","push"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\extendable-media-recorder\\src\\module.ts"],"sourcesContent":["import { register as rgstr } from 'media-encoder-host';\nimport { createBlobEventFactory } from './factories/blob-event-factory';\nimport { createDecodeWebMChunk } from './factories/decode-web-m-chunk';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createEventTargetFactory } from './factories/event-target-factory';\nimport { createInvalidModificationError } from './factories/invalid-modification-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaRecorderConstructor } from './factories/media-recorder-constructor';\nimport { createNativeBlobEventConstructor } from './factories/native-blob-event-constructor';\nimport { createNativeMediaRecorderFactory } from './factories/native-media-recorder';\nimport { createNativeMediaRecorderConstructor } from './factories/native-media-recorder-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createReadElementContent } from './factories/read-element-content';\nimport { createReadElementType } from './factories/read-element-type';\nimport { createReadVariableSizeInteger } from './factories/read-variable-size-integer';\nimport { createWebAudioMediaRecorderFactory } from './factories/web-audio-media-recorder';\nimport { createWebmPcmMediaRecorderFactory } from './factories/webm-pcm-media-recorder';\nimport { createWindow } from './factories/window';\nimport { readVariableSizeIntegerLength } from './functions/read-variable-size-integer-length';\nimport { wrapEventListener } from './functions/wrap-event-listener';\nimport { IMediaRecorderConstructor } from './interfaces';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nconst encoderRegexes: RegExp[] = [];\n\nconst window = createWindow();\nconst nativeBlobEventConstructor = createNativeBlobEventConstructor(window);\nconst createBlobEvent = createBlobEventFactory(nativeBlobEventConstructor);\nconst createWebAudioMediaRecorder = createWebAudioMediaRecorderFactory(\n    createBlobEvent,\n    createInvalidModificationError,\n    createInvalidStateError,\n    createNotSupportedError\n);\nconst readVariableSizeInteger = createReadVariableSizeInteger(readVariableSizeIntegerLength);\nconst readElementContent = createReadElementContent(readVariableSizeInteger);\nconst readElementType = createReadElementType(readVariableSizeInteger);\nconst decodeWebMChunk = createDecodeWebMChunk(readElementContent, readElementType);\nconst createWebmPcmMediaRecorder = createWebmPcmMediaRecorderFactory(\n    createBlobEvent,\n    createInvalidModificationError,\n    createNotSupportedError,\n    decodeWebMChunk,\n    readVariableSizeInteger\n);\nconst createEventTarget = createEventTargetFactory(window);\nconst nativeMediaRecorderConstructor = createNativeMediaRecorderConstructor(window);\n\nconst createNativeMediaRecorder = createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError);\nconst mediaRecorderConstructor: IMediaRecorderConstructor = createMediaRecorderConstructor(\n    createNativeMediaRecorder,\n    createNotSupportedError,\n    createWebAudioMediaRecorder,\n    createWebmPcmMediaRecorder,\n    encoderRegexes,\n    createEventTargetConstructor(createEventTarget, wrapEventListener),\n    nativeMediaRecorderConstructor\n);\n\nexport { mediaRecorderConstructor as MediaRecorder };\n\nexport const isSupported = () => createIsSupportedPromise(window);\n\nexport const register = async (port: MessagePort): Promise<void> => {\n    encoderRegexes.push(await rgstr(port));\n};\n"]},"metadata":{},"sourceType":"module"}