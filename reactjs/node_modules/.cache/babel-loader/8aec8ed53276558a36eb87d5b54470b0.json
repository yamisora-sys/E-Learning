{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n      return nativeDelayNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,8BAA8B,GAAqC,CAC5EC,iBAD4E,EAE5EC,qBAF4E,EAG5EC,kBAH4E,EAI5EC,gBAJ4E,EAK5EC,uBAL4E,KAM5E;EACA,OAAsEC,YAA/D,IAAuF;IAC1F,MAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;IAEA,MAAMC,eAAe,GAAG,OAAOC,KAAP,EAA6BC,yBAA7B,KAAsF;MAC1G,IAAIC,eAAe,GAAGT,kBAAkB,CAAsBO,KAAtB,CAAxC,CAD0G,CAG1G;;MACA,MAAMG,+BAA+B,GAAGd,gBAAgB,CAACa,eAAD,EAAkBD,yBAAlB,CAAxD;;MAEA,IAAI,CAACE,+BAAL,EAAsC;QAClC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,eAAe,CAACG,YADlB;UAEZC,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;UAGZC,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;UAIZC,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;UAKZb;QALY,CAAhB;QAQAM,eAAe,GAAGV,qBAAqB,CAACS,yBAAD,EAA4BG,OAA5B,CAAvC;MACH;;MAEDP,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDC,eAAxD;;MAEA,IAAI,CAACC,+BAAL,EAAsC;QAClC,MAAMT,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CAAtB;MACH,CAFD,MAEO;QACH,MAAMjB,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CAAvB;MACH;;MAED,MAAMb,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CAA7B;MAEA,OAAOA,eAAP;IACH,CA7BD;;IA+BA,OAAO;MACHS,MAAM,CAACX,KAAD,EAAuBC,yBAAvB,EAA4E;QAC9E,MAAMW,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;QAEA,IAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;UACvC,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;QACH;;QAED,OAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;MACH;;IATE,CAAP;EAWH,CA7CD;AA8CH,CArDM","names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDelayNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDelayNodeRendererFactoryFactory, TNativeDelayNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDelayNodeRendererFactory: TDelayNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(maxDelayTime: number) => {\n        const renderedNativeDelayNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDelayNode>();\n\n        const createDelayNode = async (proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode<T, TNativeDelayNode>(proxy);\n\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n            return nativeDelayNode;\n        };\n\n        return {\n            render(proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeDelayNode> {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}