{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options) {\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        })());\n      }\n\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n\n      return this._nativeOfflineAudioContext.length;\n    }\n\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n        this._state = null;\n        deactivateAudioGraph(this);\n      });\n    }\n\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,mCAArC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AAIA,MAAMC,eAAe,GAAG;EACpBC,gBAAgB,EAAE;AADE,CAAxB;AAIA,OAAO,MAAMC,2CAA2C,GAAkD,CACtGC,eADsG,EAEtGC,uBAFsG,EAGtGC,+BAHsG,EAItGC,kCAJsG,EAKtGC,cALsG,KAMtG;EACA,OAAO,MAAMC,0BAAN,SAAyCF,kCAAzC,CAAwG;IAQ3GG,YAAYC,OAAZ,EAAgD;MAC5C,MAAM;QAAEC,MAAF;QAAUV,gBAAV;QAA4BW;MAA5B,IAA2C,EAAE,GAAGZ,eAAL;QAAsB,GAAGU;MAAzB,CAAjD;MAEA,MAAMG,yBAAyB,GAAGR,+BAA+B,CAACJ,gBAAD,EAAmBU,MAAnB,EAA2BC,UAA3B,CAAjE,CAH4C,CAK5C;;MACA,IAAI,CAACT,eAAe,CAACJ,kBAAD,EAAqB,MAAMA,kBAAkB,CAACc,yBAAD,CAA7C,CAApB,EAA+F;QAC3FA,yBAAyB,CAACC,gBAA1B,CACI,aADJ,EAEI,CAAC,MAAK;UACF,IAAIC,CAAC,GAAG,CAAR;;UAEA,MAAMC,qBAAqB,GAAIC,KAAD,IAAiB;YAC3C,IAAI,KAAKC,MAAL,KAAgB,SAApB,EAA+B;cAC3B,IAAIH,CAAC,GAAG,CAAR,EAAW;gBACPF,yBAAyB,CAACM,mBAA1B,CAA8C,aAA9C,EAA6DH,qBAA7D;gBACAC,KAAK,CAACG,wBAAN;;gBAEA,KAAKC,0BAAL,CAAgCJ,KAAhC;cACH,CALD,MAKO;gBACHF,CAAC,IAAI,CAAL;cACH;YACJ;UACJ,CAXD;;UAaA,OAAOC,qBAAP;QACH,CAjBD,GAFJ;MAqBH;;MAED,MAAMH,yBAAN,EAAiCZ,gBAAjC;MAEA,KAAKqB,OAAL,GAAeX,MAAf;MACA,KAAKY,0BAAL,GAAkCV,yBAAlC;MACA,KAAKK,MAAL,GAAc,IAAd;IACH;;IAES,IAANP,MAAM;MACN;MACA,IAAI,KAAKY,0BAAL,CAAgCZ,MAAhC,KAA2Ca,SAA/C,EAA0D;QACtD,OAAO,KAAKF,OAAZ;MACH;;MAED,OAAO,KAAKC,0BAAL,CAAgCZ,MAAvC;IACH;;IAEQ,IAALc,KAAK;MACL,OAAO,KAAKP,MAAL,KAAgB,IAAhB,GAAuB,KAAKK,0BAAL,CAAgCE,KAAvD,GAA+D,KAAKP,MAA3E;IACH;;IAEMX,cAAc;MACjB;;;;MAIA,IAAI,KAAKW,MAAL,KAAgB,SAApB,EAA+B;QAC3B,OAAOQ,OAAO,CAACC,MAAR,CAAevB,uBAAuB,EAAtC,CAAP;MACH;;MAED,KAAKc,MAAL,GAAc,SAAd;MAEA,OAAOX,cAAc,CAAC,KAAKqB,WAAN,EAAmB,KAAKL,0BAAxB,CAAd,CAAkEM,OAAlE,CAA0E,MAAK;QAClF,KAAKX,MAAL,GAAc,IAAd;QAEApB,oBAAoB,CAAC,IAAD,CAApB;MACH,CAJM,CAAP;IAKH;;IAEOuB,0BAA0B,CAACJ,KAAD,EAAa;MAC3C,IAAI,KAAKC,MAAL,KAAgB,IAApB,EAA0B;QACtB,KAAKK,0BAAL,CAAgCO,aAAhC,CAA8Cb,KAA9C;MACH,CAFD,MAEO;QACHc,UAAU,CAAC,MAAM,KAAKV,0BAAL,CAAgCJ,KAAhC,CAAP,CAAV;MACH;IACJ;;EAlF0G,CAA/G;AAoFH,CA3FM","names":["deactivateAudioGraph","testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createMinimalOfflineAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","minimalBaseAudioContextConstructor","startRendering","MinimalOfflineAudioContext","constructor","options","length","sampleRate","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","undefined","state","Promise","reject","destination","finally","dispatchEvent","setTimeout"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\minimal-offline-audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IAudioBuffer, IMinimalOfflineAudioContext, IOfflineAudioContextOptions } from '../interfaces';\nimport { TAudioContextState, TMinimalOfflineAudioContextConstructorFactory, TNativeOfflineAudioContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createMinimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructorFactory = (\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    minimalBaseAudioContextConstructor,\n    startRendering\n) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor<IMinimalOfflineAudioContext>\n        implements IMinimalOfflineAudioContext {\n        private _length: number;\n\n        private _nativeOfflineAudioContext: TNativeOfflineAudioContext;\n\n        private _state: null | TAudioContextState;\n\n        constructor(options: IOfflineAudioContextOptions) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener(\n                    'statechange',\n                    (() => {\n                        let i = 0;\n\n                        const delayStateChangeEvent = (event: Event) => {\n                            if (this._state === 'running') {\n                                if (i > 0) {\n                                    nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                    event.stopImmediatePropagation();\n\n                                    this._waitForThePromiseToSettle(event);\n                                } else {\n                                    i += 1;\n                                }\n                            }\n                        };\n\n                        return delayStateChangeEvent;\n                    })()\n                );\n            }\n\n            super(nativeOfflineAudioContext, numberOfChannels);\n\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n\n        get length(): number {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n\n            return this._nativeOfflineAudioContext.length;\n        }\n\n        get state(): TAudioContextState {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n\n        public startRendering(): Promise<IAudioBuffer> {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n\n            this._state = 'running';\n\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        private _waitForThePromiseToSettle(event: Event): void {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}