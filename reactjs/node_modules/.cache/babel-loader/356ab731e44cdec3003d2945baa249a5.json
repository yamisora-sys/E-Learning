{"ast":null,"code":"export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n\n    createChannelMerger() {\n      let numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n\n    createChannelSplitter() {\n      let numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n\n    createDelay() {\n      let maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n\n    createPeriodicWave(real, imag) {\n      let constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        disableNormalization: false\n      };\n      return new periodicWaveConstructor(this, { ...constraints,\n        imag,\n        real\n      });\n    }\n\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n\n        return audioBuffer;\n      }, err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","BaseAudioContext","constructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","audioWorklet","createAnalyser","createBiquadFilter","createBuffer","length","sampleRate","createBufferSource","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createOscillator","createPanner","createPeriodicWave","real","imag","constraints","disableNormalization","createStereoPanner","createWaveShaper","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\base-audio-context-constructor.ts"],"sourcesContent":["import {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioNode,\n    IAudioWorklet,\n    IBaseAudioContext,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IPeriodicWaveConstraints,\n    IStereoPannerNode,\n    IWaveShaperNode,\n    IWorkletOptions\n} from '../interfaces';\nimport { TBaseAudioContextConstructorFactory, TContext, TDecodeErrorCallback, TDecodeSuccessCallback, TNativeContext } from '../types';\n\nexport const createBaseAudioContextConstructor: TBaseAudioContextConstructorFactory = (\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n) => {\n    return class BaseAudioContext<T extends TContext> extends minimalBaseAudioContextConstructor<T> implements IBaseAudioContext<T> {\n        private _audioWorklet: undefined | IAudioWorklet;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext, numberOfChannels);\n\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                          addModule: (moduleURL: string, options?: IWorkletOptions) => {\n                              return addAudioWorkletModule(<T>(<unknown>this), moduleURL, options);\n                          }\n                      };\n        }\n\n        get audioWorklet(): undefined | IAudioWorklet {\n            return this._audioWorklet;\n        }\n\n        public createAnalyser(): IAnalyserNode<T> {\n            return new analyserNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBiquadFilter(): IBiquadFilterNode<T> {\n            return new biquadFilterNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n\n        public createBufferSource(): IAudioBufferSourceNode<T> {\n            return new audioBufferSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createChannelMerger(numberOfInputs = 6): IAudioNode<T> {\n            return new channelMergerNodeConstructor(<T>(<unknown>this), { numberOfInputs });\n        }\n\n        public createChannelSplitter(numberOfOutputs = 6): IAudioNode<T> {\n            return new channelSplitterNodeConstructor(<T>(<unknown>this), { numberOfOutputs });\n        }\n\n        public createConstantSource(): IConstantSourceNode<T> {\n            return new constantSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createConvolver(): IConvolverNode<T> {\n            return new convolverNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createDelay(maxDelayTime = 1): IDelayNode<T> {\n            return new delayNodeConstructor(<T>(<unknown>this), { maxDelayTime });\n        }\n\n        public createDynamicsCompressor(): IDynamicsCompressorNode<T> {\n            return new dynamicsCompressorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createGain(): IGainNode<T> {\n            return new gainNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T> {\n            return new iIRFilterNodeConstructor(<T>(<unknown>this), { feedback, feedforward });\n        }\n\n        public createOscillator(): IOscillatorNode<T> {\n            return new oscillatorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPanner(): IPannerNode<T> {\n            return new pannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPeriodicWave(\n            real: Iterable<number>,\n            imag: Iterable<number>,\n            constraints: Partial<IPeriodicWaveConstraints> = { disableNormalization: false }\n        ): IPeriodicWave {\n            return new periodicWaveConstructor(<T>(<unknown>this), { ...constraints, imag, real });\n        }\n\n        public createStereoPanner(): IStereoPannerNode<T> {\n            return new stereoPannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createWaveShaper(): IWaveShaperNode<T> {\n            return new waveShaperNodeConstructor(<T>(<unknown>this));\n        }\n\n        public decodeAudioData(\n            audioData: ArrayBuffer,\n            successCallback?: TDecodeSuccessCallback,\n            errorCallback?: TDecodeErrorCallback\n        ): Promise<IAudioBuffer> {\n            return decodeAudioData(this._nativeContext, audioData).then(\n                (audioBuffer) => {\n                    if (typeof successCallback === 'function') {\n                        successCallback(audioBuffer);\n                    }\n\n                    return audioBuffer;\n                },\n                (err) => {\n                    if (typeof errorCallback === 'function') {\n                        errorCallback(err);\n                    }\n\n                    throw err;\n                }\n            );\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}