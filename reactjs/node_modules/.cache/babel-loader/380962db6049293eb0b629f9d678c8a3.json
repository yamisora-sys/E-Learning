{"ast":null,"code":"// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    }); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isEmittingMessageEvents = false;\n    let isEmittingProcessorErrorEvents = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n\n      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;\n\n      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n    } catch {// Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n\n    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n  };\n};","map":{"version":3,"mappings":"AAEA;AACA,OAAO,MAAMA,iDAAiD,GAAwD,CAClHC,iCADkH,EAElHC,oCAFkH,KAGlH;EACA,OAAO,YAAW;IACd;IACA,IAAID,iCAAiC,KAAK,IAA1C,EAAgD;MAC5C,OAAO,IAAP;IACH;;IAED,IAAIC,oCAAoC,KAAK,IAA7C,EAAmD;MAC/C,OAAO,KAAP;IACH;;IAED,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CACT,CAAC,sHAAD,CADS,EAET;MACIC,IAAI,EAAE;IADV,CAFS,CAAb,CAVc,CAgBd;;IACA,MAAMC,mBAAmB,GAAG,IAAIJ,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CAA5B;IACA,MAAMK,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBN,IAApB,CAAZ;IAEA,IAAIO,uBAAuB,GAAG,KAA9B;IACA,IAAIC,8BAA8B,GAAG,KAArC;;IAEA,IAAI;MACA,MAAML,mBAAmB,CAACM,YAApB,CAAiCC,SAAjC,CAA2CN,GAA3C,CAAN;MAEA,MAAMO,gBAAgB,GAAG,IAAIb,iCAAJ,CAAsCK,mBAAtC,EAA2D,GAA3D,EAAgE;QAAES,eAAe,EAAE;MAAnB,CAAhE,CAAzB;MACA,MAAMC,UAAU,GAAGV,mBAAmB,CAACW,gBAApB,EAAnB;;MAEAH,gBAAgB,CAACI,IAAjB,CAAsBC,SAAtB,GAAkC,MAAOT,uBAAuB,GAAG,IAAnE;;MACAI,gBAAgB,CAACM,gBAAjB,GAAoC,MAAOT,8BAA8B,GAAG,IAA5E;;MAEAK,UAAU,CAACK,OAAX,CAAmBP,gBAAnB;MACAE,UAAU,CAACM,KAAX,CAAiB,CAAjB;MAEA,MAAMhB,mBAAmB,CAACiB,cAApB,EAAN;IACH,CAbD,CAaE,MAAM,CACJ;IACH,CAfD,SAeU;MACNf,GAAG,CAACgB,eAAJ,CAAoBjB,GAApB;IACH;;IAED,OAAOG,uBAAuB,IAAI,CAACC,8BAAnC;EACH,CA3CD;AA4CH,CAhDM","names":["createTestAudioWorkletProcessorPostMessageSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","offlineAudioContext","url","URL","createObjectURL","isEmittingMessageEvents","isEmittingProcessorErrorEvents","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","port","onmessage","onprocessorerror","connect","start","startRendering","revokeObjectURL"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\test-audio-worklet-processor-post-message-support.ts"],"sourcesContent":["import { TTestAudioWorkletProcessorPostMessageSupportFactory } from '../types';\n\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport: TTestAudioWorkletProcessorPostMessageSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            ['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n        } catch {\n            // Ignore errors.\n        } finally {\n            URL.revokeObjectURL(url);\n        }\n\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}