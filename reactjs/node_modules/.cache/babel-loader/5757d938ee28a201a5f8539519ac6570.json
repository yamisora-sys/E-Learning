{"ast":null,"code":"export function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n  if (typeof audioBuffer.copyFromChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = new Float32Array(128);\n    }\n\n    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().\n  } else {\n    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.\n\n    if (parent[key].byteLength === 0) {\n      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n    } else {\n      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n      parent[key].set(slicedInput);\n    }\n  }\n}","map":{"version":3,"mappings":"AAgBA,OAAM,SAAUA,eAAV,CACFC,WADE,EAEF;AACAC,MAHE,EAIFC,GAJE,EAKFC,aALE,EAMFC,YANE,EAMkB;EAEpB,IAAI,OAAOJ,WAAW,CAACD,eAAnB,KAAuC,UAA3C,EAAuD;IACnD;IACA,IAAIE,MAAM,CAACC,GAAD,CAAN,CAAYG,UAAZ,KAA2B,CAA/B,EAAkC;MAC9BJ,MAAM,CAACC,GAAD,CAAN,GAAc,IAAII,YAAJ,CAAiB,GAAjB,CAAd;IACH;;IAEDN,WAAW,CAACD,eAAZ,CAA4BE,MAAM,CAACC,GAAD,CAAlC,EAAyCC,aAAzC,EAAwDC,YAAxD,EANmD,CAQnD;EACH,CATD,MASO;IACH,MAAMG,WAAW,GAAGP,WAAW,CAACQ,cAAZ,CAA2BL,aAA3B,CAApB,CADG,CAGH;;IACA,IAAIF,MAAM,CAACC,GAAD,CAAN,CAAYG,UAAZ,KAA2B,CAA/B,EAAkC;MAC9BJ,MAAM,CAACC,GAAD,CAAN,GAAcK,WAAW,CAACE,KAAZ,CAAkBL,YAAlB,EAAgCA,YAAY,GAAG,GAA/C,CAAd;IACH,CAFD,MAEO;MACH,MAAMM,WAAW,GAAG,IAAIJ,YAAJ,CAAiBC,WAAW,CAACI,MAA7B,EAAqCP,YAAY,GAAGE,YAAY,CAACM,iBAAjE,EAAoF,GAApF,CAApB;MAEAX,MAAM,CAACC,GAAD,CAAN,CAAYW,GAAZ,CAAgBH,WAAhB;IACH;EACJ;AACJ","names":["copyFromChannel","audioBuffer","parent","key","channelNumber","bufferOffset","byteLength","Float32Array","channelData","getChannelData","slice","slicedInput","buffer","BYTES_PER_ELEMENT","set"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\copy-from-channel.ts"],"sourcesContent":["import { TNativeAudioBuffer } from '../types';\n\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: number]: Float32Array },\n    key: number,\n    channelNumber: number,\n    bufferOffset: number\n): void;\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: string]: Float32Array },\n    key: string,\n    channelNumber: number,\n    bufferOffset: number\n): void;\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\n    parent: any,\n    key: number | string,\n    channelNumber: number,\n    bufferOffset: number\n): void {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n\n        // Bug #5: Safari does not support copyFromChannel().\n    } else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        } else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n\n            parent[key].set(slicedInput);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}