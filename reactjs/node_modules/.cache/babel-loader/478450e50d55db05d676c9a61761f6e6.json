{"ast":null,"code":"export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async _ref => {\n      let [source, output] = _ref;\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,8BAA8B,GAAqC,CAC5EC,oBAD4E,EAE5EC,wBAF4E,EAG5EC,cAH4E,KAI5E;EACA,OAAO,OACHC,UADG,EAEHC,yBAFG,EAGHC,gBAHG,KAIY;IACf,MAAMC,qBAAqB,GAAGL,wBAAwB,CAAIE,UAAJ,CAAtD;IAEA,MAAMI,OAAO,CAACC,GAAR,CACFC,KAAK,CAACC,IAAN,CAAWJ,qBAAqB,CAACK,YAAjC,EAA+CC,GAA/C,CAAmD,cAA2B;MAAA,IAApB,CAACC,MAAD,EAASC,MAAT,CAAoB;MAC1E,MAAMC,iBAAiB,GAAGf,oBAAoB,CAACa,MAAD,CAA9C;MACA,MAAMG,uBAAuB,GAAG,MAAMD,iBAAiB,CAACE,MAAlB,CAAyBJ,MAAzB,EAAiCT,yBAAjC,CAAtC;;MAEA,IAAI,CAACF,cAAc,CAACW,MAAD,CAAnB,EAA6B;QACzBG,uBAAuB,CAACE,OAAxB,CAAgCb,gBAAhC,EAAkDS,MAAlD;MACH;IACJ,CAPD,CADE,CAAN;EAUH,CAjBD;AAkBH,CAvBM","names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","renderedNativeAudioNode","render","connect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\render-inputs-of-audio-param.ts"],"sourcesContent":["import { IAudioParam, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TNativeAudioParam, TNativeOfflineAudioContext, TRenderInputsOfAudioParamFactory } from '../types';\n\nexport const createRenderInputsOfAudioParam: TRenderInputsOfAudioParamFactory = (\n    getAudioNodeRenderer,\n    getAudioParamConnections,\n    isPartOfACycle\n) => {\n    return async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioParam: IAudioParam,\n        nativeOfflineAudioContext: TNativeOfflineAudioContext,\n        nativeAudioParam: TNativeAudioParam\n    ): Promise<void> => {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        await Promise.all(\n            Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n                const audioNodeRenderer = getAudioNodeRenderer(source);\n                const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                if (!isPartOfACycle(source)) {\n                    renderedNativeAudioNode.connect(nativeAudioParam, output);\n                }\n            })\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module"}