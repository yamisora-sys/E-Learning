{"ast":null,"code":"export const interceptConnections = (original, interceptor) => {\n  original.connect = interceptor.connect.bind(interceptor);\n  original.disconnect = interceptor.disconnect.bind(interceptor);\n  return original;\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,oBAAoB,GAAG,CAChCC,QADgC,EAEhCC,WAFgC,KAG0D;EAC3CD,QAAS,CAACE,OAAV,GAAoBD,WAAW,CAACC,OAAZ,CAAoBC,IAApB,CAAyBF,WAAzB,CAApB;EAEMD,QAAS,CAACI,UAAV,GAAuBH,WAAW,CAACG,UAAZ,CAAuBD,IAAvB,CAA4BF,WAA5B,CAAvB;EAErD,OAAiGD,QAAjG;AACH,CATM","names":["interceptConnections","original","interceptor","connect","bind","disconnect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\intercept-connections.ts"],"sourcesContent":["import { TNativeAudioNode } from '../types';\n\nexport const interceptConnections = <T extends object>(\n    original: T,\n    interceptor: TNativeAudioNode\n): T & { connect: TNativeAudioNode['connect']; disconnect: TNativeAudioNode['disconnect'] } => {\n    (<T & { connect: TNativeAudioNode['connect'] }>original).connect = interceptor.connect.bind(interceptor);\n\n    (<T & { disconnect: TNativeAudioNode['disconnect'] }>original).disconnect = interceptor.disconnect.bind(interceptor);\n\n    return <T & { connect: TNativeAudioNode['connect']; disconnect: TNativeAudioNode['disconnect'] }>original;\n};\n"]},"metadata":{},"sourceType":"module"}