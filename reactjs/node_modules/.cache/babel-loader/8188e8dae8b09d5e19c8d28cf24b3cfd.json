{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class ConvolverNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      super(context, false, nativeConvolverNode, convolverNodeRenderer);\n      this._isBufferNullified = false;\n      this._nativeConvolverNode = nativeConvolverNode;\n\n      if (mergedOptions.buffer !== null) {\n        setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n      }\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeConvolverNode.buffer;\n    }\n\n    set buffer(value) {\n      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.\n\n      if (value === null && this._nativeConvolverNode.buffer !== null) {\n        const nativeContext = this._nativeConvolverNode.context;\n        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, 44100);\n        this._isBufferNullified = true;\n        setAudioNodeTailTime(this, 0);\n      } else {\n        this._isBufferNullified = false;\n        setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n      }\n    }\n\n    get normalize() {\n      return this._nativeConvolverNode.normalize;\n    }\n\n    set normalize(value) {\n      this._nativeConvolverNode.normalize = value;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,MAAM,EAAE,IADY;EAEpBC,YAAY,EAAE,CAFM;EAGpBC,gBAAgB,EAAE,aAHE;EAIpBC,qBAAqB,EAAE,UAJH;EAKpBC,oBAAoB,EAAE;AALF,CAAxB;AAQA,OAAO,MAAMC,8BAA8B,GAAqC,CAC5EC,oBAD4E,EAE5EC,2BAF4E,EAG5EC,yBAH4E,EAI5EC,gBAJ4E,EAK5EC,2BAL4E,EAM5EC,oBAN4E,KAO5E;EACA,OAAO,MAAMC,aAAN,SAAgDN,oBAAhD,CAAuE;IAK1EO,YAAYC,OAAZ,EAAwBC,OAAxB,EAA4D;MACxD,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGlB,eAAL;QAAsB,GAAGgB;MAAzB,CAAtB;MACA,MAAMG,mBAAmB,GAAGV,yBAAyB,CAACQ,aAAD,EAAgBC,aAAhB,CAArD;MACA,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAMI,qBAAqB,GAAiCD,SAAS,GAAGZ,2BAA2B,EAA9B,GAAmC,IAAxG;MAEA,MAAMO,OAAN,EAAe,KAAf,EAAsBI,mBAAtB,EAA2CE,qBAA3C;MAEA,KAAKC,kBAAL,GAA0B,KAA1B;MACA,KAAKC,oBAAL,GAA4BJ,mBAA5B;;MAEA,IAAID,aAAa,CAACjB,MAAd,KAAyB,IAA7B,EAAmC;QAC/BW,oBAAoB,CAAC,IAAD,EAAOM,aAAa,CAACjB,MAAd,CAAqBuB,QAA5B,CAApB;MACH;IACJ;;IAES,IAANvB,MAAM;MACN,IAAI,KAAKqB,kBAAT,EAA6B;QACzB,OAAO,IAAP;MACH;;MAED,OAAO,KAAKC,oBAAL,CAA0BtB,MAAjC;IACH;;IAES,IAANA,MAAM,CAACwB,KAAD,EAAM;MACZ,KAAKF,oBAAL,CAA0BtB,MAA1B,GAAmCwB,KAAnC,CADY,CAGZ;;MACA,IAAIA,KAAK,KAAK,IAAV,IAAkB,KAAKF,oBAAL,CAA0BtB,MAA1B,KAAqC,IAA3D,EAAiE;QAC7D,MAAMgB,aAAa,GAAG,KAAKM,oBAAL,CAA0BR,OAAhD;QAEA,KAAKQ,oBAAL,CAA0BtB,MAA1B,GAAmCgB,aAAa,CAACS,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,CAAnC;QACA,KAAKJ,kBAAL,GAA0B,IAA1B;QAEAV,oBAAoB,CAAC,IAAD,EAAO,CAAP,CAApB;MACH,CAPD,MAOO;QACH,KAAKU,kBAAL,GAA0B,KAA1B;QAEAV,oBAAoB,CAAC,IAAD,EAAO,KAAKW,oBAAL,CAA0BtB,MAA1B,KAAqC,IAArC,GAA4C,CAA5C,GAAgD,KAAKsB,oBAAL,CAA0BtB,MAA1B,CAAiCuB,QAAxF,CAApB;MACH;IACJ;;IAEY,IAATG,SAAS;MACT,OAAO,KAAKJ,oBAAL,CAA0BI,SAAjC;IACH;;IAEY,IAATA,SAAS,CAACF,KAAD,EAAM;MACf,KAAKF,oBAAL,CAA0BI,SAA1B,GAAsCF,KAAtC;IACH;;EAtDyE,CAA9E;AAwDH,CAhEM","names":["DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","createConvolverNodeConstructor","audioNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","ConvolverNode","constructor","context","options","nativeContext","mergedOptions","nativeConvolverNode","isOffline","convolverNodeRenderer","_isBufferNullified","_nativeConvolverNode","duration","value","createBuffer","normalize"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\convolver-node-constructor.ts"],"sourcesContent":["import { IConvolverNode, IConvolverOptions } from '../interfaces';\nimport { TAnyAudioBuffer, TAudioNodeRenderer, TContext, TConvolverNodeConstructorFactory, TNativeConvolverNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n} as const;\n\nexport const createConvolverNodeConstructor: TConvolverNodeConstructorFactory = (\n    audioNodeConstructor,\n    createConvolverNodeRenderer,\n    createNativeConvolverNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class ConvolverNode<T extends TContext> extends audioNodeConstructor<T> implements IConvolverNode<T> {\n        private _isBufferNullified: boolean;\n\n        private _nativeConvolverNode: TNativeConvolverNode;\n\n        constructor(context: T, options?: Partial<IConvolverOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createConvolverNodeRenderer() : null);\n\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n\n            if (mergedOptions.buffer !== null) {\n                setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n            }\n        }\n\n        get buffer(): null | TAnyAudioBuffer {\n            if (this._isBufferNullified) {\n                return null;\n            }\n\n            return this._nativeConvolverNode.buffer;\n        }\n\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, 44100);\n                this._isBufferNullified = true;\n\n                setAudioNodeTailTime(this, 0);\n            } else {\n                this._isBufferNullified = false;\n\n                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n            }\n        }\n\n        get normalize(): boolean {\n            return this._nativeConvolverNode.normalize;\n        }\n\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}