{"ast":null,"code":"export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n\n  return false;\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAA+B,OAChEC,eADgE,EAEhEC,gDAFgE,EAGhEC,kCAHgE,EAIhEC,qDAJgE,EAKhEC,8BALgE,EAMhEC,iCANgE,EAOhEC,yCAPgE,EAQhEC,wCARgE,EAShEC,+CATgE,EAUhEC,6CAVgE,EAWhEC,oCAXgE,EAYhEC,gCAZgE,EAahEC,0BAbgE,EAchEC,iEAdgE,EAehEC,uCAfgE,EAgBhEC,wBAhBgE,KAiBhE;EACA,IACIf,eAAe,CAACC,gDAAD,EAAmDA,gDAAnD,CAAf,IACAD,eAAe,CAACE,kCAAD,EAAqCA,kCAArC,CADf,IAEAF,eAAe,CAACI,8BAAD,EAAiCA,8BAAjC,CAFf,IAGAJ,eAAe,CAACK,iCAAD,EAAoCA,iCAApC,CAHf,IAIAL,eAAe,CAACO,wCAAD,EAA2CA,wCAA3C,CAJf,IAKAP,eAAe,CAACQ,+CAAD,EAAkDA,+CAAlD,CALf,IAMAR,eAAe,CAACS,6CAAD,EAAgDA,6CAAhD,CANf,IAOAT,eAAe,CAACU,oCAAD,EAAuCA,oCAAvC,CAPf,IAQAV,eAAe,CAACW,gCAAD,EAAmCA,gCAAnC,CARf,IASAX,eAAe,CAACY,0BAAD,EAA6BA,0BAA7B,CATf,IAUAZ,eAAe,CACXa,iEADW,EAEXA,iEAFW,CAXnB,EAeE;IACE,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9BlB,eAAe,CAACG,qDAAD,EAAwDA,qDAAxD,CADe,EAE9BH,eAAe,CAACM,yCAAD,EAA4CA,yCAA5C,CAFe,EAG9BN,eAAe,CAACc,uCAAD,EAA0CA,uCAA1C,CAHe,EAI9Bd,eAAe,CAACe,wBAAD,EAA2BA,wBAA3B,CAJe,CAAZ,CAAtB;IAOA,OAAOC,OAAO,CAACG,KAAR,CAAeC,MAAD,IAAYA,MAA1B,CAAP;EACH;;EAED,OAAO,KAAP;AACH,CA7CM","names":["createIsSupportedPromise","cacheTestResult","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testConvolverNodeChannelCountSupport","testDomExceptionContrucorSupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","results","Promise","all","every","result"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\is-supported-promise.ts"],"sourcesContent":["import { TIsSupportedPromiseFactory } from '../types';\n\nexport const createIsSupportedPromise: TIsSupportedPromiseFactory = async (\n    cacheTestResult,\n    testAudioBufferCopyChannelMethodsSubarraySupport,\n    testAudioContextCloseMethodSupport,\n    testAudioContextDecodeAudioDataMethodTypeErrorSupport,\n    testAudioContextOptionsSupport,\n    testAudioNodeConnectMethodSupport,\n    testAudioWorkletProcessorNoOutputsSupport,\n    testChannelMergerNodeChannelCountSupport,\n    testConstantSourceNodeAccurateSchedulingSupport,\n    testConvolverNodeBufferReassignabilitySupport,\n    testConvolverNodeChannelCountSupport,\n    testDomExceptionContrucorSupport,\n    testIsSecureContextSupport,\n    testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n    testStereoPannerNodeDefaultValueSupport,\n    testTransferablesSupport\n) => {\n    if (\n        cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) &&\n        cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) &&\n        cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) &&\n        cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) &&\n        cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) &&\n        cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) &&\n        cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) &&\n        cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) &&\n        cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) &&\n        cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) &&\n        cacheTestResult(\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport\n        )\n    ) {\n        const results = await Promise.all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n\n        return results.every((result) => result);\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}