{"ast":null,"code":"export const createReadVariableSizeInteger = readVariableSizeIntegerLength => {\n  return (dataView, offset) => {\n    const length = readVariableSizeIntegerLength(dataView, offset);\n\n    if (length === null) {\n      return length;\n    }\n\n    const firstDataByteOffset = offset + Math.floor((length - 1) / 8);\n\n    if (firstDataByteOffset + length > dataView.byteLength) {\n      return null;\n    }\n\n    const firstDataByte = dataView.getUint8(firstDataByteOffset);\n    let value = firstDataByte & (1 << 8 - length % 8) - 1; // tslint:disable-line:no-bitwise\n\n    for (let i = 1; i < length; i += 1) {\n      value = (value << 8) + dataView.getUint8(firstDataByteOffset + i); // tslint:disable-line:no-bitwise\n    }\n\n    return {\n      length,\n      value\n    };\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,6BAA6B,GAAqCC,6BAAD,IAAkC;EAC5G,OAAO,CAACC,QAAD,EAAWC,MAAX,KAAqB;IACxB,MAAMC,MAAM,GAAGH,6BAA6B,CAACC,QAAD,EAAWC,MAAX,CAA5C;;IAEA,IAAIC,MAAM,KAAK,IAAf,EAAqB;MACjB,OAAOA,MAAP;IACH;;IAED,MAAMC,mBAAmB,GAAGF,MAAM,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACH,MAAM,GAAG,CAAV,IAAe,CAA1B,CAArC;;IAEA,IAAIC,mBAAmB,GAAGD,MAAtB,GAA+BF,QAAQ,CAACM,UAA5C,EAAwD;MACpD,OAAO,IAAP;IACH;;IAED,MAAMC,aAAa,GAAGP,QAAQ,CAACQ,QAAT,CAAkBL,mBAAlB,CAAtB;IAEA,IAAIM,KAAK,GAAGF,aAAa,GAAI,CAAC,KAAM,IAAKL,MAAM,GAAG,CAArB,IAA4B,CAAzD,CAfwB,CAeqC;;IAE7D,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAApB,EAA4BQ,CAAC,IAAI,CAAjC,EAAoC;MAChCD,KAAK,GAAG,CAACA,KAAK,IAAI,CAAV,IAAeT,QAAQ,CAACQ,QAAT,CAAkBL,mBAAmB,GAAGO,CAAxC,CAAvB,CADgC,CACmC;IACtE;;IAED,OAAO;MAAER,MAAF;MAAUO;IAAV,CAAP;EACH,CAtBD;AAuBH,CAxBM","names":["createReadVariableSizeInteger","readVariableSizeIntegerLength","dataView","offset","length","firstDataByteOffset","Math","floor","byteLength","firstDataByte","getUint8","value","i"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\extendable-media-recorder\\src\\factories\\read-variable-size-integer.ts"],"sourcesContent":["import { TReadVariableSizeIntegerFactory } from '../types';\n\nexport const createReadVariableSizeInteger: TReadVariableSizeIntegerFactory = (readVariableSizeIntegerLength) => {\n    return (dataView, offset) => {\n        const length = readVariableSizeIntegerLength(dataView, offset);\n\n        if (length === null) {\n            return length;\n        }\n\n        const firstDataByteOffset = offset + Math.floor((length - 1) / 8);\n\n        if (firstDataByteOffset + length > dataView.byteLength) {\n            return null;\n        }\n\n        const firstDataByte = dataView.getUint8(firstDataByteOffset);\n\n        let value = firstDataByte & ((1 << (8 - (length % 8))) - 1); // tslint:disable-line:no-bitwise\n\n        for (let i = 1; i < length; i += 1) {\n            value = (value << 8) + dataView.getUint8(firstDataByteOffset + i); // tslint:disable-line:no-bitwise\n        }\n\n        return { length, value };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}