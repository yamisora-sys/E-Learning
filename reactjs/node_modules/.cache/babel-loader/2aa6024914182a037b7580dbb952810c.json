{"ast":null,"code":"export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAAgCC,mBAAD,IAAwB;EACxF,OAAO;IACHC,MAAM,CAACC,UAAD,EAA8B;MAChC,KAAK,MAAMC,eAAX,IAA8BH,mBAA9B,EAAmD;QAC/C,IAAIG,eAAe,CAACC,IAAhB,KAAyB,wBAA7B,EAAuD;UACnD,MAAM;YAAEC,OAAF;YAAWC;UAAX,IAAqBH,eAA3B;UAEAD,UAAU,CAACK,4BAAX,CAAwCD,KAAxC,EAA+CD,OAA/C;QACH,CAJD,MAIO,IAAIF,eAAe,CAACC,IAAhB,KAAyB,mBAA7B,EAAkD;UACrD,MAAM;YAAEC,OAAF;YAAWC;UAAX,IAAqBH,eAA3B;UAEAD,UAAU,CAACM,uBAAX,CAAmCF,KAAnC,EAA0CD,OAA1C;QACH,CAJM,MAIA,IAAIF,eAAe,CAACC,IAAhB,KAAyB,WAA7B,EAA0C;UAC7C,MAAM;YAAEK,SAAF;YAAaC,MAAb;YAAqBC;UAArB,IAAsCR,eAA5C;UAEAD,UAAU,CAACU,eAAX,CAA2BF,MAA3B,EAAmCD,SAAnC,EAA8CE,YAA9C;QACH,CAJM,MAIA,IAAIR,eAAe,CAACC,IAAhB,KAAyB,UAA7B,EAAyC;UAC5C,MAAM;YAAEK,SAAF;YAAaH;UAAb,IAAuBH,eAA7B;UAEAD,UAAU,CAACW,cAAX,CAA0BP,KAA1B,EAAiCG,SAAjC;QACH,CAJM,MAIA,IAAIN,eAAe,CAACC,IAAhB,KAAyB,eAA7B,EAA8C;UACjD,MAAM;YAAEU,QAAF;YAAYL,SAAZ;YAAuBM;UAAvB,IAAkCZ,eAAxC;UAEAD,UAAU,CAACc,mBAAX,CAA+BD,MAA/B,EAAuCN,SAAvC,EAAkDK,QAAlD;QACH,CAJM,MAIA;UACH,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;QACH;MACJ;IACJ;;EA3BE,CAAP;AA6BH,CA9BM","names":["createAudioParamRenderer","automationEventList","replay","audioParam","automationEvent","type","endTime","value","exponentialRampToValueAtTime","linearRampToValueAtTime","startTime","target","timeConstant","setTargetAtTime","setValueAtTime","duration","values","setValueCurveAtTime","Error"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\audio-param-renderer.ts"],"sourcesContent":["import { TAudioParamRendererFactory, TNativeAudioParam } from '../types';\n\nexport const createAudioParamRenderer: TAudioParamRendererFactory = (automationEventList) => {\n    return {\n        replay(audioParam: TNativeAudioParam): void {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                } else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n\n                    audioParam.setValueAtTime(value, startTime);\n                } else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                } else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}