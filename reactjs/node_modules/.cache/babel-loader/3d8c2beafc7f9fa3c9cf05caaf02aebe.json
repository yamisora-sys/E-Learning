{"ast":null,"code":"export const createWakeLock = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n  return type => wrapSubscribeFunction(observer => {\n    if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n      return emitNotSupportedError(observer);\n    }\n\n    const releaseWakeLock = wakeLockSentinel => wakeLockSentinel.release().catch(() => {// Ignore errors.\n    });\n\n    const removeReleaseEventListener = wakeLockSentinel => {\n      wakeLockSentinel.onrelease = null;\n    };\n\n    let isActive = true;\n\n    const unsubscribeWhileRequesting = () => {\n      isActive = false;\n    };\n\n    let unsubscribe = unsubscribeWhileRequesting;\n\n    const requestWakeLock = () => window.navigator.wakeLock.request(type).then(wakeLockSentinel => {\n      if (isActive) {\n        observer.next(true);\n      }\n\n      if (isActive) {\n        wakeLockSentinel.onrelease = () => {\n          observer.next(false);\n          unsubscribe = unsubscribeWhileRequesting;\n          removeReleaseEventListener(wakeLockSentinel);\n          requestWakeLock();\n        };\n\n        unsubscribe = () => {\n          removeReleaseEventListener(wakeLockSentinel);\n          releaseWakeLock(wakeLockSentinel);\n        };\n      } else {\n        releaseWakeLock(wakeLockSentinel);\n      }\n    }, err => {\n      if (isActive) {\n        observer.error(err);\n      }\n    });\n\n    requestWakeLock();\n    return () => unsubscribe();\n  });\n};","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,cAAc,GAAqB,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,KAAyD;EACrG,OAAQC,IAAD,IACHD,qBAAqB,CAAEE,QAAD,IAAa;IAC/B,IAAIH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACI,SAAP,KAAqBC,SAAxC,IAAqDL,MAAM,CAACI,SAAP,CAAiBE,QAAjB,KAA8BD,SAAvF,EAAkG;MAC9F,OAAON,qBAAqB,CAACI,QAAD,CAA5B;IACH;;IAED,MAAMI,eAAe,GAAIC,gBAAD,IACpBA,gBAAgB,CAACC,OAAjB,GAA2BC,KAA3B,CAAiC,MAAK,CAClC;IACH,CAFD,CADJ;;IAIA,MAAMC,0BAA0B,GAAIH,gBAAD,IAAwC;MACvEA,gBAAgB,CAACI,SAAjB,GAA6B,IAA7B;IACH,CAFD;;IAIA,IAAIC,QAAQ,GAAG,IAAf;;IAEA,MAAMC,0BAA0B,GAAG,MAAK;MACpCD,QAAQ,GAAG,KAAX;IACH,CAFD;;IAIA,IAAIE,WAAW,GAAGD,0BAAlB;;IAEA,MAAME,eAAe,GAAG,MACpBhB,MAAM,CAACI,SAAP,CAAiBE,QAAjB,CAA0BW,OAA1B,CAAkCf,IAAlC,EAAwCgB,IAAxC,CACKV,gBAAD,IAAqB;MACjB,IAAIK,QAAJ,EAAc;QACVV,QAAQ,CAACgB,IAAT,CAAc,IAAd;MACH;;MAED,IAAIN,QAAJ,EAAc;QACVL,gBAAgB,CAACI,SAAjB,GAA6B,MAAK;UAC9BT,QAAQ,CAACgB,IAAT,CAAc,KAAd;UAEAJ,WAAW,GAAGD,0BAAd;UAEAH,0BAA0B,CAACH,gBAAD,CAA1B;UACAQ,eAAe;QAClB,CAPD;;QASAD,WAAW,GAAG,MAAK;UACfJ,0BAA0B,CAACH,gBAAD,CAA1B;UACAD,eAAe,CAACC,gBAAD,CAAf;QACH,CAHD;MAIH,CAdD,MAcO;QACHD,eAAe,CAACC,gBAAD,CAAf;MACH;IACJ,CAvBL,EAwBKY,GAAD,IAAQ;MACJ,IAAIP,QAAJ,EAAc;QACVV,QAAQ,CAACkB,KAAT,CAAeD,GAAf;MACH;IACJ,CA5BL,CADJ;;IAgCAJ,eAAe;IAEf,OAAO,MAAMD,WAAW,EAAxB;EACH,CAxDoB,CADzB;AA0DH,CA3DM","names":["createWakeLock","emitNotSupportedError","window","wrapSubscribeFunction","type","observer","navigator","undefined","wakeLock","releaseWakeLock","wakeLockSentinel","release","catch","removeReleaseEventListener","onrelease","isActive","unsubscribeWhileRequesting","unsubscribe","requestWakeLock","request","then","next","err","error"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\subscribable-things\\src\\factories\\wake-lock.ts"],"sourcesContent":["import { IWakeLockSentinel } from '../interfaces';\nimport { TWakeLockFactory } from '../types';\n\nexport const createWakeLock: TWakeLockFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (type) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const releaseWakeLock = (wakeLockSentinel: IWakeLockSentinel) =>\n                wakeLockSentinel.release().catch(() => {\n                    // Ignore errors.\n                });\n            const removeReleaseEventListener = (wakeLockSentinel: IWakeLockSentinel) => {\n                wakeLockSentinel.onrelease = null;\n            };\n\n            let isActive = true;\n\n            const unsubscribeWhileRequesting = () => {\n                isActive = false;\n            };\n\n            let unsubscribe = unsubscribeWhileRequesting;\n\n            const requestWakeLock = () =>\n                window.navigator.wakeLock.request(type).then(\n                    (wakeLockSentinel) => {\n                        if (isActive) {\n                            observer.next(true);\n                        }\n\n                        if (isActive) {\n                            wakeLockSentinel.onrelease = () => {\n                                observer.next(false);\n\n                                unsubscribe = unsubscribeWhileRequesting;\n\n                                removeReleaseEventListener(wakeLockSentinel);\n                                requestWakeLock();\n                            };\n\n                            unsubscribe = () => {\n                                removeReleaseEventListener(wakeLockSentinel);\n                                releaseWakeLock(wakeLockSentinel);\n                            };\n                        } else {\n                            releaseWakeLock(wakeLockSentinel);\n                        }\n                    },\n                    (err) => {\n                        if (isActive) {\n                            observer.error(err);\n                        }\n                    }\n                );\n\n            requestWakeLock();\n\n            return () => unsubscribe();\n        });\n};\n"]},"metadata":{},"sourceType":"module"}