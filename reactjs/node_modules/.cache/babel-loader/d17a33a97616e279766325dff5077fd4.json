{"ast":null,"code":"export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n  return new Promise(resolve => {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n\n      const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n      const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      const channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      const source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy); // tslint:disable-next-line:deprecation\n\n      analyzer.onaudioprocess = event => {\n        const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n        if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n\n      source.start();\n    }\n  });\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,oCAAoC,GAAG,CAChDC,kBADgD,EAEhDC,iCAFgD,KAG9B;EAClB,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY;IAC3B;;;;IAIA,IAAIF,iCAAiC,KAAK,IAA1C,EAAgD;MAC5CE,OAAO,CAAC,IAAD,CAAP;IACH,CAFD,MAEO;MACH,MAAMC,QAAQ,GAAGJ,kBAAkB,CAACK,qBAAnB,CAAyC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAjB,CADG,CACmE;;MACtE,MAAMC,KAAK,GAAGN,kBAAkB,CAACO,UAAnB,EAAd,CAFG,CAGH;;MACA,MAAMC,IAAI,GAAGR,kBAAkB,CAACS,YAAnB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAtC,CAAb;MACA,MAAMC,WAAW,GAAGF,IAAI,CAACG,cAAL,CAAoB,CAApB,CAApB;MAEAD,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;MACAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;MAEA,MAAME,MAAM,GAAGZ,kBAAkB,CAACa,kBAAnB,EAAf;MAEAD,MAAM,CAACE,MAAP,GAAgBN,IAAhB;MACAI,MAAM,CAACG,IAAP,GAAc,IAAd;MAEAH,MAAM,CAACI,OAAP,CAAeZ,QAAf,EAAyBY,OAAzB,CAAiChB,kBAAkB,CAACiB,WAApD;MACAL,MAAM,CAACI,OAAP,CAAeV,KAAf;MACAM,MAAM,CAACM,UAAP,CAAkBZ,KAAlB,EAjBG,CAmBH;;MACAF,QAAQ,CAACe,cAAT,GAA2BC,KAAD,IAAU;QAChC,MAAMC,OAAO,GAAGD,KAAK,CAACE,WAAN,CAAkBX,cAAlB,CAAiC,CAAjC,CAAhB,CADgC,CACqB;;QAErD,IAAIY,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,IAArB,CAA0BL,OAA1B,EAAoCM,MAAD,IAAoBA,MAAM,KAAK,CAAlE,CAAJ,EAA0E;UACtExB,OAAO,CAAC,IAAD,CAAP;QACH,CAFD,MAEO;UACHA,OAAO,CAAC,KAAD,CAAP;QACH;;QAEDS,MAAM,CAACgB,IAAP;QAEAxB,QAAQ,CAACe,cAAT,GAA0B,IAA1B,CAXgC,CAWA;;QAEhCP,MAAM,CAACM,UAAP,CAAkBd,QAAlB;QACAA,QAAQ,CAACc,UAAT,CAAoBlB,kBAAkB,CAACiB,WAAvC;MACH,CAfD;;MAiBAL,MAAM,CAACiB,KAAP;IACH;EACJ,CA9CM,CAAP;AA+CH,CAnDM","names":["testAudioNodeDisconnectMethodSupport","nativeAudioContext","nativeAudioWorkletNodeConstructor","Promise","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","getChannelData","source","createBufferSource","buffer","loop","connect","destination","disconnect","onaudioprocess","event","chnnlDt","inputBuffer","Array","prototype","some","call","sample","stop","start"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\test-audio-node-disconnect-method-support.ts"],"sourcesContent":["import { TNativeAudioContext, TNativeAudioWorkletNodeConstructor } from '../types';\n\nexport const testAudioNodeDisconnectMethodSupport = (\n    nativeAudioContext: TNativeAudioContext,\n    nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor\n): Promise<boolean> => {\n    return new Promise((resolve) => {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            resolve(true);\n        } else {\n            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n            const dummy = nativeAudioContext.createGain();\n            // Bug #95: Safari does not play one sample buffers.\n            const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n            const channelData = ones.getChannelData(0);\n\n            channelData[0] = 1;\n            channelData[1] = 1;\n\n            const source = nativeAudioContext.createBufferSource();\n\n            source.buffer = ones;\n            source.loop = true;\n\n            source.connect(analyzer).connect(nativeAudioContext.destination);\n            source.connect(dummy);\n            source.disconnect(dummy);\n\n            // tslint:disable-next-line:deprecation\n            analyzer.onaudioprocess = (event) => {\n                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n                if (Array.prototype.some.call(chnnlDt, (sample: number) => sample === 1)) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n\n                source.stop();\n\n                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                source.disconnect(analyzer);\n                analyzer.disconnect(nativeAudioContext.destination);\n            };\n\n            source.start();\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}