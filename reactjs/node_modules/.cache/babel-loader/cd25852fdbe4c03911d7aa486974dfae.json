{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), // @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","map":{"version":3,"mappings":"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","names":["createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","createAbortError","createAddActiveInputConnectionToAudioNode","createAddAudioNodeConnections","createAddAudioParamConnections","createAddAudioWorkletModule","createAddConnectionToAudioNode","createAddPassiveInputConnectionToAudioNode","createAddSilentConnection","createAddUnrenderedAudioWorkletNode","createAnalyserNodeConstructor","createAnalyserNodeRendererFactory","createAudioBufferConstructor","createAudioBufferSourceNodeConstructor","createAudioBufferSourceNodeRendererFactory","createAudioContextConstructor","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createAudioListenerFactory","createAudioNodeConstructor","createAudioParamFactory","createAudioParamRenderer","createAudioWorkletNodeConstructor","createAudioWorkletNodeRendererFactory","createBaseAudioContextConstructor","createBiquadFilterNodeConstructor","createBiquadFilterNodeRendererFactory","createCacheTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createConvertNumberToUnsignedLong","createConvolverNodeConstructor","createConvolverNodeRendererFactory","createCreateNativeOfflineAudioContext","createDataCloneError","createDecodeAudioData","createDecrementCycleCounter","createDelayNodeConstructor","createDelayNodeRendererFactory","createDeleteActiveInputConnectionToAudioNode","createDeleteUnrenderedAudioWorkletNode","createDetectCycles","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRendererFactory","createEncodingError","createEvaluateSource","createEventTargetConstructor","createExposeCurrentFrameAndCurrentTime","createFetchSource","createGainNodeConstructor","createGainNodeRendererFactory","createGetActiveAudioWorkletNodeInputs","createGetAudioNodeRenderer","createGetAudioNodeTailTime","createGetAudioParamRenderer","createGetBackupOfflineAudioContext","createGetNativeContext","createGetOrCreateBackupOfflineAudioContext","createGetUnrenderedAudioWorkletNodes","createIIRFilterNodeConstructor","createIIRFilterNodeRendererFactory","createIncrementCycleCounterFactory","createIndexSizeError","createInvalidAccessError","createInvalidStateError","createIsAnyAudioContext","createIsAnyAudioNode","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","createMediaElementAudioSourceNodeConstructor","createMediaStreamAudioDestinationNodeConstructor","createMediaStreamAudioSourceNodeConstructor","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","createMinimalOfflineAudioContextConstructor","createMonitorConnections","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","createNativeAudioBufferSourceNodeFactory","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","createNativeAudioWorkletNodeConstructor","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFakerFactory","createNativeBiquadFilterNode","createNativeChannelMergerNodeFactory","createNativeChannelSplitterNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","createNativeConvolverNodeFactory","createNativeDelayNode","createNativeDynamicsCompressorNodeFactory","createNativeGainNode","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFakerFactory","createNativeMediaElementAudioSourceNode","createNativeMediaStreamAudioDestinationNode","createNativeMediaStreamAudioSourceNode","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","createNativePannerNodeFactory","createNativePannerNodeFakerFactory","createNativePeriodicWaveFactory","createNativeScriptProcessorNode","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createNativeWaveShaperNodeFakerFactory","createNotSupportedError","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","createOscillatorNodeRendererFactory","createPannerNodeConstructor","createPannerNodeRendererFactory","createPeriodicWaveConstructor","createRenderAutomation","createRenderInputsOfAudioNode","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","createSetActiveAudioWorkletNodeInputs","createSetAudioNodeTailTime","createStartRendering","createStereoPannerNodeConstructor","createStereoPannerNodeRendererFactory","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioContextCloseMethodSupport","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioWorkletProcessorNoOutputsSupport","createTestAudioWorkletProcessorPostMessageSupport","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestConvolverNodeChannelCountSupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","createUnknownError","createWaveShaperNodeConstructor","createWaveShaperNodeRendererFactory","createWindow","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","createWrapChannelMergerNode","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","CYCLE_COUNTERS","connectNativeAudioNodeToNativeAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getEventListenersOfAudioNode","getFirstSample","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isDCCurve","isPartOfACycle","isPassiveAudioNode","overwriteAccessors","pickElementFromSet","sanitizeAudioWorkletNodeOptions","sanitizeChannelSplitterOptions","sanitizePeriodicWaveOptions","setValueAtTimeUntilPossible","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","testAudioWorkletNodeOptionsClonability","testDomExceptionConstructorSupport","testPromiseSupport","testTransferablesSupport","wrapAudioBufferSourceNodeStartMethodOffsetClamping","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","wrapEventListener","addActiveInputConnectionToAudioNode","addPassiveInputConnectionToAudioNode","deleteActiveInputConnectionToAudioNode","audioNodeTailTimeStore","WeakMap","getAudioNodeTailTime","cacheTestResult","Map","window","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","getNativeContext","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","audioParamAudioNodeStore","eventTargetConstructor","nativeAudioContextConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","nativeAudioWorkletNodeConstructor","audioNodeConstructor","analyserNodeConstructor","AnalyserNode","audioBufferStore","WeakSet","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","AudioBuffer","addSilentConnection","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","AudioBufferSourceNode","audioDestinationNodeConstructor","createBiquadFilterNodeRenderer","setAudioNodeTailTime","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","backupOfflineAudioContextStore","getOrCreateBackupOfflineAudioContext","addAudioWorkletModule","undefined","isNativeContext","decodeAudioData","baseAudioContextConstructor","mediaElementAudioSourceNodeConstructor","mediaStreamAudioDestinationNodeConstructor","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","AudioContext","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","activeAudioWorkletNodeInputsStore","getActiveAudioWorkletNodeInputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","createAudioWorkletNodeRenderer","getBackupOfflineAudioContext","setActiveAudioWorkletNodeInputs","audioWorkletNodeConstructor","AudioWorkletNode","BiquadFilterNode","ChannelMergerNode","ChannelSplitterNode","ConvolverNode","ConstantSourceNode","DelayNode","DynamicsCompressorNode","GainNode","IIRFilterNode","MediaElementAudioSourceNode","MediaStreamAudioDestinationNode","MediaStreamAudioSourceNode","MediaStreamTrackAudioSourceNode","minimalAudioContextConstructor","MinimalAudioContext","createNativeOfflineAudioContext","startRendering","minimalOfflineAudioContextConstructor","MinimalOfflineAudioContext","offlineAudioContextConstructor","OfflineAudioContext","OscillatorNode","PannerNode","PeriodicWave","StereoPannerNode","WaveShaperNode","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\module.ts"],"sourcesContent":["import {\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent\n} from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport {\n    AUDIO_NODE_CONNECTIONS_STORE,\n    AUDIO_NODE_STORE,\n    AUDIO_PARAM_CONNECTIONS_STORE,\n    AUDIO_PARAM_STORE,\n    CONTEXT_STORE,\n    CYCLE_COUNTERS\n} from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\nimport {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioContext,\n    IAudioNode,\n    IAudioWorkletNode,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IMediaElementAudioSourceNode,\n    IMediaStreamAudioDestinationNode,\n    IMediaStreamAudioSourceNode,\n    IMediaStreamTrackAudioSourceNode,\n    IMinimalAudioContext,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IOfflineAudioContextConstructor,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IStereoPannerNode,\n    IWaveShaperNode\n} from './interfaces';\nimport {\n    TActiveAudioWorkletNodeInputsStore,\n    TAddAudioWorkletModuleFunction,\n    TAnalyserNodeConstructor,\n    TAudioBufferConstructor,\n    TAudioBufferSourceNodeConstructor,\n    TAudioBufferStore,\n    TAudioContextConstructor,\n    TAudioParamAudioNodeStore,\n    TAudioWorkletNodeConstructor,\n    TBackupOfflineAudioContextStore,\n    TBiquadFilterNodeConstructor,\n    TChannelMergerNodeConstructor,\n    TChannelSplitterNodeConstructor,\n    TConstantSourceNodeConstructor,\n    TContext,\n    TConvolverNodeConstructor,\n    TDecodeAudioDataFunction,\n    TDelayNodeConstructor,\n    TDynamicsCompressorNodeConstructor,\n    TGainNodeConstructor,\n    TIIRFilterNodeConstructor,\n    TMediaElementAudioSourceNodeConstructor,\n    TMediaStreamAudioDestinationNodeConstructor,\n    TMediaStreamAudioSourceNodeConstructor,\n    TMediaStreamTrackAudioSourceNodeConstructor,\n    TMinimalAudioContextConstructor,\n    TMinimalOfflineAudioContextConstructor,\n    TOscillatorNodeConstructor,\n    TPannerNodeConstructor,\n    TPeriodicWaveConstructor,\n    TStereoPannerNodeConstructor,\n    TUnrenderedAudioWorkletNodeStore,\n    TWaveShaperNodeConstructor\n} from './types';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore: TAudioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(\n    createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE),\n    createAddConnectionToAudioNode(\n        addActiveInputConnectionToAudioNode,\n        addPassiveInputConnectionToAudioNode,\n        connectNativeAudioNodeToNativeAudioNode,\n        deleteActiveInputConnectionToAudioNode,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getAudioNodeTailTime,\n        getEventListenersOfAudioNode,\n        getNativeAudioNode,\n        insertElementInSet,\n        isActiveAudioNode,\n        isPartOfACycle,\n        isPassiveAudioNode\n    ),\n    cacheTestResult,\n    createIncrementCycleCounterFactory(\n        CYCLE_COUNTERS,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        isActiveAudioNode\n    ),\n    createIndexSizeError,\n    createInvalidAccessError,\n    createNotSupportedError,\n    createDecrementCycleCounter(\n        connectNativeAudioNodeToNativeAudioNode,\n        CYCLE_COUNTERS,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        getNativeContext,\n        isActiveAudioNode,\n        isNativeOfflineAudioContext\n    ),\n    createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey),\n    eventTargetConstructor,\n    getNativeContext,\n    isNativeAudioContext,\n    isNativeAudioNode,\n    isNativeAudioParam,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor\n);\nconst analyserNodeConstructor: TAnalyserNodeConstructor = createAnalyserNodeConstructor(\n    audioNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\n\ntype analyserNodeConstructor<T extends TContext> = IAnalyserNode<T>;\n\nexport { analyserNodeConstructor as AnalyserNode };\n\nconst audioBufferStore: TAudioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor: TAudioBufferConstructor = createAudioBufferConstructor(\n    audioBufferStore,\n    cacheTestResult,\n    createNotSupportedError,\n    nativeAudioBufferConstructor,\n    nativeOfflineAudioContextConstructor,\n    createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor),\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\ntype audioBufferConstructor = IAudioBuffer;\n\nexport { audioBufferConstructor as AudioBuffer };\n\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,\n    testAudioBufferSourceNodeStartMethodOffsetClampingSupport,\n    testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioBufferSourceNodeStartMethodOffsetClamping,\n    createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors),\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst createAudioParam = createAudioParamFactory(\n    createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE),\n    audioParamAudioNodeStore,\n    AUDIO_PARAM_STORE,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n);\nconst audioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\n\ntype audioBufferSourceNodeConstructor<T extends TContext> = IAudioBufferSourceNode<T>;\n\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\n\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors),\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor: TBiquadFilterNodeConstructor = createBiquadFilterNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelMergerNodeConstructor: TChannelMergerNodeConstructor = createChannelMergerNodeConstructor(\n    audioNodeConstructor,\n    createChannelMergerNodeRenderer,\n    createNativeChannelMergerNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(\n    createNativeChannelSplitterNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelSplitterNodeConstructor: TChannelSplitterNodeConstructor = createChannelSplitterNodeConstructor(\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    createNativeConstantSourceNodeFaker,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport\n);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst constantSourceNodeConstructor: TConstantSourceNodeConstructor = createConstantSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRenderer,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst convolverNodeConstructor: TConvolverNodeConstructor = createConvolverNodeConstructor(\n    audioNodeConstructor,\n    createConvolverNodeRenderer,\n    createNativeConvolverNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst delayNodeConstructor: TDelayNodeConstructor = createDelayNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst dynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createGainNodeRenderer = createGainNodeRendererFactory(\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst gainNodeConstructor: TGainNodeConstructor = createGainNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(\n    cacheTestResult,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor)\n);\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor: TIIRFilterNodeConstructor = createIIRFilterNodeConstructor(\n    audioNodeConstructor,\n    createNativeIIRFilterNode,\n    createIIRFilterNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createAudioListener = createAudioListenerFactory(\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n);\nconst unrenderedAudioWorkletNodeStore: TUnrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst oscillatorNodeConstructor: TOscillatorNodeConstructor = createOscillatorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeGainNode,\n    isDCCurve,\n    monitorConnections\n);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeWaveShaperNodeFaker,\n    isDCCurve,\n    monitorConnections,\n    nativeAudioContextConstructor,\n    overwriteAccessors\n);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst pannerNodeConstructor: TPannerNodeConstructor = createPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor: TPeriodicWaveConstructor = createPeriodicWaveConstructor(\n    createNativePeriodicWave,\n    getNativeContext,\n    new WeakSet(),\n    sanitizePeriodicWaveOptions\n);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeGainNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst stereoPannerNodeConstructor: TStereoPannerNodeConstructor = createStereoPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst waveShaperNodeConstructor: TWaveShaperNodeConstructor = createWaveShaperNodeConstructor(\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore: TBackupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(\n    backupOfflineAudioContextStore,\n    nativeOfflineAudioContextConstructor\n);\n\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule: undefined | TAddAudioWorkletModuleFunction = isSecureContext\n    ? createAddAudioWorkletModule(\n          cacheTestResult,\n          createNotSupportedError,\n          createEvaluateSource(window),\n          exposeCurrentFrameAndCurrentTime,\n          createFetchSource(createAbortError),\n          getNativeContext,\n          getOrCreateBackupOfflineAudioContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          new WeakMap(),\n          new WeakMap(),\n          createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n          // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n          <NonNullable<typeof window>>window\n      )\n    : undefined;\n\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\n\nexport const decodeAudioData: TDecodeAudioDataFunction = createDecodeAudioData(\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    new WeakSet(),\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n);\nconst mediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaElementAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructor =\n    createMediaStreamAudioDestinationNodeConstructor(\n        audioNodeConstructor,\n        createNativeMediaStreamAudioDestinationNode,\n        getNativeContext,\n        isNativeOfflineAudioContext\n    );\nconst mediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaStreamAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(\n    createInvalidStateError,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamTrackAudioSourceNodeConstructor: TMediaStreamTrackAudioSourceNodeConstructor =\n    createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor: TAudioContextConstructor = createAudioContextConstructor(\n    baseAudioContextConstructor,\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    mediaElementAudioSourceNodeConstructor,\n    mediaStreamAudioDestinationNodeConstructor,\n    mediaStreamAudioSourceNodeConstructor,\n    mediaStreamTrackAudioSourceNodeConstructor,\n    nativeAudioContextConstructor\n);\n\ntype audioContextConstructor = IAudioContext;\n\nexport { audioContextConstructor as AudioContext };\n\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore: TActiveAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor: undefined | TAudioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(\n          addUnrenderedAudioWorkletNode,\n          audioNodeConstructor,\n          createAudioParam,\n          createAudioWorkletNodeRenderer,\n          createNativeAudioWorkletNode,\n          getAudioNodeConnections,\n          getBackupOfflineAudioContext,\n          getNativeContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          sanitizeAudioWorkletNodeOptions,\n          setActiveAudioWorkletNodeInputs,\n          testAudioWorkletNodeOptionsClonability,\n          wrapEventListener\n      )\n    : undefined;\n\ntype audioWorkletNodeConstructor<T extends TContext> = undefined | IAudioWorkletNode<T>;\n\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\n\ntype biquadFilterNodeConstructor<T extends TContext> = IBiquadFilterNode<T>;\n\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\n\ntype channelMergerNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelMergerNodeConstructor as ChannelMergerNode };\n\ntype channelSplitterNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\n\ntype constantSourceNodeConstructor<T extends TContext> = IConstantSourceNode<T>;\n\nexport { convolverNodeConstructor as ConvolverNode };\n\ntype convolverNodeConstructor<T extends TContext> = IConvolverNode<T>;\n\nexport { constantSourceNodeConstructor as ConstantSourceNode };\n\ntype delayNodeConstructor<T extends TContext> = IDelayNode<T>;\n\nexport { delayNodeConstructor as DelayNode };\n\ntype dynamicsCompressorNodeConstructor<T extends TContext> = IDynamicsCompressorNode<T>;\n\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\n\ntype gainNodeConstructor<T extends TContext> = IGainNode<T>;\n\nexport { gainNodeConstructor as GainNode };\n\ntype iIRFilterNodeConstructor<T extends TContext> = IIIRFilterNode<T>;\n\nexport { iIRFilterNodeConstructor as IIRFilterNode };\n\ntype mediaElementAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaElementAudioSourceNode<T>;\n\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\n\ntype mediaStreamAudioDestinationNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioDestinationNode<T>;\n\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\n\ntype mediaStreamAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioSourceNode<T>;\n\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\n\ntype mediaStreamTrackAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamTrackAudioSourceNode<T>;\n\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\n\nconst minimalAudioContextConstructor: TMinimalAudioContextConstructor = createMinimalAudioContextConstructor(\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n);\n\ntype minimalAudioContextConstructor = IMinimalAudioContext;\n\nexport { minimalAudioContextConstructor as MinimalAudioContext };\n\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(\n    createNotSupportedError,\n    nativeOfflineAudioContextConstructor\n);\nconst startRendering = createStartRendering(\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\nconst minimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    minimalBaseAudioContextConstructor,\n    startRendering\n);\n\ntype minimalOfflineAudioContextConstructor = IMinimalOfflineAudioContext;\n\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\n\nconst offlineAudioContextConstructor: IOfflineAudioContextConstructor = createOfflineAudioContextConstructor(\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n);\n\ntype offlineAudioContextConstructor = IOfflineAudioContext;\n\nexport { offlineAudioContextConstructor as OfflineAudioContext };\n\ntype oscillatorNodeConstructor<T extends TContext> = IOscillatorNode<T>;\n\nexport { oscillatorNodeConstructor as OscillatorNode };\n\ntype pannerNodeConstructor<T extends TContext> = IPannerNode<T>;\n\nexport { pannerNodeConstructor as PannerNode };\n\ntype periodicWaveConstructor = IPeriodicWave;\n\nexport { periodicWaveConstructor as PeriodicWave };\n\ntype stereoPannerNodeConstructor<T extends TContext> = IStereoPannerNode<T>;\n\nexport { stereoPannerNodeConstructor as StereoPannerNode };\n\ntype waveShaperNodeConstructor<T extends TContext> = IWaveShaperNode<T>;\n\nexport { waveShaperNodeConstructor as WaveShaperNode };\n\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\n\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\n\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\n\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\n\nexport const isSupported = () =>\n    createIsSupportedPromise(\n        cacheTestResult,\n        createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor),\n        createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextOptionsSupport(nativeAudioContextConstructor),\n        createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n        createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        testDomExceptionConstructorSupport,\n        createTestIsSecureContextSupport(window),\n        createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor),\n        createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor),\n        testTransferablesSupport\n    );\n"]},"metadata":{},"sourceType":"module"}