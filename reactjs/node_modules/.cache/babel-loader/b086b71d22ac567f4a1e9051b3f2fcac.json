{"ast":null,"code":"export const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {\n  return (nativeContext, channelMergerNode) => {\n    // Bug #15: Safari does not return the default properties.\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit'; // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: () => 1,\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: () => 'explicit',\n      set: () => {\n        throw createInvalidStateError();\n      }\n    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n\n    const audioBufferSourceNode = nativeContext.createBufferSource();\n\n    const whenConnected = () => {\n      const length = channelMergerNode.numberOfInputs;\n\n      for (let i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n    monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,2BAA2B,GAAkC,CAACC,uBAAD,EAA0BC,kBAA1B,KAAgD;EACtH,OAAO,CAACC,aAAD,EAAgBC,iBAAhB,KAAqC;IACxC;IACAA,iBAAiB,CAACC,YAAlB,GAAiC,CAAjC;IACAD,iBAAiB,CAACE,gBAAlB,GAAqC,UAArC,CAHwC,CAKxC;;IACAC,MAAM,CAACC,cAAP,CAAsBJ,iBAAtB,EAAyC,cAAzC,EAAyD;MACrDK,GAAG,EAAE,MAAM,CAD0C;MAErDC,GAAG,EAAE,MAAK;QACN,MAAMT,uBAAuB,EAA7B;MACH;IAJoD,CAAzD;IAOAM,MAAM,CAACC,cAAP,CAAsBJ,iBAAtB,EAAyC,kBAAzC,EAA6D;MACzDK,GAAG,EAAE,MAAM,UAD8C;MAEzDC,GAAG,EAAE,MAAK;QACN,MAAMT,uBAAuB,EAA7B;MACH;IAJwD,CAA7D,EAbwC,CAoBxC;;IACA,MAAMU,qBAAqB,GAAGR,aAAa,CAACS,kBAAd,EAA9B;;IAEA,MAAMC,aAAa,GAAG,MAAK;MACvB,MAAMC,MAAM,GAAGV,iBAAiB,CAACW,cAAjC;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,IAAI,CAAjC,EAAoC;QAChCL,qBAAqB,CAACM,OAAtB,CAA8Bb,iBAA9B,EAAiD,CAAjD,EAAoDY,CAApD;MACH;IACJ,CAND;;IAOA,MAAME,gBAAgB,GAAG,MAAMP,qBAAqB,CAACQ,UAAtB,CAAiCf,iBAAjC,CAA/B;;IAEAF,kBAAkB,CAACE,iBAAD,EAAoBS,aAApB,EAAmCK,gBAAnC,CAAlB;EACH,CAjCD;AAkCH,CAnCM","names":["createWrapChannelMergerNode","createInvalidStateError","monitorConnections","nativeContext","channelMergerNode","channelCount","channelCountMode","Object","defineProperty","get","set","audioBufferSourceNode","createBufferSource","whenConnected","length","numberOfInputs","i","connect","whenDisconnected","disconnect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\wrap-channel-merger-node.ts"],"sourcesContent":["import { TWrapChannelMergerNodeFactory } from '../types';\n\nexport const createWrapChannelMergerNode: TWrapChannelMergerNodeFactory = (createInvalidStateError, monitorConnections) => {\n    return (nativeContext, channelMergerNode) => {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = nativeContext.createBufferSource();\n\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}