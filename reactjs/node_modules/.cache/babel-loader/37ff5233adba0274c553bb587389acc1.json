{"ast":null,"code":"import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext);\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n\n    get destination() {\n      return this._destination;\n    }\n\n    get listener() {\n      return this._listener;\n    }\n\n    get onstatechange() {\n      return this._onstatechange;\n    }\n\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n\n    get state() {\n      return this._nativeContext.state;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;AAIA,OAAO,MAAMC,wCAAwC,GAA+C,CAChGC,+BADgG,EAEhGC,mBAFgG,EAGhGC,sBAHgG,EAIhGC,2BAJgG,EAKhGC,+BALgG,EAMhGC,iBANgG,KAOhG;EACA,OAAO,MAAMC,uBAAN,SACKJ,sBADL,CAC6D;IAShEK,YAAoBC,cAApB,EAAoDC,gBAApD,EAA4E;MACxE,MAAMD,cAAN;MADgB;MAGhBV,aAAa,CAACY,GAAd,CAA+B,IAA/B,EAAsCF,cAAtC;;MAEA,IAAIL,2BAA2B,CAACK,cAAD,CAA/B,EAAiD;QAC7CJ,+BAA+B,CAACM,GAAhC,CAAoCF,cAApC,EAAoD,IAAIG,GAAJ,EAApD;MACH;;MAED,KAAKC,YAAL,GAAoB,IAAIZ,+BAAJ,CAAiD,IAAjD,EAAwDS,gBAAxD,CAApB;MACA,KAAKI,SAAL,GAAiBZ,mBAAmB,CAAc,IAAd,EAAqBO,cAArB,CAApC;MACA,KAAKM,cAAL,GAAsB,IAAtB;IACH;;IAEc,IAAXC,WAAW;MACX,OAAO,KAAKP,cAAL,CAAoBO,WAA3B;IACH;;IAEc,IAAXC,WAAW;MACX,OAAO,KAAKJ,YAAZ;IACH;;IAEW,IAARK,QAAQ;MACR,OAAO,KAAKJ,SAAZ;IACH;;IAEgB,IAAbK,aAAa;MACb,OAAO,KAAKJ,cAAZ;IACH;;IAEgB,IAAbI,aAAa,CAACC,KAAD,EAAM;MACnB,MAAMC,eAAe,GAAG,OAAOD,KAAP,KAAiB,UAAjB,GAA8Bd,iBAAiB,CAAC,IAAD,EAAOc,KAAP,CAA/C,GAA+D,IAAvF;MAEA,KAAKX,cAAL,CAAoBU,aAApB,GAAoCE,eAApC;MAEA,MAAMC,mBAAmB,GAAG,KAAKb,cAAL,CAAoBU,aAAhD;MAEA,KAAKJ,cAAL,GAAsBO,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAKD,eAAxD,GAA0ED,KAA1E,GAAkFE,mBAAxG;IACH;;IAEa,IAAVC,UAAU;MACV,OAAO,KAAKd,cAAL,CAAoBc,UAA3B;IACH;;IAEQ,IAALC,KAAK;MACL,OAAO,KAAKf,cAAL,CAAoBe,KAA3B;IACH;;EAvD+D,CADpE;AA0DH,CAlEM","names":["CONTEXT_STORE","createMinimalBaseAudioContextConstructor","audioDestinationNodeConstructor","createAudioListener","eventTargetConstructor","isNativeOfflineAudioContext","unrenderedAudioWorkletNodeStore","wrapEventListener","MinimalBaseAudioContext","constructor","_nativeContext","numberOfChannels","set","Set","_destination","_listener","_onstatechange","currentTime","destination","listener","onstatechange","value","wrappedListener","nativeOnStateChange","sampleRate","state"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\minimal-base-audio-context-constructor.ts"],"sourcesContent":["import { CONTEXT_STORE } from '../globals';\nimport { IAudioDestinationNode, IAudioListener, IMinimalBaseAudioContext, IMinimalBaseAudioContextEventMap } from '../interfaces';\nimport { TAudioContextState, TContext, TEventHandler, TMinimalBaseAudioContextConstructorFactory, TNativeContext } from '../types';\n\nexport const createMinimalBaseAudioContextConstructor: TMinimalBaseAudioContextConstructorFactory = (\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n) => {\n    return class MinimalBaseAudioContext<T extends TContext>\n        extends eventTargetConstructor<IMinimalBaseAudioContextEventMap>\n        implements IMinimalBaseAudioContext<T>\n    {\n        private _destination: IAudioDestinationNode<T>;\n\n        private _listener: IAudioListener;\n\n        private _onstatechange: null | TEventHandler<T>;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext);\n\n            CONTEXT_STORE.set(<T>(<unknown>this), _nativeContext);\n\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n\n            this._destination = new audioDestinationNodeConstructor(<T>(<unknown>this), numberOfChannels);\n            this._listener = createAudioListener(<T>(<unknown>this), _nativeContext);\n            this._onstatechange = null;\n        }\n\n        get currentTime(): number {\n            return this._nativeContext.currentTime;\n        }\n\n        get destination(): IAudioDestinationNode<T> {\n            return this._destination;\n        }\n\n        get listener(): IAudioListener {\n            return this._listener;\n        }\n\n        get onstatechange(): null | TEventHandler<T> {\n            return this._onstatechange;\n        }\n\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeContext.onstatechange = wrappedListener;\n\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n\n        get sampleRate(): number {\n            return this._nativeContext.sampleRate;\n        }\n\n        get state(): TAudioContextState {\n            return this._nativeContext.state;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}