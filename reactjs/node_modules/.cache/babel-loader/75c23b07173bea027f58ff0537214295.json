{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,UAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,eAAe,EAAE;AAJG,CAAxB;AAOA,OAAO,MAAMC,oCAAoC,GAA2C,CACxFC,oBADwF,EAExFC,iCAFwF,EAGxFC,+BAHwF,EAIxFC,gBAJwF,EAKxFC,2BALwF,EAMxFC,8BANwF,KAOxF;EACA,OAAO,MAAMC,mBAAN,SAAsDN,oBAAtD,CAA6E;IAChFO,YAAYC,OAAZ,EAAwBC,OAAxB,EAAkE;MAC9D,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAGN,8BAA8B,CAAC,EAAE,GAAGX,eAAL;QAAsB,GAAGe;MAAzB,CAAD,CAApD;MACA,MAAMG,yBAAyB,GAAGV,+BAA+B,CAACQ,aAAD,EAAgBC,aAAhB,CAAjE;MACA,MAAME,2BAA2B,GAC5BT,2BAA2B,CAACM,aAAD,CAA3B,GAA6CT,iCAAiC,EAA9E,GAAmF,IADxF;MAIA,MAAMO,OAAN,EAAe,KAAf,EAAsBI,yBAAtB,EAAiDC,2BAAjD;IACH;;EAV+E,CAApF;AAYH,CApBM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","createChannelSplitterNodeConstructor","audioNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","getNativeContext","isNativeOfflineAudioContext","sanitizeChannelSplitterOptions","ChannelSplitterNode","constructor","context","options","nativeContext","mergedOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\channel-splitter-node-constructor.ts"],"sourcesContent":["import { IChannelSplitterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TChannelSplitterNodeConstructorFactory, TContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n} as const;\n\nexport const createChannelSplitterNodeConstructor: TChannelSplitterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n) => {\n    return class ChannelSplitterNode<T extends TContext> extends audioNodeConstructor<T> {\n        constructor(context: T, options?: Partial<IChannelSplitterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null)\n            );\n\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}