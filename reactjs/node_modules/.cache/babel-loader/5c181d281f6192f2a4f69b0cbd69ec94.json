{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n\n      return this._nativeWaveShaperNode.curve;\n    }\n\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,KAAK,EAAE,IAJa;EAKpBC,UAAU,EAAE;AALQ,CAAxB;AAQA,OAAO,MAAMC,+BAA+B,GAAsC,CAC9EC,oBAD8E,EAE9EC,uBAF8E,EAG9EC,0BAH8E,EAI9EC,4BAJ8E,EAK9EC,gBAL8E,EAM9EC,2BAN8E,EAO9EC,oBAP8E,KAQ9E;EACA,OAAO,MAAMC,cAAN,SAAiDP,oBAAjD,CAAwE;IAK3EQ,YAAYC,OAAZ,EAAwBC,OAAxB,EAA6D;MACzD,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGnB,eAAL;QAAsB,GAAGiB;MAAzB,CAAtB;MACA,MAAMG,oBAAoB,GAAGX,0BAA0B,CAACS,aAAD,EAAgBC,aAAhB,CAAvD;MACA,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAMI,sBAAsB,GAAiCD,SAAS,GAAGX,4BAA4B,EAA/B,GAAoC,IAA1G,CALyD,CAOzD;;MACA,MAAMM,OAAN,EAAe,IAAf,EAAqBI,oBAArB,EAA2CE,sBAA3C;MAEA,KAAKC,iBAAL,GAAyB,KAAzB;MACA,KAAKC,qBAAL,GAA6BJ,oBAA7B,CAXyD,CAazD;;MACAP,oBAAoB,CAAC,IAAD,EAAO,CAAP,CAApB;IACH;;IAEQ,IAALT,KAAK;MACL,IAAI,KAAKmB,iBAAT,EAA4B;QACxB,OAAO,IAAP;MACH;;MAED,OAAO,KAAKC,qBAAL,CAA2BpB,KAAlC;IACH;;IAEQ,IAALA,KAAK,CAACqB,KAAD,EAAM;MACX;MACA,IAAIA,KAAK,KAAK,IAAd,EAAoB;QAChB,KAAKF,iBAAL,GAAyB,IAAzB;QACA,KAAKC,qBAAL,CAA2BpB,KAA3B,GAAmC,IAAIsB,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAnC;MACH,CAHD,MAGO;QACH;QACA;QACA,IAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;UAClB,MAAMnB,uBAAuB,EAA7B;QACH;;QAED,KAAKe,iBAAL,GAAyB,KAAzB;QACA,KAAKC,qBAAL,CAA2BpB,KAA3B,GAAmCqB,KAAnC;MACH;IACJ;;IAEa,IAAVpB,UAAU;MACV,OAAO,KAAKmB,qBAAL,CAA2BnB,UAAlC;IACH;;IAEa,IAAVA,UAAU,CAACoB,KAAD,EAAM;MAChB,KAAKD,qBAAL,CAA2BnB,UAA3B,GAAwCoB,KAAxC;IACH;;EArD0E,CAA/E;AAuDH,CAhEM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","WaveShaperNode","constructor","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\wave-shaper-node-constructor.ts"],"sourcesContent":["import { IWaveShaperNode, IWaveShaperOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TNativeWaveShaperNode, TOverSampleType, TWaveShaperNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n} as const;\n\nexport const createWaveShaperNodeConstructor: TWaveShaperNodeConstructorFactory = (\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class WaveShaperNode<T extends TContext> extends audioNodeConstructor<T> implements IWaveShaperNode<T> {\n        private _isCurveNullified: boolean;\n\n        private _nativeWaveShaperNode: TNativeWaveShaperNode;\n\n        constructor(context: T, options?: Partial<IWaveShaperOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createWaveShaperNodeRenderer() : null);\n\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get curve(): null | Float32Array {\n            if (this._isCurveNullified) {\n                return null;\n            }\n\n            return this._nativeWaveShaperNode.curve;\n        }\n\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            } else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n\n        get oversample(): TOverSampleType {\n            return this._nativeWaveShaperNode.oversample;\n        }\n\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}