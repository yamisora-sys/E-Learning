{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n      return nativeGainNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,6BAA6B,GAAoC,CAC1EC,iBAD0E,EAE1EC,oBAF0E,EAG1EC,kBAH0E,EAI1EC,gBAJ0E,EAK1EC,uBAL0E,KAM1E;EACA,OAAO,MAAmE;IACtE,MAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;IAEA,MAAMC,cAAc,GAAG,OAAOC,KAAP,EAA4BC,yBAA5B,KAAqF;MACxG,IAAIC,cAAc,GAAGR,kBAAkB,CAAqBM,KAArB,CAAvC,CADwG,CAGxG;;MACA,MAAMG,8BAA8B,GAAGb,gBAAgB,CAACY,cAAD,EAAiBD,yBAAjB,CAAvD;;MAEA,IAAI,CAACE,8BAAL,EAAqC;QACjC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,cAAc,CAACG,YADjB;UAEZC,gBAAgB,EAAEJ,cAAc,CAACI,gBAFrB;UAGZC,qBAAqB,EAAEL,cAAc,CAACK,qBAH1B;UAIZC,IAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;QAJd,CAAhB;QAOAP,cAAc,GAAGT,oBAAoB,CAACQ,yBAAD,EAA4BG,OAA5B,CAArC;MACH;;MAEDP,uBAAuB,CAACa,GAAxB,CAA4BT,yBAA5B,EAAuDC,cAAvD;;MAEA,IAAI,CAACC,8BAAL,EAAqC;QACjC,MAAMR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAAtB;MACH,CAFD,MAEO;QACH,MAAMhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAAvB;MACH;;MAED,MAAMZ,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,cAAnC,CAA7B;MAEA,OAAOA,cAAP;IACH,CA5BD;;IA8BA,OAAO;MACHS,MAAM,CAACX,KAAD,EAAsBC,yBAAtB,EAA2E;QAC7E,MAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAxB,CAA4BZ,yBAA5B,CAA/B;;QAEA,IAAIW,sBAAsB,KAAKE,SAA/B,EAA0C;UACtC,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;QACH;;QAED,OAAOb,cAAc,CAACC,KAAD,EAAQC,yBAAR,CAArB;MACH;;IATE,CAAP;EAWH,CA5CD;AA6CH,CApDM","names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IGainNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGainNodeRendererFactoryFactory, TNativeGainNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createGainNodeRendererFactory: TGainNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeGainNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode>();\n\n        const createGainNode = async (proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode<T, TNativeGainNode>(proxy);\n\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n            return nativeGainNode;\n        };\n\n        return {\n            render(proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeGainNode> {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}