{"ast":null,"code":"import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    let isScheduled = false;\n    return function () {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"mappings":"AAAA,SAASA,uBAAT,QAAwC,kCAAxC;AAGA,OAAO,MAAMC,oDAAoD,GAAIC,2BAAD,IAAoE;EACpIA,2BAA2B,CAACC,KAA5B,GAAoC,CAAEA,KAAD,IAAU;IAC3C,IAAIC,WAAW,GAAG,KAAlB;IAEA,OAAO,YAA4C;MAAA,IAA3CC,IAA2C,uEAApC,CAAoC;MAAA,IAAjCC,MAAiC,uEAAxB,CAAwB;MAAA,IAArBC,QAAqB;;MAC/C,IAAIH,WAAJ,EAAiB;QACb,MAAMJ,uBAAuB,EAA7B;MACH;;MAEDG,KAAK,CAACK,IAAN,CAAWN,2BAAX,EAAwCG,IAAxC,EAA8CC,MAA9C,EAAsDC,QAAtD;MAEAH,WAAW,GAAG,IAAd;IACH,CARD;EASH,CAZmC,EAYjCF,2BAA2B,CAACC,KAZK,CAApC;AAaH,CAdM","names":["createInvalidStateError","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","nativeAudioBufferSourceNode","start","isScheduled","when","offset","duration","call"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\wrap-audio-buffer-source-node-start-method-consecutive-calls.ts"],"sourcesContent":["import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { TNativeAudioBufferSourceNode } from '../types';\n\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode): void => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n\n        return (when = 0, offset = 0, duration?: number) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n"]},"metadata":{},"sourceType":"module"}