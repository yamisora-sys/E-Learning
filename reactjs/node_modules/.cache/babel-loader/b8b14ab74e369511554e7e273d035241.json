{"ast":null,"code":"export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return function () {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n\n\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,yDAAyD,GAClEC,8BADqE,IAE/D;EACNA,8BAA8B,CAACC,KAA/B,GAAuC,CAAEA,KAAD,IAAU;IAC9C,OAAO,YAA4C;MAAA,IAA3CC,IAA2C,uEAApC,CAAoC;MAAA,IAAjCC,MAAiC,uEAAxB,CAAwB;MAAA,IAArBC,QAAqB;;MAC/C,IAAK,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,GAAG,CAA5C,IAAkDD,MAAM,GAAG,CAA3D,IAAgED,IAAI,GAAG,CAA3E,EAA8E;QAC1E,MAAM,IAAIG,UAAJ,CAAe,mCAAf,CAAN;MACH,CAH8C,CAK/C;;;MAC4DJ,KAAM,CAACK,IAAP,CAAYN,8BAAZ,EAA4CE,IAA5C,EAAkDC,MAAlD,EAA0DC,QAA1D;IAC/D,CAPD;EAQH,CATsC,EASpCJ,8BAA8B,CAACC,KATK,CAAvC;AAUH,CAbM","names":["wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","start","when","offset","duration","RangeError","call"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\wrap-audio-scheduled-source-node-start-method-negative-parameters.ts"],"sourcesContent":["import { TNativeAudioBufferSourceNode, TNativeConstantSourceNode, TNativeOscillatorNode } from '../types';\n\nexport const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (\n    nativeAudioScheduledSourceNode: TNativeAudioBufferSourceNode | TNativeConstantSourceNode | TNativeOscillatorNode\n): void => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration?: number) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            (<(when: number, offset: number, duration?: number) => void>start).call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n"]},"metadata":{},"sourceType":"module"}