{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n      return nativeConstantSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,uCAAuC,GAA8C,CAC9FC,iBAD8F,EAE9FC,8BAF8F,EAG9FC,kBAH8F,EAI9FC,gBAJ8F,EAK9FC,uBAL8F,KAM9F;EACA,OAAO,MAAmE;IACtE,MAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;IAEA,IAAIC,KAAK,GAAkB,IAA3B;IACA,IAAIC,IAAI,GAAkB,IAA1B;;IAEA,MAAMC,wBAAwB,GAAG,OAAOC,KAAP,EAAsCC,yBAAtC,KAA+F;MAC5H,IAAIC,wBAAwB,GAAGV,kBAAkB,CAA+BQ,KAA/B,CAAjD;MAEA;;;;;MAIA,MAAMG,wCAAwC,GAAGf,gBAAgB,CAACc,wBAAD,EAA2BD,yBAA3B,CAAjE;;MAEA,IAAI,CAACE,wCAAL,EAA+C;QAC3C,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;UAEZC,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;UAGZC,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;UAIZC,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;QAJ5B,CAAhB;QAOAP,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAD,EAA4BG,OAA5B,CAAzD;;QAEA,IAAIP,KAAK,KAAK,IAAd,EAAoB;UAChBK,wBAAwB,CAACL,KAAzB,CAA+BA,KAA/B;QACH;;QAED,IAAIC,IAAI,KAAK,IAAb,EAAmB;UACfI,wBAAwB,CAACJ,IAAzB,CAA8BA,IAA9B;QACH;MACJ;;MAEDH,iCAAiC,CAACe,GAAlC,CAAsCT,yBAAtC,EAAiEC,wBAAjE;;MAEA,IAAI,CAACC,wCAAL,EAA+C;QAC3C,MAAMV,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CAAtB;MACH,CAFD,MAEO;QACH,MAAMlB,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CAAvB;MACH;;MAED,MAAMd,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCC,wBAAnC,CAA7B;MAEA,OAAOA,wBAAP;IACH,CAvCD;;IAyCA,OAAO;MACH,IAAIL,KAAJ,CAAUY,KAAV,EAAuB;QACnBZ,KAAK,GAAGY,KAAR;MACH,CAHE;;MAIH,IAAIX,IAAJ,CAASW,KAAT,EAAsB;QAClBX,IAAI,GAAGW,KAAP;MACH,CANE;;MAOHE,MAAM,CACFX,KADE,EAEFC,yBAFE,EAEmD;QAErD,MAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAlC,CAAsCZ,yBAAtC,CAAzC;;QAEA,IAAIW,gCAAgC,KAAKE,SAAzC,EAAoD;UAChD,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;QACH;;QAED,OAAOb,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,CAA/B;MACH;;IAlBE,CAAP;EAoBH,CAnED;AAoEH,CA3EM","names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConstantSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConstantSourceNodeRendererFactoryFactory, TNativeConstantSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConstantSourceNodeRendererFactory: TConstantSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConstantSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConstantSourceNode>();\n\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createConstantSourceNode = async (proxy: IConstantSourceNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode<T, TNativeConstantSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            return nativeConstantSourceNode;\n        };\n\n        return {\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IConstantSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeConstantSourceNode> {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}