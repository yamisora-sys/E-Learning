{"ast":null,"code":"import { isNativeAudioNode } from '../guards/native-audio-node';\n\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n\n  return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return function (outputAudioNodes) {\n    let destinationOrOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    let output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    let input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,6BAAlC;;AAGA,MAAMC,yBAAyB,GAAG,CAC9BC,oBAD8B,EAE9BC,gBAF8B,EAG9BC,MAH8B,KAIZ;EAClB,MAAMC,eAAe,GAAGF,gBAAgB,CAACC,MAAD,CAAxC;;EAEA,IAAIC,eAAe,KAAKC,SAAxB,EAAmC;IAC/B,MAAMJ,oBAAoB,EAA1B;EACH;;EAED,OAAOG,eAAP;AACH,CAZD;;AAcA,OAAO,MAAME,+BAA+B,GAAuCL,oBAAD,IAAyB;EACvG,OAAO,UAACC,gBAAD,EAAqF;IAAA,IAAlEK,mBAAkE,uEAA5CF,SAA4C;IAAA,IAAjCF,MAAiC,uEAAxBE,SAAwB;IAAA,IAAbG,KAAa,uEAAL,CAAK;;IACxF,IAAID,mBAAmB,KAAKF,SAA5B,EAAuC;MACnC,OAAOH,gBAAgB,CAACO,OAAjB,CAA0BL,eAAD,IAAqBA,eAAe,CAACM,UAAhB,EAA9C,CAAP;IACH;;IAED,IAAI,OAAOH,mBAAP,KAA+B,QAAnC,EAA6C;MACzC,OAAOP,yBAAyB,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCK,mBAAzC,CAAzB,CAAuFG,UAAvF,EAAP;IACH;;IAED,IAAIX,iBAAiB,CAACQ,mBAAD,CAArB,EAA4C;MACxC,IAAIJ,MAAM,KAAKE,SAAf,EAA0B;QACtB,OAAOH,gBAAgB,CAACO,OAAjB,CAA0BL,eAAD,IAAqBA,eAAe,CAACM,UAAhB,CAA2BH,mBAA3B,CAA9C,CAAP;MACH;;MAED,IAAIC,KAAK,KAAKH,SAAd,EAAyB;QACrB,OAAOL,yBAAyB,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,MAAzC,CAAzB,CAA0EO,UAA1E,CAAqFH,mBAArF,EAA0G,CAA1G,CAAP;MACH;;MAED,OAAOP,yBAAyB,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,MAAzC,CAAzB,CAA0EO,UAA1E,CAAqFH,mBAArF,EAA0G,CAA1G,EAA6GC,KAA7G,CAAP;IACH;;IAED,IAAIL,MAAM,KAAKE,SAAf,EAA0B;MACtB,OAAOH,gBAAgB,CAACO,OAAjB,CAA0BL,eAAD,IAAqBA,eAAe,CAACM,UAAhB,CAA2BH,mBAA3B,CAA9C,CAAP;IACH;;IAED,OAAOP,yBAAyB,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,MAAzC,CAAzB,CAA0EO,UAA1E,CAAqFH,mBAArF,EAA0G,CAA1G,CAAP;EACH,CA1BD;AA2BH,CA5BM","names":["isNativeAudioNode","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","output","outputAudioNode","undefined","createDisconnectMultipleOutputs","destinationOrOutput","input","forEach","disconnect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\disconnect-multiple-outputs.ts"],"sourcesContent":["import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TDisconnectMultipleOutputsFactory, TIndexSizeErrorFactory, TNativeAudioNode } from '../types';\n\nconst getOutputAudioNodeAtIndex = (\n    createIndexSizeError: TIndexSizeErrorFactory,\n    outputAudioNodes: TNativeAudioNode[],\n    output: number\n): TNativeAudioNode => {\n    const outputAudioNode = outputAudioNodes[output];\n\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n\n    return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs: TDisconnectMultipleOutputsFactory = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n            }\n\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n\n        if (output === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}