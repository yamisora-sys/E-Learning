{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n      }\n\n      return nativeConvolverNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,kCAAkC,GAAyC,CACpFC,yBADoF,EAEpFC,kBAFoF,EAGpFC,uBAHoF,KAIpF;EACA,OAAO,MAAmE;IACtE,MAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;IAEA,MAAMC,mBAAmB,GAAG,OAAOC,KAAP,EAAiCC,yBAAjC,KAA0F;MAClH,IAAIC,mBAAmB,GAAGP,kBAAkB,CAA0BK,KAA1B,CAA5C,CADkH,CAGlH;;MACA,MAAMG,mCAAmC,GAAGX,gBAAgB,CAACU,mBAAD,EAAsBD,yBAAtB,CAA5D;;MAEA,IAAI,CAACE,mCAAL,EAA0C;QACtC,MAAMC,OAAO,GAAG;UACZC,MAAM,EAAEH,mBAAmB,CAACG,MADhB;UAEZC,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;UAGZC,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;UAIZC,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;UAKZC,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;QAL/B,CAAhB;QAQAR,mBAAmB,GAAGR,yBAAyB,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;MACH;;MAEDP,4BAA4B,CAACc,GAA7B,CAAiCV,yBAAjC,EAA4DC,mBAA5D;;MAEA,IAAIX,sBAAsB,CAACW,mBAAD,CAA1B,EAAiD;QAC7C,MAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,CAA7B;MACH,CAFD,MAEO;QACH,MAAMhB,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAnC,CAA7B;MACH;;MAED,OAAOA,mBAAP;IACH,CA3BD;;IA6BA,OAAO;MACHW,MAAM,CAACb,KAAD,EAA2BC,yBAA3B,EAAgF;QAClF,MAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAA7B,CAAiCd,yBAAjC,CAApC;;QAEA,IAAIa,2BAA2B,KAAKE,SAApC,EAA+C;UAC3C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;QACH;;QAED,OAAOf,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,CAA1B;MACH;;IATE,CAAP;EAWH,CA3CD;AA4CH,CAjDM","names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\convolver-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConvolverNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConvolverNodeRendererFactoryFactory, TNativeConvolverNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConvolverNodeRendererFactory: TConvolverNodeRendererFactoryFactory = (\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConvolverNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConvolverNode>();\n\n        const createConvolverNode = async (proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode<T, TNativeConvolverNode>(proxy);\n\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n\n            return nativeConvolverNode;\n        };\n\n        return {\n            render(proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeConvolverNode> {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}