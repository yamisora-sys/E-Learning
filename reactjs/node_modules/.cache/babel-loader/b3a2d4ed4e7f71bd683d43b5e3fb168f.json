{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","AnalyserNode","constructor","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","getByteFrequencyData","array","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\analyser-node-constructor.ts"],"sourcesContent":["import { IAnalyserNode, IAnalyserOptions } from '../interfaces';\nimport { TAnalyserNodeConstructorFactory, TAudioNodeRenderer, TContext, TNativeAnalyserNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n} as const;\n\nexport const createAnalyserNodeConstructor: TAnalyserNodeConstructorFactory = (\n    audionNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class AnalyserNode<T extends TContext> extends audionNodeConstructor<T> implements IAnalyserNode<T> {\n        private _nativeAnalyserNode: TNativeAnalyserNode;\n\n        constructor(context: T, options?: Partial<IAnalyserOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n\n        get fftSize(): number {\n            return this._nativeAnalyserNode.fftSize;\n        }\n\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n\n        get frequencyBinCount(): number {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n\n        get maxDecibels(): number {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n\n            this._nativeAnalyserNode.maxDecibels = value;\n\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get minDecibels(): number {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n\n            this._nativeAnalyserNode.minDecibels = value;\n\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get smoothingTimeConstant(): number {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n\n        public getByteFrequencyData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n\n        public getByteTimeDomainData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n\n        public getFloatFrequencyData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n\n        public getFloatTimeDomainData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}