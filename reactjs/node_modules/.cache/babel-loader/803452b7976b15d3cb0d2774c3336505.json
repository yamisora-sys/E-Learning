{"ast":null,"code":"// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n  const inputLength = input.length;\n  let i = bufferIndex;\n\n  for (let j = 0; j < inputLength; j += 1) {\n    let y = feedforward[0] * input[j];\n\n    for (let k = 1; k < minLength; k += 1) {\n      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n\n    for (let k = minLength; k < feedforwardLength; k += 1) {\n      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    for (let k = minLength; k < feedbackLength; k += 1) {\n      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n    output[j] = y;\n  }\n\n  return i;\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG,CACxBC,QADwB,EAExBC,cAFwB,EAGxBC,WAHwB,EAIxBC,iBAJwB,EAKxBC,SALwB,EAMxBC,OANwB,EAOxBC,OAPwB,EAQxBC,WARwB,EASxBC,YATwB,EAUxBC,KAVwB,EAWxBC,MAXwB,KAYxB;EACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAA1B;EAEA,IAAIC,CAAC,GAAGN,WAAR;;EAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,IAAI,CAAtC,EAAyC;IACrC,IAAIC,CAAC,GAAGb,WAAW,CAAC,CAAD,CAAX,GAAiBO,KAAK,CAACK,CAAD,CAA9B;;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAApB,EAA+BY,CAAC,IAAI,CAApC,EAAuC;MACnC,MAAMC,CAAC,GAAIJ,CAAC,GAAGG,CAAL,GAAWR,YAAY,GAAG,CAApC,CADmC,CACK;;MAExCO,CAAC,IAAIb,WAAW,CAACc,CAAD,CAAX,GAAiBX,OAAO,CAACY,CAAD,CAA7B;MACAF,CAAC,IAAIf,QAAQ,CAACgB,CAAD,CAAR,GAAcV,OAAO,CAACW,CAAD,CAA1B;IACH;;IAED,KAAK,IAAID,CAAC,GAAGZ,SAAb,EAAwBY,CAAC,GAAGb,iBAA5B,EAA+Ca,CAAC,IAAI,CAApD,EAAuD;MACnDD,CAAC,IAAIb,WAAW,CAACc,CAAD,CAAX,GAAiBX,OAAO,CAAEQ,CAAC,GAAGG,CAAL,GAAWR,YAAY,GAAG,CAA3B,CAA7B,CADmD,CACU;IAChE;;IAED,KAAK,IAAIQ,CAAC,GAAGZ,SAAb,EAAwBY,CAAC,GAAGf,cAA5B,EAA4Ce,CAAC,IAAI,CAAjD,EAAoD;MAChDD,CAAC,IAAIf,QAAQ,CAACgB,CAAD,CAAR,GAAcV,OAAO,CAAEO,CAAC,GAAGG,CAAL,GAAWR,YAAY,GAAG,CAA3B,CAA1B,CADgD,CACU;IAC7D;;IAEDH,OAAO,CAACQ,CAAD,CAAP,GAAaJ,KAAK,CAACK,CAAD,CAAlB;IACAR,OAAO,CAACO,CAAD,CAAP,GAAaE,CAAb;IAEAF,CAAC,GAAIA,CAAC,GAAG,CAAL,GAAWL,YAAY,GAAG,CAA9B,CArBqC,CAqBH;;IAElCE,MAAM,CAACI,CAAD,CAAN,GAAYC,CAAZ;EACH;;EAED,OAAOF,CAAP;AACH,CA5CM","names":["filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","input","output","inputLength","length","i","j","y","k","x"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\filter-buffer.ts"],"sourcesContent":["// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (\n    feedback: Float64Array,\n    feedbackLength: number,\n    feedforward: Float64Array,\n    feedforwardLength: number,\n    minLength: number,\n    xBuffer: Float32Array,\n    yBuffer: Float32Array,\n    bufferIndex: number,\n    bufferLength: number,\n    input: Float32Array,\n    output: Float32Array\n) => {\n    const inputLength = input.length;\n\n    let i = bufferIndex;\n\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n        output[j] = y;\n    }\n\n    return i;\n};\n"]},"metadata":{},"sourceType":"module"}