{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      return nativeDynamicsCompressorNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\dynamics-compressor-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDynamicsCompressorNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDynamicsCompressorNodeRendererFactoryFactory, TNativeDynamicsCompressorNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDynamicsCompressorNodeRendererFactory: TDynamicsCompressorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDynamicsCompressorNode>();\n\n        const createDynamicsCompressorNode = async (\n            proxy: IDynamicsCompressorNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode<T, TNativeDynamicsCompressorNode>(proxy);\n\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            return nativeDynamicsCompressorNode;\n        };\n\n        return {\n            render(\n                proxy: IDynamicsCompressorNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeDynamicsCompressorNode> {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}