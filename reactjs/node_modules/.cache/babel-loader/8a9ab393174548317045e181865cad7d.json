{"ast":null,"code":"import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  periodicWave: undefined,\n  type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class OscillatorNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      const nyquist = context.sampleRate / 2;\n      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Safari does not export the correct values for maxValue and minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      this._nativeOscillatorNode = nativeOscillatorNode;\n      this._onended = null;\n      this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeOscillatorNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeOscillatorNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get type() {\n      return this._nativeOscillatorNode.type;\n    }\n\n    set type(value) {\n      this._nativeOscillatorNode.type = value;\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = null;\n      }\n    }\n\n    setPeriodicWave(periodicWave) {\n      this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = periodicWave;\n      }\n    }\n\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this._nativeOscillatorNode.start(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.start = when;\n      }\n\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n\n        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this._nativeOscillatorNode.stop(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","detune","frequency","periodicWave","undefined","type","createOscillatorNodeConstructor","audioNodeConstructor","createAudioParam","createNativeOscillatorNode","createOscillatorNodeRenderer","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","OscillatorNode","constructor","context","options","nativeContext","mergedOptions","nativeOscillatorNode","isOffline","oscillatorNodeRenderer","nyquist","sampleRate","_detune","_frequency","_nativeOscillatorNode","_onended","_oscillatorNodeRenderer","onended","value","wrappedListener","nativeOnEnded","setPeriodicWave","start","when","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-constructor.ts"],"sourcesContent":["import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport {\n    IAudioParam,\n    IAudioScheduledSourceNodeEventMap,\n    IMinimalOfflineAudioContext,\n    IOscillatorNode,\n    IOscillatorNodeRenderer,\n    IOscillatorOptions\n} from '../interfaces';\nimport {\n    TContext,\n    TEventHandler,\n    TNativeOscillatorNode,\n    TOscillatorNodeConstructorFactory,\n    TOscillatorNodeRenderer,\n    TOscillatorType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.\n    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.\n    detune: 0,\n    frequency: 440,\n    periodicWave: undefined,\n    type: 'sine'\n} as const;\n\nexport const createOscillatorNodeConstructor: TOscillatorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class OscillatorNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IOscillatorNode<T>\n    {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _nativeOscillatorNode: TNativeOscillatorNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _oscillatorNodeRenderer: TOscillatorNodeRenderer<T>;\n\n        constructor(context: T, options?: Partial<IOscillatorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = <TOscillatorNodeRenderer<T>>(isOffline ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n\n            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Safari does not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                (<IOscillatorNodeRenderer<IMinimalOfflineAudioContext>>this._oscillatorNodeRenderer).periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeOscillatorNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get type(): TOscillatorType {\n            return this._nativeOscillatorNode.type;\n        }\n\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n\n        public setPeriodicWave(periodicWave: PeriodicWave): void {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n\n        public start(when = 0): void {\n            this._nativeOscillatorNode.start(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeOscillatorNode.stop(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}