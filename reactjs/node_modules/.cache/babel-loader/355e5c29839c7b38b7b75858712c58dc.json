{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode; // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n\n    get orientationX() {\n      return this._orientationX;\n    }\n\n    get orientationY() {\n      return this._orientationY;\n    }\n\n    get orientationZ() {\n      return this._orientationZ;\n    }\n\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n\n    get positionX() {\n      return this._positionX;\n    }\n\n    get positionY() {\n      return this._positionY;\n    }\n\n    get positionZ() {\n      return this._positionZ;\n    }\n\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","PannerNode","constructor","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\panner-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IPannerNode, IPannerOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TContext,\n    TDistanceModelType,\n    TNativePannerNode,\n    TPannerNodeConstructorFactory,\n    TPanningModelType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n} as const;\n\nexport const createPannerNodeConstructor: TPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class PannerNode<T extends TContext> extends audioNodeConstructor<T> implements IPannerNode<T> {\n        private _nativePannerNode: TNativePannerNode;\n\n        private _orientationX: IAudioParam;\n\n        private _orientationY: IAudioParam;\n\n        private _orientationZ: IAudioParam;\n\n        private _positionX: IAudioParam;\n\n        private _positionY: IAudioParam;\n\n        private _positionZ: IAudioParam;\n\n        constructor(context: T, options?: Partial<IPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createPannerNodeRenderer() : null);\n\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get coneInnerAngle(): number {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n\n        get coneOuterAngle(): number {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n\n        get coneOuterGain(): number {\n            return this._nativePannerNode.coneOuterGain;\n        }\n\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n\n        get distanceModel(): TDistanceModelType {\n            return this._nativePannerNode.distanceModel;\n        }\n\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n\n        get maxDistance(): number {\n            return this._nativePannerNode.maxDistance;\n        }\n\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n\n        get orientationX(): IAudioParam {\n            return this._orientationX;\n        }\n\n        get orientationY(): IAudioParam {\n            return this._orientationY;\n        }\n\n        get orientationZ(): IAudioParam {\n            return this._orientationZ;\n        }\n\n        get panningModel(): TPanningModelType {\n            return this._nativePannerNode.panningModel;\n        }\n\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n\n        get positionX(): IAudioParam {\n            return this._positionX;\n        }\n\n        get positionY(): IAudioParam {\n            return this._positionY;\n        }\n\n        get positionZ(): IAudioParam {\n            return this._positionZ;\n        }\n\n        get refDistance(): number {\n            return this._nativePannerNode.refDistance;\n        }\n\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n\n        get rolloffFactor(): number {\n            return this._nativePannerNode.rolloffFactor;\n        }\n\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}