{"ast":null,"code":"export const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  const {\n    port1\n  } = new MessageChannel();\n\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wCAAwC,GAAIC,uBAAD,IAA4D;EAChH,MAAM;IAAEC;EAAF,IAAY,IAAIC,cAAJ,EAAlB;;EAEA,IAAI;IACA;IACAD,KAAK,CAACE,WAAN,CAAkBH,uBAAlB;EACH,CAHD,SAGU;IACNC,KAAK,CAACG,KAAN;EACH;AACJ,CATM","names":["testClonabilityOfAudioWorkletNodeOptions","audioWorkletNodeOptions","port1","MessageChannel","postMessage","close"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\test-clonability-of-audio-worklet-node-options.ts"],"sourcesContent":["import { IAudioWorkletNodeOptions } from '../interfaces';\n\nexport const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions: IAudioWorkletNodeOptions): void => {\n    const { port1 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}