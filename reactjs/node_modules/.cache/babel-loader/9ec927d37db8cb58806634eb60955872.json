{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      let nativeAudioContext;\n\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      } // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Safari does not support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext; // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n\n          this._nativeGainNode.disconnect();\n\n          this._nativeOscillatorNode.disconnect();\n        }\n\n        deactivateAudioGraph(this);\n      });\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["deactivateAudioGraph","isValidLatencyHint","createMinimalAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","minimalBaseAudioContextConstructor","nativeAudioContextConstructor","MinimalAudioContext","constructor","options","Error","nativeAudioContext","err","code","message","latencyHint","TypeError","sampleRate","undefined","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","name","_nativeGainNode","createGain","_nativeOscillatorNode","createOscillator","gain","value","connect","destination","start","_state","state","revokeState","removeEventListener","addEventListener","close","then","stop","disconnect","resume","Promise","resolve","reject","resolvePromise","catch","suspend"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\minimal-audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nimport { IAudioContextOptions, IMinimalAudioContext } from '../interfaces';\nimport {\n    TAudioContextState,\n    TMinimalAudioContextConstructorFactory,\n    TNativeAudioContext,\n    TNativeGainNode,\n    TNativeOscillatorNode\n} from '../types';\n\nexport const createMinimalAudioContextConstructor: TMinimalAudioContextConstructorFactory = (\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor<IMinimalAudioContext> implements IMinimalAudioContext {\n        private _baseLatency: number;\n\n        private _nativeAudioContext: TNativeAudioContext;\n\n        private _nativeGainNode: null | TNativeGainNode;\n\n        private _nativeOscillatorNode: null | TNativeOscillatorNode;\n\n        private _state: null | 'suspended';\n\n        constructor(options: IAudioContextOptions = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n\n            let nativeAudioContext: TNativeAudioContext;\n\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            } catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(\n                    `The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`\n                );\n            }\n\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n\n            super(nativeAudioContext, 2);\n\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                    ? 512 / sampleRate\n                    : latencyHint === 'interactive' || latencyHint === undefined\n                    ? 256 / sampleRate\n                    : latencyHint === 'playback'\n                    ? 1024 / sampleRate\n                    : /*\n                       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                       * ScriptProcessorNode.\n                       */\n                      (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n\n                this._nativeGainNode.gain.value = 1e-37;\n\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            } else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n\n            this._state = null;\n\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n\n        get baseLatency(): number {\n            return this._baseLatency;\n        }\n\n        get state(): TAudioContextState {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n\n        public close(): Promise<void> {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        public resume(): Promise<void> {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        } else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n\n        public suspend(): Promise<void> {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}