{"ast":null,"code":"export const testAudioWorkletNodeOptionsClonability = audioWorkletNodeOptions => {\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n    port2.close();\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,sCAAsC,GAAqDC,uBAAD,IAA4B;EAC/H,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAmB,IAAIC,cAAJ,EAAzB;;EAEA,IAAI;IACA;IACAF,KAAK,CAACG,WAAN,CAAkBJ,uBAAlB;EACH,CAHD,SAGU;IACNC,KAAK,CAACI,KAAN;IACAH,KAAK,CAACG,KAAN;EACH;AACJ,CAVM","names":["testAudioWorkletNodeOptionsClonability","audioWorkletNodeOptions","port1","port2","MessageChannel","postMessage","close"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\test-audio-worklet-node-options-clonability.ts"],"sourcesContent":["import { TTestAudioWorkletNodeOptionsClonabilityFunction } from '../types';\n\nexport const testAudioWorkletNodeOptionsClonability: TTestAudioWorkletNodeOptionsClonabilityFunction = (audioWorkletNodeOptions) => {\n    const { port1, port2 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n        port2.close();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}