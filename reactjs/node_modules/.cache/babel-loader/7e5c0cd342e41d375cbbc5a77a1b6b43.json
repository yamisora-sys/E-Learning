{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(this, 0.006);\n    }\n\n    get attack() {\n      return this._attack;\n    } // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n\n\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n\n\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n\n    get knee() {\n      return this._knee;\n    }\n\n    get ratio() {\n      return this._ratio;\n    }\n\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n\n    get release() {\n      return this._release;\n    }\n\n    get threshold() {\n      return this._threshold;\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","DynamicsCompressorNode","constructor","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\dynamics-compressor-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IDynamicsCompressorNode, IDynamicsCompressorOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TDynamicsCompressorNodeConstructorFactory,\n    TNativeAudioParam,\n    TNativeDynamicsCompressorNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n} as const;\n\nexport const createDynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DynamicsCompressorNode<T extends TContext> extends audioNodeConstructor<T> implements IDynamicsCompressorNode<T> {\n        private _attack: IAudioParam;\n\n        private _knee: IAudioParam;\n\n        private _nativeDynamicsCompressorNode: TNativeDynamicsCompressorNode;\n\n        private _ratio: IAudioParam;\n\n        private _release: IAudioParam;\n\n        private _threshold: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDynamicsCompressorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDynamicsCompressorNodeRenderer() : null);\n\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n\n            setAudioNodeTailTime(this, 0.006);\n        }\n\n        get attack(): IAudioParam {\n            return this._attack;\n        }\n\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount(): number {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n\n            this._nativeDynamicsCompressorNode.channelCount = value;\n\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        /*\n         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        get knee(): IAudioParam {\n            return this._knee;\n        }\n\n        get ratio(): IAudioParam {\n            return this._ratio;\n        }\n\n        get reduction(): number {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value === 'number') {\n                return (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value;\n            }\n\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n\n        get release(): IAudioParam {\n            return this._release;\n        }\n\n        get threshold(): IAudioParam {\n            return this._threshold;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}