{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = null;\n      let nativePannerNode = getNativeAudioNode(proxy);\n      const commonAudioNodeOptions = {\n        channelCount: nativePannerNode.channelCount,\n        channelCountMode: nativePannerNode.channelCountMode,\n        channelInterpretation: nativePannerNode.channelInterpretation\n      };\n      const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,\n        coneInnerAngle: nativePannerNode.coneInnerAngle,\n        coneOuterAngle: nativePannerNode.coneOuterAngle,\n        coneOuterGain: nativePannerNode.coneOuterGain,\n        distanceModel: nativePannerNode.distanceModel,\n        maxDistance: nativePannerNode.maxDistance,\n        panningModel: nativePannerNode.panningModel,\n        refDistance: nativePannerNode.refDistance,\n        rolloffFactor: nativePannerNode.rolloffFactor\n      }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n\n      if ('bufferSize' in nativePannerNode) {\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n      } else if (!nativePannerNodeIsOwnedByContext) {\n        const options = { ...commonNativePannerNodeOptions,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n      if (nativeGainNode !== null) {\n        if (renderedBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n          });\n          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n          renderedBufferPromise = (async () => {\n            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {\n              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: index === 0 ? 1 : 0\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n              return nativeConstantSourceNode;\n            }));\n\n            for (let i = 0; i < 6; i += 1) {\n              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n              nativeConstantSourceNodes[i].start(0);\n            }\n\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          })();\n        }\n\n        const renderedBuffer = await renderedBufferPromise;\n        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n        const channelDatas = [];\n\n        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n          channelDatas.push(renderedBuffer.getChannelData(i));\n        }\n\n        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n          orientationX: lastOrientation[0],\n          orientationY: lastOrientation[1],\n          orientationZ: lastOrientation[2],\n          positionX: lastPosition[0],\n          positionY: lastPosition[1],\n          positionZ: lastPosition[2]\n        });\n        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n        partialPannerNode.connect(nativeGainNode);\n\n        for (let i = 128; i < renderedBuffer.length; i += 128) {\n          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n            lastOrientation = orientation;\n            lastPosition = positon;\n            const currentTime = i / nativeOfflineAudioContext.sampleRate;\n            gateGainNode.gain.setValueAtTime(0, currentTime);\n            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n              gain: 0\n            });\n            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n              orientationX: lastOrientation[0],\n              orientationY: lastOrientation[1],\n              orientationZ: lastOrientation[2],\n              positionX: lastPosition[0],\n              positionY: lastPosition[1],\n              positionZ: lastPosition[2]\n            });\n            gateGainNode.gain.setValueAtTime(1, currentTime);\n            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n            partialPannerNode.connect(nativeGainNode);\n          }\n        }\n\n        return nativeGainNode;\n      }\n\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      }\n\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n      }\n\n      return nativePannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","nativeConstantSourceNodes","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, INativePannerNodeFaker, IOfflineAudioContext, IPannerNode } from '../interfaces';\nimport {\n    TNativeAudioBuffer,\n    TNativeGainNode,\n    TNativeOfflineAudioContext,\n    TNativePannerNode,\n    TPannerNodeRendererFactoryFactory\n} from '../types';\n\nexport const createPannerNodeRendererFactory: TPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode | TNativePannerNode>();\n\n        let renderedBufferPromise: null | Promise<TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode: null | TNativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode<T, TNativePannerNode>(proxy);\n\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            } else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        6,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all(\n                            [\n                                proxy.orientationX,\n                                proxy.orientationY,\n                                proxy.orientationZ,\n                                proxy.positionX,\n                                proxy.positionY,\n                                proxy.positionZ\n                            ].map(async (audioParam, index) => {\n                                const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: index === 0 ? 1 : 0\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n\n                                return nativeConstantSourceNode;\n                            })\n                        );\n\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n\n                const channelDatas: Float32Array[] = [];\n\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n\n                inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation: [number, number, number] = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon: [number, number, number] = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n                    if (\n                        orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])\n                    ) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n\n                        inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n\n                return nativeGainNode;\n            }\n\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n\n            return nativePannerNode;\n        };\n\n        return {\n            render(\n                proxy: IPannerNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeGainNode | TNativePannerNode> {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}