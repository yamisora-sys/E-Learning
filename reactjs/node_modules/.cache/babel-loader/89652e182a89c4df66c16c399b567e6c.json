{"ast":null,"code":"export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n  if (typeof audioBuffer.copyToChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n    } // Bug #5: Safari does not support copyToChannel().\n\n  } else {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n    }\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAG,CACzBC,WADyB,EAEzBC,MAFyB,EAGzBC,GAHyB,EAIzBC,aAJyB,EAKzBC,YALyB,KAMnB;EACN,IAAI,OAAOJ,WAAW,CAACD,aAAnB,KAAqC,UAAzC,EAAqD;IACjD;IACA,IAAIE,MAAM,CAACC,GAAD,CAAN,CAAYG,UAAZ,KAA2B,CAA/B,EAAkC;MAC9BL,WAAW,CAACD,aAAZ,CAA0BE,MAAM,CAACC,GAAD,CAAhC,EAAuCC,aAAvC,EAAsDC,YAAtD;IACH,CAJgD,CAMjD;;EACH,CAPD,MAOO;IACH;IACA,IAAIH,MAAM,CAACC,GAAD,CAAN,CAAYG,UAAZ,KAA2B,CAA/B,EAAkC;MAC9BL,WAAW,CAACM,cAAZ,CAA2BH,aAA3B,EAA0CI,GAA1C,CAA8CN,MAAM,CAACC,GAAD,CAApD,EAA2DE,YAA3D;IACH;EACJ;AACJ,CApBM","names":["copyToChannel","audioBuffer","parent","key","channelNumber","bufferOffset","byteLength","getChannelData","set"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\copy-to-channel.ts"],"sourcesContent":["import { TNativeAudioBuffer } from '../types';\n\nexport const copyToChannel = (\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: number]: Float32Array },\n    key: number,\n    channelNumber: number,\n    bufferOffset: number\n): void => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n\n        // Bug #5: Safari does not support copyToChannel().\n    } else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}