{"ast":null,"code":"export const createMidiOutputs = wrapSubscribeFunction => {\n  return midiAccess => wrapSubscribeFunction(observer => {\n    let midiOutputs = Array.from(midiAccess.outputs.values());\n\n    const emitMidiOutputs = () => {\n      const midiAccessOutputs = midiAccess.outputs;\n\n      if (midiOutputs.length !== midiAccessOutputs.size || midiOutputs.some(_ref => {\n        let {\n          id\n        } = _ref;\n        return !midiAccessOutputs.has(id);\n      })) {\n        midiOutputs = Array.from(midiAccessOutputs.values());\n        observer.next(midiOutputs);\n      }\n    };\n\n    observer.next(midiOutputs);\n    midiAccess.addEventListener('statechange', emitMidiOutputs);\n    return () => midiAccess.removeEventListener('statechange', emitMidiOutputs);\n  });\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAyBC,qBAAD,IAA0B;EAC5E,OAAQC,UAAD,IACHD,qBAAqB,CAAEE,QAAD,IAAa;IAC/B,IAAIC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWJ,UAAU,CAACK,OAAX,CAAmBC,MAAnB,EAAX,CAAlB;;IAEA,MAAMC,eAAe,GAAG,MAAK;MACzB,MAAMC,iBAAiB,GAAGR,UAAU,CAACK,OAArC;;MAEA,IAAIH,WAAW,CAACO,MAAZ,KAAuBD,iBAAiB,CAACE,IAAzC,IAAiDR,WAAW,CAACS,IAAZ,CAAiB;QAAA,IAAC;UAAEC;QAAF,CAAD;QAAA,OAAY,CAACJ,iBAAiB,CAACK,GAAlB,CAAsBD,EAAtB,CAAb;MAAA,CAAjB,CAArD,EAA+G;QAC3GV,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWI,iBAAiB,CAACF,MAAlB,EAAX,CAAd;QAEAL,QAAQ,CAACa,IAAT,CAAcZ,WAAd;MACH;IACJ,CARD;;IAUAD,QAAQ,CAACa,IAAT,CAAcZ,WAAd;IACAF,UAAU,CAACe,gBAAX,CAA4B,aAA5B,EAA2CR,eAA3C;IAEA,OAAO,MAAMP,UAAU,CAACgB,mBAAX,CAA+B,aAA/B,EAA8CT,eAA9C,CAAb;EACH,CAjBoB,CADzB;AAmBH,CApBM","names":["createMidiOutputs","wrapSubscribeFunction","midiAccess","observer","midiOutputs","Array","from","outputs","values","emitMidiOutputs","midiAccessOutputs","length","size","some","id","has","next","addEventListener","removeEventListener"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\subscribable-things\\src\\factories\\midi-outputs.ts"],"sourcesContent":["import { TMidiOutputsFactory } from '../types';\n\nexport const createMidiOutputs: TMidiOutputsFactory = (wrapSubscribeFunction) => {\n    return (midiAccess) =>\n        wrapSubscribeFunction((observer) => {\n            let midiOutputs = Array.from(midiAccess.outputs.values());\n\n            const emitMidiOutputs = () => {\n                const midiAccessOutputs = midiAccess.outputs;\n\n                if (midiOutputs.length !== midiAccessOutputs.size || midiOutputs.some(({ id }) => !midiAccessOutputs.has(id))) {\n                    midiOutputs = Array.from(midiAccessOutputs.values());\n\n                    observer.next(midiOutputs);\n                }\n            };\n\n            observer.next(midiOutputs);\n            midiAccess.addEventListener('statechange', emitMidiOutputs);\n\n            return () => midiAccess.removeEventListener('statechange', emitMidiOutputs);\n        });\n};\n"]},"metadata":{},"sourceType":"module"}