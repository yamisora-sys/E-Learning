{"ast":null,"code":"import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {\n  const {\n    activeInputs\n  } = getAudioNodeConnections(audioNode);\n  activeInputs.forEach(connections => connections.forEach(_ref => {\n    let [source] = _ref;\n\n    if (!trace.includes(audioNode)) {\n      deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n    }\n  }));\n  const audioParams = isAudioBufferSourceNode(audioNode) ? [// Bug #149: Safari does not yet support the detune AudioParam.\n  audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n\n  for (const audioParam of audioParams) {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n\n    if (audioParamConnections !== undefined) {\n      audioParamConnections.activeInputs.forEach(_ref2 => {\n        let [source] = _ref2;\n        return deactivateActiveAudioNodeInputConnections(source, trace);\n      });\n    }\n  }\n\n  if (isActiveAudioNode(audioNode)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,uBAAT,QAAwC,oCAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAGA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AAEA,OAAO,MAAMC,yCAAyC,GAAG,CACrDC,SADqD,EAErDC,KAFqD,KAGrD;EACA,MAAM;IAAEC;EAAF,IAAmBP,uBAAuB,CAACK,SAAD,CAAhD;EAEAE,YAAY,CAACC,OAAb,CAAsBC,WAAD,IACjBA,WAAW,CAACD,OAAZ,CAAoB,QAAa;IAAA,IAAZ,CAACE,MAAD,CAAY;;IAC7B,IAAI,CAACJ,KAAK,CAACK,QAAN,CAAeN,SAAf,CAAL,EAAgC;MAC5BD,yCAAyC,CAACM,MAAD,EAAS,CAAC,GAAGJ,KAAJ,EAAWD,SAAX,CAAT,CAAzC;IACH;EACJ,CAJD,CADJ;EAQA,MAAMO,WAAW,GAAGnB,uBAAuB,CAACY,SAAD,CAAvB,GACd,CACI;EACAA,SAAS,CAACQ,YAFd,CADc,GAKdnB,kBAAkB,CAACW,SAAD,CAAlB,GACAS,KAAK,CAACC,IAAN,CAAWV,SAAS,CAACW,UAAV,CAAqBC,MAArB,EAAX,CADA,GAEAtB,kBAAkB,CAACU,SAAD,CAAlB,GACA,CAACA,SAAS,CAACa,CAAX,EAAcb,SAAS,CAACc,MAAxB,EAAgCd,SAAS,CAACe,SAA1C,EAAqDf,SAAS,CAACgB,IAA/D,CADA,GAEAzB,oBAAoB,CAACS,SAAD,CAApB,GACA,CAACA,SAAS,CAACiB,MAAX,CADA,GAEAzB,UAAU,CAACQ,SAAD,CAAV,GACA,CAACA,SAAS,CAACgB,IAAX,CADA,GAEAvB,gBAAgB,CAACO,SAAD,CAAhB,GACA,CAACA,SAAS,CAACc,MAAX,EAAmBd,SAAS,CAACe,SAA7B,CADA,GAEArB,kBAAkB,CAACM,SAAD,CAAlB,GACA,CAACA,SAAS,CAACkB,GAAX,CADA,GAEA,EAjBN;;EAmBA,KAAK,MAAMC,UAAX,IAAyBZ,WAAzB,EAAsC;IAClC,MAAMa,qBAAqB,GAAGxB,wBAAwB,CAAIuB,UAAJ,CAAtD;;IAEA,IAAIC,qBAAqB,KAAKC,SAA9B,EAAyC;MACrCD,qBAAqB,CAAClB,YAAtB,CAAmCC,OAAnC,CAA2C;QAAA,IAAC,CAACE,MAAD,CAAD;QAAA,OAAcN,yCAAyC,CAACM,MAAD,EAASJ,KAAT,CAAvD;MAAA,CAA3C;IACH;EACJ;;EAED,IAAIJ,iBAAiB,CAACG,SAAD,CAArB,EAAkC;IAC9BF,yBAAyB,CAACE,SAAD,CAAzB;EACH;AACJ,CA5CM","names":["isAudioBufferSourceNode","isAudioWorkletNode","isBiquadFilterNode","isConstantSourceNode","isGainNode","isOscillatorNode","isStereoPannerNode","getAudioNodeConnections","getAudioParamConnections","isActiveAudioNode","setInternalStateToPassive","deactivateActiveAudioNodeInputConnections","audioNode","trace","activeInputs","forEach","connections","source","includes","audioParams","playbackRate","Array","from","parameters","values","Q","detune","frequency","gain","offset","pan","audioParam","audioParamConnections","undefined"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\deactivate-active-audio-node-input-connections.ts"],"sourcesContent":["import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n\nexport const deactivateActiveAudioNodeInputConnections = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    trace: readonly IAudioNode<T>[]\n) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n\n    activeInputs.forEach((connections) =>\n        connections.forEach(([source]) => {\n            if (!trace.includes(audioNode)) {\n                deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n            }\n        })\n    );\n\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n              // Bug #149: Safari does not yet support the detune AudioParam.\n              audioNode.playbackRate\n          ]\n        : isAudioWorkletNode(audioNode)\n        ? Array.from(audioNode.parameters.values())\n        : isBiquadFilterNode(audioNode)\n        ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n        : isConstantSourceNode(audioNode)\n        ? [audioNode.offset]\n        : isGainNode(audioNode)\n        ? [audioNode.gain]\n        : isOscillatorNode(audioNode)\n        ? [audioNode.detune, audioNode.frequency]\n        : isStereoPannerNode(audioNode)\n        ? [audioNode.pan]\n        : [];\n\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}