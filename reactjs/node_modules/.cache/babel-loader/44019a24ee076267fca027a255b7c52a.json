{"ast":null,"code":"import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n        const patchedEventListeners = new Map();\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n\n              onprocessorerror = typeof value === 'function' ? value : null;\n\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    // Bug #178: Chrome and Edge do fire an event of type error.\n                    if (event.type === 'error') {\n                      Object.defineProperties(event, {\n                        type: {\n                          value: 'processorerror'\n                        }\n                      });\n                      unpatchedEventListener(event);\n                    } else {\n                      unpatchedEventListener(new ErrorEvent(args[0], { ...event\n                      }));\n                    }\n                  };\n\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            } // Bug #178: Chrome and Edge do fire an event of type error.\n\n\n            addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return addEventListener.call(nativeAudioWorkletNode, ...args);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            } // Bug #178: Chrome and Edge do fire an event of type error.\n\n\n            removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n         * has an output.\n         */\n\n\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n          const whenConnected = () => nativeGainNode.disconnect();\n\n          const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n\n\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      }\n    } // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n\n\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","map":{"version":3,"mappings":"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","names":["testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","createInvalidStateError","createNativeAudioWorkletNodeFaker","createNativeGainNode","createNotSupportedError","monitorConnections","nativeContext","baseLatency","nativeAudioWorkletNodeConstructor","name","processorConstructor","options","nativeAudioWorkletNode","patchedEventListeners","Map","onprocessorerror","Object","defineProperties","channelCount","get","set","channelCountMode","value","removeEventListener","addEventListener","args","unpatchedEventListener","handleEvent","patchedEventListener","undefined","event","type","ErrorEvent","call","delete","numberOfOutputs","nativeGainNode","channelInterpretation","gain","connect","destination","whenConnected","disconnect","whenDisconnected","err","code"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\native-audio-worklet-node-factory.ts"],"sourcesContent":["import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nimport { TNativeAudioWorkletNode, TNativeAudioWorkletNodeFactoryFactory, TNativeAudioWorkletNodeOptions } from '../types';\n\nexport const createNativeAudioWorkletNodeFactory: TNativeAudioWorkletNodeFactoryFactory = (\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(\n                    nativeContext,\n                    name,\n                    <TNativeAudioWorkletNodeOptions>options\n                );\n                const patchedEventListeners: Map<\n                    EventListenerOrEventListenerObject,\n                    NonNullable<TNativeAudioWorkletNode['onprocessorerror']>\n                > = new Map();\n\n                let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n\n                            onprocessorerror = typeof value === 'function' ? value : null;\n\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener =\n                                typeof args[1] === 'function'\n                                    ? args[1]\n                                    : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                                    ? args[1].handleEvent\n                                    : null;\n\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                } else {\n                                    args[1] = (event: Event) => {\n                                        // Bug #178: Chrome and Edge do fire an event of type error.\n                                        if (event.type === 'error') {\n                                            Object.defineProperties(event, {\n                                                type: { value: 'processorerror' }\n                                            });\n\n                                            unpatchedEventListener(event);\n                                        } else {\n                                            unpatchedEventListener(new ErrorEvent(args[0], { ...event }));\n                                        }\n                                    };\n\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return addEventListener.call(nativeAudioWorkletNode, ...args);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args: any[]): void => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n\n                                args[1] = patchedEventListener;\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n\n                /*\n                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n                 * has an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        gain: 0\n                    });\n\n                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n\n                return nativeAudioWorkletNode;\n            } catch (err) {\n                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n        }\n\n        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n\n        testClonabilityOfAudioWorkletNodeOptions(options);\n\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}