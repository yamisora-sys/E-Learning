{"ast":null,"code":"export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Safari does not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Safari does not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,uCAAuC,GAA8C,CAC9FC,oBAD8F,EAE9FC,kBAF8F,KAG9F;EACA,OAAO,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,iCAA9B,KAAmE;IACtE,MAAMC,0BAA0B,GAAGH,aAAa,CAACI,WAAjD,CADsE,CAGtE;;IACA,IAAID,0BAA0B,CAACF,YAA3B,KAA4CA,YAAhD,EAA8D;MAC1D,IAAI;QACAE,0BAA0B,CAACF,YAA3B,GAA0CA,YAA1C;MACH,CAFD,CAEE,MAAM,CACJ;MACH;IACJ,CAVqE,CAYtE;;;IACA,IAAIC,iCAAiC,IAAIC,0BAA0B,CAACE,gBAA3B,KAAgD,UAAzF,EAAqG;MACjGF,0BAA0B,CAACE,gBAA3B,GAA8C,UAA9C;IACH,CAfqE,CAiBtE;;;IACA,IAAIF,0BAA0B,CAACG,eAA3B,KAA+C,CAAnD,EAAsD;MAClDC,MAAM,CAACC,cAAP,CAAsBL,0BAAtB,EAAkD,iBAAlD,EAAqE;QACjEM,KAAK,EAAER;MAD0D,CAArE;IAGH,CAtBqE,CAwBtE;;;IACA,MAAMS,QAAQ,GAAGZ,oBAAoB,CAACE,aAAD,EAAgB;MACjDC,YADiD;MAEjDI,gBAAgB,EAAEF,0BAA0B,CAACE,gBAFI;MAGjDM,qBAAqB,EAAER,0BAA0B,CAACQ,qBAHD;MAIjDC,IAAI,EAAE;IAJ2C,CAAhB,CAArC;IAOAb,kBAAkB,CACdW,QADc,EAEd,cAFc,EAGbG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAHD,EAIbK,GAAD,IAAUN,KAAD,IAAU;MACfM,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;;MAEA,IAAI;QACAN,0BAA0B,CAACF,YAA3B,GAA0CQ,KAA1C;MACH,CAFD,CAEE,OAAOO,GAAP,EAAY;QACV;QACA,IAAIP,KAAK,GAAGN,0BAA0B,CAACG,eAAvC,EAAwD;UACpD,MAAMU,GAAN;QACH;MACJ;IACJ,CAfa,CAAlB;IAkBAjB,kBAAkB,CACdW,QADc,EAEd,kBAFc,EAGbG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAHD,EAIbK,GAAD,IAAUN,KAAD,IAAU;MACfM,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;MACAN,0BAA0B,CAACE,gBAA3B,GAA8CI,KAA9C;IACH,CAPa,CAAlB;IAUAV,kBAAkB,CACdW,QADc,EAEd,uBAFc,EAGbG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAHD,EAIbK,GAAD,IAAUN,KAAD,IAAU;MACfM,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;MACAN,0BAA0B,CAACQ,qBAA3B,GAAmDF,KAAnD;IACH,CAPa,CAAlB;IAUAF,MAAM,CAACC,cAAP,CAAsBE,QAAtB,EAAgC,iBAAhC,EAAmD;MAC/CG,GAAG,EAAE,MAAMV,0BAA0B,CAACG;IADS,CAAnD,EAtEsE,CA0EtE;;IACAI,QAAQ,CAACO,OAAT,CAAiBd,0BAAjB;IAEA,OAA8FO,QAA9F;EACH,CA9ED;AA+EH,CAnFM","names":["createNativeAudioDestinationNodeFactory","createNativeGainNode","overwriteAccessors","nativeContext","channelCount","isNodeOfNativeOfflineAudioContext","nativeAudioDestinationNode","destination","channelCountMode","maxChannelCount","Object","defineProperty","value","gainNode","channelInterpretation","gain","get","call","set","err","connect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\native-audio-destination-node.ts"],"sourcesContent":["import { TNativeAudioDestinationNode, TNativeAudioDestinationNodeFactoryFactory, TNativeGainNode } from '../types';\n\nexport const createNativeAudioDestinationNodeFactory: TNativeAudioDestinationNodeFactoryFactory = (\n    createNativeGainNode,\n    overwriteAccessors\n) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            } catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n\n        overwriteAccessors(\n            gainNode,\n            'channelCount',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n\n                try {\n                    nativeAudioDestinationNode.channelCount = value;\n                } catch (err) {\n                    // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                    if (value > nativeAudioDestinationNode.maxChannelCount) {\n                        throw err;\n                    }\n                }\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelCountMode',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelCountMode = value;\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelInterpretation',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelInterpretation = value;\n            }\n        );\n\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n\n        return <{ maxChannelCount: TNativeAudioDestinationNode['maxChannelCount'] } & TNativeGainNode>gainNode;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}