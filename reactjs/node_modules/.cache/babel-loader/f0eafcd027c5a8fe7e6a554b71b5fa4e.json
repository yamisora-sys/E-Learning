{"ast":null,"code":"import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = contextStore => {\n  return context => {\n    const nativeContext = contextStore.get(context);\n\n    if (nativeContext === undefined) {\n      throw createInvalidStateError();\n    }\n\n    return nativeContext;\n  };\n};","map":{"version":3,"mappings":"AAEA,SAASA,uBAAT,QAAwC,uBAAxC;AAEA,OAAO,MAAMC,sBAAsB,GAA8BC,YAAD,IAAiB;EAC7E,OACIC,OADG,IAE8G;IACjH,MAAMC,aAAa,GAAGF,YAAY,CAACG,GAAb,CAAiBF,OAAjB,CAAtB;;IAEA,IAAIC,aAAa,KAAKE,SAAtB,EAAiC;MAC7B,MAAMN,uBAAuB,EAA7B;IACH;;IAED,OACII,aADJ;EAGH,CAZD;AAaH,CAdM","names":["createInvalidStateError","createGetNativeContext","contextStore","context","nativeContext","get","undefined"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\get-native-context.ts"],"sourcesContent":["import { IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TContext, TGetNativeContextFactory, TNativeAudioContext, TNativeOfflineAudioContext } from '../types';\nimport { createInvalidStateError } from './invalid-state-error';\n\nexport const createGetNativeContext: TGetNativeContextFactory = (contextStore) => {\n    return <T extends TContext>(\n        context: T\n    ): T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext => {\n        const nativeContext = contextStore.get(context);\n\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n\n        return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext>(\n            nativeContext\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module"}