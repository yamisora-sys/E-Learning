{"ast":null,"code":"export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  const renderedNativeAudioDestinationNodes = new WeakMap();\n\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n    return nativeAudioDestinationNode;\n  };\n\n  return {\n    render(proxy, nativeOfflineAudioContext) {\n      const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAQA,OAAO,MAAMA,kCAAkC,GAG3CC,uBAHoF,IAIpF;EACA,MAAMC,mCAAmC,GAAG,IAAIC,OAAJ,EAA5C;;EAEA,MAAMC,0BAA0B,GAAG,OAAOC,KAAP,EAAwCC,yBAAxC,KAAiG;IAChI,MAAMC,0BAA0B,GAAGD,yBAAyB,CAACE,WAA7D;IAEAN,mCAAmC,CAACO,GAApC,CAAwCH,yBAAxC,EAAmEC,0BAAnE;IAEA,MAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,0BAAnC,CAA7B;IAEA,OAAOA,0BAAP;EACH,CARD;;EAUA,OAAO;IACHG,MAAM,CACFL,KADE,EAEFC,yBAFE,EAEmD;MAErD,MAAMK,kCAAkC,GAAGT,mCAAmC,CAACU,GAApC,CAAwCN,yBAAxC,CAA3C;;MAEA,IAAIK,kCAAkC,KAAKE,SAA3C,EAAsD;QAClD,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,kCAAhB,CAAP;MACH;;MAED,OAAOP,0BAA0B,CAACC,KAAD,EAAQC,yBAAR,CAAjC;IACH;;EAZE,CAAP;AAcH,CA/BM","names":["createAudioDestinationNodeRenderer","renderInputsOfAudioNode","renderedNativeAudioDestinationNodes","WeakMap","createAudioDestinationNode","proxy","nativeOfflineAudioContext","nativeAudioDestinationNode","destination","set","render","renderedNativeAudioDestinationNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\audio-destination-node-renderer-factory.ts"],"sourcesContent":["import { IAudioDestinationNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TAudioDestinationNodeRendererFactory,\n    TNativeAudioDestinationNode,\n    TNativeOfflineAudioContext,\n    TRenderInputsOfAudioNodeFunction\n} from '../types';\n\nexport const createAudioDestinationNodeRenderer: TAudioDestinationNodeRendererFactory = <\n    T extends IMinimalOfflineAudioContext | IOfflineAudioContext\n>(\n    renderInputsOfAudioNode: TRenderInputsOfAudioNodeFunction\n) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioDestinationNode>();\n\n    const createAudioDestinationNode = async (proxy: IAudioDestinationNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        return nativeAudioDestinationNode;\n    };\n\n    return {\n        render(\n            proxy: IAudioDestinationNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ): Promise<TNativeAudioDestinationNode> {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}