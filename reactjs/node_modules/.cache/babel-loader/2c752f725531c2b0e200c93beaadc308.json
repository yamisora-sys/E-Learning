{"ast":null,"code":"/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      let isPending = true;\n\n      const resolvePromise = err => {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n\n      let promise; // Bug #26: Safari throws a synchronous error.\n\n      try {\n        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, () => {// Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      } // Bug #21: Safari does not support promises yet.\n\n\n      if (promise !== undefined) {\n        // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};","map":{"version":3,"mappings":"AAEA;;;;AAIA,OAAO,MAAMA,2DAA2D,GACpEC,oCADsI,IAEtI;EACA,OAAO,MAAK;IACR,IAAIA,oCAAoC,KAAK,IAA7C,EAAmD;MAC/C,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;IACH;;IAED,MAAMC,mBAAmB,GAAG,IAAIH,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B,CALQ,CAOR;;IACA,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY;MAC3B,IAAIE,SAAS,GAAG,IAAhB;;MAEA,MAAMC,cAAc,GAAIC,GAAD,IAAe;QAClC,IAAIF,SAAJ,EAAe;UACXA,SAAS,GAAG,KAAZ;UAEAD,mBAAmB,CAACI,cAApB;UAEAL,OAAO,CAACI,GAAG,YAAYE,SAAhB,CAAP;QACH;MACJ,CARD;;MAUA,IAAIC,OAAJ,CAb2B,CAe3B;;MACA,IAAI;QACAA,OAAO,GAAGN,mBAAmB,CACzB;QADyB,CAExBO,eAFK,CAGG,IAHH,EAIF,MAAK,CACD;QACH,CANC,EAOFL,cAPE,CAAV;MASH,CAVD,CAUE,OAAOC,GAAP,EAAY;QACVD,cAAc,CAACC,GAAD,CAAd;MACH,CA5B0B,CA8B3B;;;MACA,IAAIG,OAAO,KAAKE,SAAhB,EAA2B;QACvB;QACAF,OAAO,CAACG,KAAR,CAAcP,cAAd;MACH;IACJ,CAnCM,CAAP;EAoCH,CA5CD;AA6CH,CAhDM","names":["createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","nativeOfflineAudioContextConstructor","Promise","resolve","offlineAudioContext","isPending","resolvePromise","err","startRendering","TypeError","promise","decodeAudioData","undefined","catch"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\test-audio-context-decode-audio-data-method-type-error-support.ts"],"sourcesContent":["import { TTestAudioContextDecodeAudioDataMethodTypeErrorSupportFactory } from '../types';\n\n/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport: TTestAudioContextDecodeAudioDataMethodTypeErrorSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n\n            const resolvePromise = (err: Error) => {\n                if (isPending) {\n                    isPending = false;\n\n                    offlineAudioContext.startRendering();\n\n                    resolve(err instanceof TypeError);\n                }\n            };\n\n            let promise;\n\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                promise = offlineAudioContext\n                    // Bug #1: Safari requires a successCallback.\n                    .decodeAudioData(\n                        <any>null,\n                        () => {\n                            // Ignore the success callback.\n                        },\n                        resolvePromise\n                    );\n            } catch (err) {\n                resolvePromise(err);\n            }\n\n            // Bug #21: Safari does not support promises yet.\n            if (promise !== undefined) {\n                // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.\n                promise.catch(resolvePromise);\n            }\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}