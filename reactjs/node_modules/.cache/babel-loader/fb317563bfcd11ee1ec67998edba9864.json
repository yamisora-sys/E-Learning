{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n      return nativeAnalyserNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAMC,iCAAiC,GAAwC,CAClFC,wBADkF,EAElFC,kBAFkF,EAGlFC,uBAHkF,KAIlF;EACA,OAAO,MAAmE;IACtE,MAAMC,2BAA2B,GAAG,IAAIC,OAAJ,EAApC;;IAEA,MAAMC,kBAAkB,GAAG,OAAOC,KAAP,EAAgCC,yBAAhC,KAAyF;MAChH,IAAIC,kBAAkB,GAAGP,kBAAkB,CAAyBK,KAAzB,CAA3C,CADgH,CAGhH;;MACA,MAAMG,kCAAkC,GAAGX,gBAAgB,CAACU,kBAAD,EAAqBD,yBAArB,CAA3D;;MAEA,IAAI,CAACE,kCAAL,EAAyC;QACrC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,kBAAkB,CAACG,YADrB;UAEZC,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAFzB;UAGZC,qBAAqB,EAAEL,kBAAkB,CAACK,qBAH9B;UAIZC,OAAO,EAAEN,kBAAkB,CAACM,OAJhB;UAKZC,WAAW,EAAEP,kBAAkB,CAACO,WALpB;UAMZC,WAAW,EAAER,kBAAkB,CAACQ,WANpB;UAOZC,qBAAqB,EAAET,kBAAkB,CAACS;QAP9B,CAAhB;QAUAT,kBAAkB,GAAGR,wBAAwB,CAACO,yBAAD,EAA4BG,OAA5B,CAA7C;MACH;;MAEDP,2BAA2B,CAACe,GAA5B,CAAgCX,yBAAhC,EAA2DC,kBAA3D;MAEA,MAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,kBAAnC,CAA7B;MAEA,OAAOA,kBAAP;IACH,CAzBD;;IA2BA,OAAO;MACHW,MAAM,CAACb,KAAD,EAA0BC,yBAA1B,EAA+E;QACjF,MAAMa,0BAA0B,GAAGjB,2BAA2B,CAACkB,GAA5B,CAAgCd,yBAAhC,CAAnC;;QAEA,IAAIa,0BAA0B,KAAKE,SAAnC,EAA8C;UAC1C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,0BAAhB,CAAP;QACH;;QAED,OAAOf,kBAAkB,CAACC,KAAD,EAAQC,yBAAR,CAAzB;MACH;;IATE,CAAP;EAWH,CAzCD;AA0CH,CA/CM","names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\analyser-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAnalyserNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAnalyserNodeRendererFactoryFactory, TNativeAnalyserNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAnalyserNodeRendererFactory: TAnalyserNodeRendererFactoryFactory = (\n    createNativeAnalyserNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAnalyserNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAnalyserNode>();\n\n        const createAnalyserNode = async (proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode<T, TNativeAnalyserNode>(proxy);\n\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n\n            return nativeAnalyserNode;\n        };\n\n        return {\n            render(proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAnalyserNode> {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}