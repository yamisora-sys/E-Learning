{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n    return [fakeNativeDestinationAudioNode, output, 0];\n  }\n\n  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n  return [nativeDestinationAudioNode, output, input];\n};","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AAIA,OAAO,MAAMC,uCAAuC,GAAqD,CACrGC,qBADqG,EAErGC,0BAFqG,EAGrGC,MAHqG,EAIrGC,KAJqG,KAKjE;EACpC,IAAIL,sBAAsB,CAACG,0BAAD,CAA1B,EAAwD;IACpD,MAAMG,8BAA8B,GAAGH,0BAA0B,CAACI,MAA3B,CAAkCF,KAAlC,CAAvC;IAEAH,qBAAqB,CAACM,OAAtB,CAA8BF,8BAA9B,EAA8DF,MAA9D,EAAsE,CAAtE;IAEA,OAAO,CAACE,8BAAD,EAAiCF,MAAjC,EAAyC,CAAzC,CAAP;EACH;;EAEDF,qBAAqB,CAACM,OAAtB,CAA8BL,0BAA9B,EAA0DC,MAA1D,EAAkEC,KAAlE;EAEA,OAAO,CAACF,0BAAD,EAA6BC,MAA7B,EAAqCC,KAArC,CAAP;AACH,CAjBM","names":["isNativeAudioNodeFaker","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","output","input","fakeNativeDestinationAudioNode","inputs","connect"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\connect-native-audio-node-to-native-audio-node.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { INativeAudioNodeFaker } from '../interfaces';\nimport { TConnectNativeAudioNodeToNativeAudioNodeFunction, TNativeAudioNode } from '../types';\n\nexport const connectNativeAudioNodeToNativeAudioNode: TConnectNativeAudioNodeToNativeAudioNodeFunction = (\n    nativeSourceAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    nativeDestinationAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    output: number,\n    input: number\n): [TNativeAudioNode, number, number] => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n\n    return [nativeDestinationAudioNode, output, input];\n};\n"]},"metadata":{},"sourceType":"module"}