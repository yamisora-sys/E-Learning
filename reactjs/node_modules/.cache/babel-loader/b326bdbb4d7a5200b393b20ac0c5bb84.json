{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n\n    get offset() {\n      return this._offset;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this._nativeConstantSourceNode.start(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      }\n\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this._nativeConstantSourceNode.stop(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AAUA,MAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,MAAM,EAAE;AAJY,CAAxB;AAOA,OAAO,MAAMC,mCAAmC,GAA0C,CACtFC,oBADsF,EAEtFC,gBAFsF,EAGtFC,uCAHsF,EAItFC,8BAJsF,EAKtFC,gBALsF,EAMtFC,2BANsF,EAOtFC,iBAPsF,KAQtF;EACA,OAAO,MAAMC,kBAAN,SACKP,oBADL,CAC+D;IAWlEQ,YAAYC,OAAZ,EAAwBC,OAAxB,EAAiE;MAC7D,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;MACA,MAAMG,aAAa,GAAG,EAAE,GAAGlB,eAAL;QAAsB,GAAGgB;MAAzB,CAAtB;MACA,MAAMG,wBAAwB,GAAGV,8BAA8B,CAACQ,aAAD,EAAgBC,aAAhB,CAA/D;MACA,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;MACA,MAAMI,0BAA0B,GAC3BD,SAAS,GAAGZ,uCAAuC,EAA1C,GAA+C,IAD7D;MAIA,MAAMO,OAAN,EAAe,KAAf,EAAsBI,wBAAtB,EAAgDE,0BAAhD;MAEA,KAAKC,2BAAL,GAAmCD,0BAAnC;MACA,KAAKE,yBAAL,GAAiCJ,wBAAjC;MACA;;;;;MAIA,KAAKK,OAAL,GAAejB,gBAAgB,CAC3B,IAD2B,EAE3Ba,SAF2B,EAG3BD,wBAAwB,CAACf,MAHE,EAI3BR,0BAJ2B,EAK3BD,0BAL2B,CAA/B;MAOA,KAAK8B,QAAL,GAAgB,IAAhB;IACH;;IAES,IAANrB,MAAM;MACN,OAAO,KAAKoB,OAAZ;IACH;;IAEU,IAAPE,OAAO;MACP,OAAO,KAAKD,QAAZ;IACH;;IAEU,IAAPC,OAAO,CAACC,KAAD,EAAM;MACb,MAAMC,eAAe,GAAG,OAAOD,KAAP,KAAiB,UAAjB,GAA8Bf,iBAAiB,CAAC,IAAD,EAAOe,KAAP,CAA/C,GAA+D,IAAvF;MAEA,KAAKJ,yBAAL,CAA+BG,OAA/B,GAAyCE,eAAzC;MAEA,MAAMC,aAAa,GAAG,KAAKN,yBAAL,CAA+BG,OAArD;MAEA,KAAKD,QAAL,GAAgBI,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAKD,eAA5C,GAA8DD,KAA9D,GAAsEE,aAAtF;IACH;;IAEMC,KAAK,GAAS;MAAA,IAARC,IAAQ,uEAAD,CAAC;;MACjB,KAAKR,yBAAL,CAA+BO,KAA/B,CAAqCC,IAArC;;MAEA,IAAI,KAAKT,2BAAL,KAAqC,IAAzC,EAA+C;QAC3C,KAAKA,2BAAL,CAAiCQ,KAAjC,GAAyCC,IAAzC;MACH;;MAED,IAAI,KAAKhB,OAAL,CAAaiB,KAAb,KAAuB,QAA3B,EAAqC;QACjClC,wBAAwB,CAAC,IAAD,CAAxB;;QAEA,MAAMmC,2BAA2B,GAAG,MAAK;UACrC,KAAKV,yBAAL,CAA+BW,mBAA/B,CAAmD,OAAnD,EAA4DD,2BAA5D;;UAEA,IAAIpC,iBAAiB,CAAC,IAAD,CAArB,EAA6B;YACzBE,yBAAyB,CAAC,IAAD,CAAzB;UACH;QACJ,CAND;;QAQA,KAAKwB,yBAAL,CAA+BY,gBAA/B,CAAgD,OAAhD,EAAyDF,2BAAzD;MACH;IACJ;;IAEMG,IAAI,GAAS;MAAA,IAARL,IAAQ,uEAAD,CAAC;;MAChB,KAAKR,yBAAL,CAA+Ba,IAA/B,CAAoCL,IAApC;;MAEA,IAAI,KAAKT,2BAAL,KAAqC,IAAzC,EAA+C;QAC3C,KAAKA,2BAAL,CAAiCc,IAAjC,GAAwCL,IAAxC;MACH;IACJ;;EApFiE,CADtE;AAuFH,CAhGM","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","ConstantSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","onended","value","wrappedListener","nativeOnEnded","start","when","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioParam, IAudioScheduledSourceNodeEventMap, IConstantSourceNode, IConstantSourceOptions } from '../interfaces';\nimport {\n    TConstantSourceNodeConstructorFactory,\n    TConstantSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeConstantSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n} as const;\n\nexport const createConstantSourceNodeConstructor: TConstantSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRendererFactory,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class ConstantSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IConstantSourceNode<T>\n    {\n        private _constantSourceNodeRenderer: TConstantSourceNodeRenderer<T>;\n\n        private _nativeConstantSourceNode: TNativeConstantSourceNode;\n\n        private _offset: IAudioParam;\n\n        private _onended: null | TEventHandler<this>;\n\n        constructor(context: T, options?: Partial<IConstantSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = <TConstantSourceNodeRenderer<T>>(\n                (isOffline ? createConstantSourceNodeRendererFactory() : null)\n            );\n\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(\n                this,\n                isOffline,\n                nativeConstantSourceNode.offset,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._onended = null;\n        }\n\n        get offset(): IAudioParam {\n            return this._offset;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeConstantSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        public start(when = 0): void {\n            this._nativeConstantSourceNode.start(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeConstantSourceNode.stop(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}