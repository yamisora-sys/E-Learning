{"ast":null,"code":"export const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  nativeAudioBufferSourceNode.start();\n\n  try {\n    nativeAudioBufferSourceNode.start();\n  } catch {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,2DAA2D,GAAIC,aAAD,IAAkC;EACzG,MAAMC,2BAA2B,GAAGD,aAAa,CAACE,kBAAd,EAApC;EAEAD,2BAA2B,CAACE,KAA5B;;EAEA,IAAI;IACAF,2BAA2B,CAACE,KAA5B;EACH,CAFD,CAEE,MAAM;IACJ,OAAO,IAAP;EACH;;EAED,OAAO,KAAP;AACH,CAZM","names":["testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","nativeContext","nativeAudioBufferSourceNode","createBufferSource","start"],"sources":["D:\\programer\\xampp\\htdocs\\E-Learning\\reactjs\\node_modules\\standardized-audio-context\\src\\helpers\\test-audio-buffer-source-node-start-method-consecutive-calls-support.ts"],"sourcesContent":["import { TNativeContext } from '../types';\n\nexport const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n    nativeAudioBufferSourceNode.start();\n\n    try {\n        nativeAudioBufferSourceNode.start();\n    } catch {\n        return true;\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}